
import javalangObject = java.lang.Object;
import javalangannotationAnnotation = java.lang.annotation.Annotation;
import javalangClass = java.lang.Class;
import javalangreflectMethod = java.lang.reflect.Method;
import javalangCharSequence = java.lang.CharSequence;
import javautilList = java.util.List;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.DialogInterface.d.ts" />
/// <reference path="./android.database.Cursor.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Looper.d.ts" />
/// <reference path="./android.os.Message.d.ts" />
/// <reference path="./android.support.v7.app.AlertController.d.ts" />
/// <reference path="./android.support.v7.app.AppCompatDialog.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.LayoutInflater.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.view.Window.d.ts" />
/// <reference path="./android.widget.Button.d.ts" />
/// <reference path="./android.widget.Filter.d.ts" />
/// <reference path="./android.widget.ListAdapter.d.ts" />
/// <reference path="./android.widget.ListView.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class AlertController extends javalangObject {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public setView(param0: android.view.View): void;
					public installContent(): void;
					public setTitle(param0: string): void;
					public setView(param0: number): void;
					public setMessage(param0: string): void;
					public setButtonPanelLayoutHint(param0: number): void;
					public setIcon(param0: number): void;
					public setCustomTitle(param0: android.view.View): void;
					public getButton(param0: number): android.widget.Button;
					public setButton(param0: number, param1: string, param2: android.content.DialogInterface.OnClickListener, param3: android.os.Message): void;
					public setIcon(param0: android.graphics.drawable.Drawable): void;
					public getIconAttributeResId(param0: number): number;
					public constructor(param0: android.content.Context, param1: android.support.v7.app.AppCompatDialog, param2: android.view.Window);
					public setView(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public getListView(): android.widget.ListView;
				}
				export module AlertController {
					export class AlertParams extends javalangObject {
						public mContext: android.content.Context;
						public mInflater: android.view.LayoutInflater;
						public mIconId: number;
						public mIcon: android.graphics.drawable.Drawable;
						public mIconAttrId: number;
						public mTitle: string;
						public mCustomTitleView: android.view.View;
						public mMessage: string;
						public mPositiveButtonText: string;
						public mPositiveButtonListener: android.content.DialogInterface.OnClickListener;
						public mNegativeButtonText: string;
						public mNegativeButtonListener: android.content.DialogInterface.OnClickListener;
						public mNeutralButtonText: string;
						public mNeutralButtonListener: android.content.DialogInterface.OnClickListener;
						public mCancelable: boolean;
						public mOnCancelListener: android.content.DialogInterface.OnCancelListener;
						public mOnDismissListener: android.content.DialogInterface.OnDismissListener;
						public mOnKeyListener: android.content.DialogInterface.OnKeyListener;
						public mItems: native.Array<javalangCharSequence>;
						public mAdapter: android.widget.ListAdapter;
						public mOnClickListener: android.content.DialogInterface.OnClickListener;
						public mViewLayoutResId: number;
						public mView: android.view.View;
						public mViewSpacingLeft: number;
						public mViewSpacingTop: number;
						public mViewSpacingRight: number;
						public mViewSpacingBottom: number;
						public mViewSpacingSpecified: boolean;
						public mCheckedItems: native.Array<boolean>;
						public mIsMultiChoice: boolean;
						public mIsSingleChoice: boolean;
						public mCheckedItem: number;
						public mOnCheckboxClickListener: android.content.DialogInterface.OnMultiChoiceClickListener;
						public mCursor: android.database.Cursor;
						public mLabelColumn: string;
						public mIsCheckedColumn: string;
						public mForceInverseBackground: boolean;
						public mOnItemSelectedListener: android.widget.AdapterView.OnItemSelectedListener;
						public mOnPrepareListViewListener: android.support.v7.app.AlertController.AlertParams.OnPrepareListViewListener;
						public mRecycleOnMeasure: boolean;
						public constructor(param0: android.content.Context);
						public apply(param0: android.support.v7.app.AlertController): void;
					}
					export module AlertParams {
						export class OnPrepareListViewListener extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.v7.app.AlertController$AlertParams$OnPrepareListViewListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onPrepareListView(param0: android.widget.ListView): void;
							});
							public onPrepareListView(param0: android.widget.ListView): void;
						}
					}
					export class ButtonHandler extends android.os.Handler {
						public constructor(param0: android.content.DialogInterface);
						public constructor();
						public constructor(param0: android.os.Looper, param1: android.os.Handler.Callback);
						public constructor(param0: android.os.Handler.Callback);
						public constructor(param0: android.os.Looper);
						public constructor(param0: boolean);
						public handleMessage(param0: android.os.Message): void;
						public constructor(param0: android.os.Looper, param1: android.os.Handler.Callback, param2: boolean);
						public constructor(param0: android.os.Handler.Callback, param1: boolean);
					}
					export class CheckedItemAdapter extends android.widget.ArrayAdapter<any> {
						public constructor(param0: android.content.Context, param1: number);
						public isEnabled(param0: number): boolean;
						public areAllItemsEnabled(): boolean;
						public constructor();
						public constructor(param0: android.content.Context, param1: number, param2: number, param3: javautilList<any>);
						public hasStableIds(): boolean;
						public getFilter(): android.widget.Filter;
						public setDropDownViewTheme(param0: android.content.res.Resources.Theme): void;
						public constructor(param0: android.content.Context, param1: number, param2: number, param3: native.Array<javalangCharSequence>);
						public getDropDownViewTheme(): android.content.res.Resources.Theme;
						public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						public constructor(param0: android.content.Context, param1: number, param2: number);
						public constructor(param0: android.content.Context, param1: number, param2: number, param3: native.Array<javalangObject>);
						public constructor(param0: android.content.Context, param1: number, param2: native.Array<javalangObject>);
						public getItemId(param0: number): number;
						public constructor(param0: android.content.Context, param1: number, param2: javautilList<any>);
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.database.Cursor.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Message.d.ts" />
/// <reference path="./android.support.v7.app.AlertDialog.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.SearchEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.Button.d.ts" />
/// <reference path="./android.widget.ListAdapter.d.ts" />
/// <reference path="./android.widget.ListView.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class AlertDialog extends android.support.v7.app.AppCompatDialog implements android.content.DialogInterface {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context, param1: number);
					public setTitle(param0: string): void;
					public onAttachedToWindow(): void;
					public setMessage(param0: string): void;
					public constructor(param0: android.content.Context, param1: boolean, param2: android.os.Message);
					public setIcon(param0: android.graphics.drawable.Drawable): void;
					public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
					public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
					public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
					public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
					public setTitle(param0: number): void;
					public setIcon(param0: number): void;
					public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
					public onPanelClosed(param0: number, param1: android.view.Menu): void;
					public setCustomTitle(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: boolean, param2: android.content.DialogInterface.OnCancelListener);
					public onWindowFocusChanged(param0: boolean): void;
					public dismiss(): void;
					public onContentChanged(): void;
					public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
					public getListView(): android.widget.ListView;
					public setView(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
					public onSupportActionModeFinished(param0: android.support.v7.view.ActionMode): void;
					public onSearchRequested(): boolean;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
					public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
					public onSearchRequested(param0: any): boolean;
					public setButton(param0: number, param1: string, param2: android.content.DialogInterface.OnClickListener): void;
					public onCreate(param0: android.os.Bundle): void;
					public onDetachedFromWindow(): void;
					public onCreatePanelView(param0: number): android.view.View;
					public onActionModeFinished(param0: android.view.ActionMode): void;
					public setButton(param0: number, param1: string, param2: android.os.Message): void;
					public onActionModeStarted(param0: android.view.ActionMode): void;
					public setView(param0: android.view.View): void;
					public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
					public cancel(): void;
					public onWindowStartingSupportActionMode(param0: android.support.v7.view.ActionMode.Callback): android.support.v7.view.ActionMode;
					public onSupportActionModeStarted(param0: android.support.v7.view.ActionMode): void;
					public onWindowDismissed(): void;
					public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
					public constructor(param0: android.content.Context);
					public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
					public getButton(param0: number): android.widget.Button;
					public setIconAttribute(param0: number): void;
					public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
				}
				export module AlertDialog {
					export class Builder extends javalangObject {
						public setView(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): android.support.v7.app.AlertDialog.Builder;
						public setIcon(param0: android.graphics.drawable.Drawable): android.support.v7.app.AlertDialog.Builder;
						public setPositiveButton(param0: string, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setNeutralButton(param0: number, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public create(): android.support.v7.app.AlertDialog;
						public setCustomTitle(param0: android.view.View): android.support.v7.app.AlertDialog.Builder;
						public setMultiChoiceItems(param0: native.Array<javalangCharSequence>, param1: native.Array<boolean>, param2: android.content.DialogInterface.OnMultiChoiceClickListener): android.support.v7.app.AlertDialog.Builder;
						public setView(param0: number): android.support.v7.app.AlertDialog.Builder;
						public setItems(param0: number, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setPositiveButton(param0: number, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setNegativeButton(param0: string, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public constructor(param0: android.content.Context);
						public setOnDismissListener(param0: android.content.DialogInterface.OnDismissListener): android.support.v7.app.AlertDialog.Builder;
						public setCursor(param0: android.database.Cursor, param1: android.content.DialogInterface.OnClickListener, param2: string): android.support.v7.app.AlertDialog.Builder;
						public setSingleChoiceItems(param0: android.database.Cursor, param1: number, param2: string, param3: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setTitle(param0: number): android.support.v7.app.AlertDialog.Builder;
						public setMessage(param0: number): android.support.v7.app.AlertDialog.Builder;
						public setItems(param0: native.Array<javalangCharSequence>, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setSingleChoiceItems(param0: android.widget.ListAdapter, param1: number, param2: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setNeutralButton(param0: string, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setIcon(param0: number): android.support.v7.app.AlertDialog.Builder;
						public constructor(param0: android.content.Context, param1: number);
						public setOnItemSelectedListener(param0: android.widget.AdapterView.OnItemSelectedListener): android.support.v7.app.AlertDialog.Builder;
						public setCancelable(param0: boolean): android.support.v7.app.AlertDialog.Builder;
						public setView(param0: android.view.View): android.support.v7.app.AlertDialog.Builder;
						public setAdapter(param0: android.widget.ListAdapter, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setMultiChoiceItems(param0: number, param1: native.Array<boolean>, param2: android.content.DialogInterface.OnMultiChoiceClickListener): android.support.v7.app.AlertDialog.Builder;
						public setMultiChoiceItems(param0: android.database.Cursor, param1: string, param2: string, param3: android.content.DialogInterface.OnMultiChoiceClickListener): android.support.v7.app.AlertDialog.Builder;
						public setNegativeButton(param0: number, param1: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public getContext(): android.content.Context;
						public setOnKeyListener(param0: android.content.DialogInterface.OnKeyListener): android.support.v7.app.AlertDialog.Builder;
						public show(): android.support.v7.app.AlertDialog;
						public setOnCancelListener(param0: android.content.DialogInterface.OnCancelListener): android.support.v7.app.AlertDialog.Builder;
						public setInverseBackgroundForced(param0: boolean): android.support.v7.app.AlertDialog.Builder;
						public setTitle(param0: string): android.support.v7.app.AlertDialog.Builder;
						public setRecycleOnMeasureEnabled(param0: boolean): android.support.v7.app.AlertDialog.Builder;
						public setMessage(param0: string): android.support.v7.app.AlertDialog.Builder;
						public setIconAttribute(param0: number): android.support.v7.app.AlertDialog.Builder;
						public setSingleChoiceItems(param0: number, param1: number, param2: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
						public setSingleChoiceItems(param0: native.Array<javalangCharSequence>, param1: number, param2: android.content.DialogInterface.OnClickListener): android.support.v7.app.AlertDialog.Builder;
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.SearchEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class AppCompatDelegateImplV14 extends android.support.v7.app.AppCompatDelegateImplV11 {
					public onSaveInstanceState(param0: android.os.Bundle): void;
					public onCreate(param0: android.os.Bundle): void;
					public applyDayNight(): boolean;
					public onMenuModeChange(param0: android.support.v7.view.menu.MenuBuilder): void;
					public onMenuItemSelected(param0: android.support.v7.view.menu.MenuBuilder, param1: android.view.MenuItem): boolean;
					public setHandleNativeActionModesEnabled(param0: boolean): void;
					public isHandleNativeActionModesEnabled(): boolean;
					public setLocalNightMode(param0: number): void;
				}
				export module AppCompatDelegateImplV14 {
					export class AppCompatWindowCallbackV14 extends android.support.v7.app.AppCompatDelegateImplBase.AppCompatWindowCallback {
						public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
						public onContentChanged(): void;
						public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
						public onActionModeFinished(param0: android.view.ActionMode): void;
						public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
						public onAttachedToWindow(): void;
						public onDetachedFromWindow(): void;
						public onPanelClosed(param0: number, param1: android.view.Menu): void;
						public onSearchRequested(): boolean;
						public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
						public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
						public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
						public onCreatePanelView(param0: number): android.view.View;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
						public onSearchRequested(param0: any): boolean;
						public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
						public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
						public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
						public onWindowFocusChanged(param0: boolean): void;
						public onActionModeStarted(param0: android.view.ActionMode): void;
						public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
						public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.SearchEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class AppCompatDelegateImplV23 extends android.support.v7.app.AppCompatDelegateImplV14 {
					public onMenuModeChange(param0: android.support.v7.view.menu.MenuBuilder): void;
					public onMenuItemSelected(param0: android.support.v7.view.menu.MenuBuilder, param1: android.view.MenuItem): boolean;
				}
				export module AppCompatDelegateImplV23 {
					export class AppCompatWindowCallbackV23 extends android.support.v7.app.AppCompatDelegateImplV14.AppCompatWindowCallbackV14 {
						public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
						public onContentChanged(): void;
						public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
						public onActionModeFinished(param0: android.view.ActionMode): void;
						public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
						public onAttachedToWindow(): void;
						public onDetachedFromWindow(): void;
						public onPanelClosed(param0: number, param1: android.view.Menu): void;
						public onSearchRequested(): boolean;
						public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
						public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
						public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
						public onCreatePanelView(param0: number): android.view.View;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
						public onSearchRequested(param0: any): boolean;
						public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
						public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
						public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
						public onWindowFocusChanged(param0: boolean): void;
						public onActionModeStarted(param0: android.view.ActionMode): void;
						public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
						public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
					}
				}
			}
		}
	}
}

import javalangRunnable = java.lang.Runnable;

/// <reference path="./android.app.Dialog.d.ts" />
/// <reference path="./android.content.DialogInterface.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class AppCompatDialogFragment extends android.support.v4.app.DialogFragment {
					public onCreateContextMenu(param0: android.view.ContextMenu, param1: android.view.View, param2: android.view.ContextMenu.ContextMenuInfo): void;
					public setupDialog(param0: android.app.Dialog, param1: number): void;
					public onDismiss(param0: android.content.DialogInterface): void;
					public constructor();
					public onCreateDialog(param0: android.os.Bundle): android.app.Dialog;
					public onCancel(param0: android.content.DialogInterface): void;
					public onConfigurationChanged(param0: android.content.res.Configuration): void;
					public onLowMemory(): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class AppCompatViewInflater extends javalangObject {
					public createView(param0: android.view.View, param1: string, param2: android.content.Context, param3: android.util.AttributeSet, param4: boolean, param5: boolean, param6: boolean): android.view.View;
				}
				export module AppCompatViewInflater {
					export class DeclaredOnClickListener extends javalangObject implements android.view.View.OnClickListener {
						public constructor(param0: android.view.View, param1: string);
						public onClick(param0: android.view.View): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class NavItemSelectedListener extends javalangObject implements android.widget.AdapterView.OnItemSelectedListener {
					public onItemSelected(param0: android.widget.AdapterView<any>, param1: android.view.View, param2: number, param3: number): void;
					public constructor(param0: android.support.v7.app.ActionBar.OnNavigationListener);
					public onNothingSelected(param0: android.widget.AdapterView<any>): void;
				}
			}
		}
	}
}

/// <reference path="./android.app.Notification.d.ts" />
/// <reference path="./android.app.PendingIntent.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./any.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class NotificationCompat extends android.support.v4.app.NotificationCompat {
					public constructor();
				}
				export module NotificationCompat {
					export class Builder extends android.support.v4.app.NotificationCompat.Builder {
						public getExtender(): any;//android.support.v4.app.NotificationCompat.BuilderExtender;
						public constructor(param0: android.content.Context);
					}
					// export class IceCreamSandwichExtender extends android.support.v4.app.NotificationCompat.BuilderExtender {
					// 	public build(param0: android.support.v4.app.NotificationCompat.Builder, param1: any): android.app.Notification;
					// }
					// export class JellybeanExtender extends android.support.v4.app.NotificationCompat.BuilderExtender {
					// 	public build(param0: android.support.v4.app.NotificationCompat.Builder, param1: any): android.app.Notification;
					// }
					// export class LollipopExtender extends android.support.v4.app.NotificationCompat.BuilderExtender {
					// 	public build(param0: android.support.v4.app.NotificationCompat.Builder, param1: any): android.app.Notification;
					// }
					export class MediaStyle extends android.support.v4.app.NotificationCompat.Style {
						public setShowActionsInCompactView(param0: native.Array<number>): android.support.v7.app.NotificationCompat.MediaStyle;
						public constructor();
						public setMediaSession(param0: any): android.support.v7.app.NotificationCompat.MediaStyle;
						public setShowCancelButton(param0: boolean): android.support.v7.app.NotificationCompat.MediaStyle;
						public constructor(param0: android.support.v4.app.NotificationCompat.Builder);
						public setCancelButtonIntent(param0: android.app.PendingIntent): android.support.v7.app.NotificationCompat.MediaStyle;
					}
				}
			}
		}
	}
}

/// <reference path="./any.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class NotificationCompatImpl21 extends javalangObject {
					public static addMediaStyle(param0: any, param1: native.Array<number>, param2: javalangObject): void;
				}
			}
		}
	}
}

/// <reference path="./android.app.Notification.d.ts" />
/// <reference path="./android.app.PendingIntent.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Bitmap.d.ts" />
/// <reference path="./any.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class NotificationCompatImplBase extends javalangObject {
					public static overrideContentView(param0: any, param1: android.content.Context, param2: string, param3: string, param4: string, param5: number, param6: android.graphics.Bitmap, param7: string, param8: boolean, param9: number, param10: javautilList<any>, param11: native.Array<number>, param12: boolean, param13: android.app.PendingIntent): void;
					public static overrideBigContentView(param0: android.app.Notification, param1: android.content.Context, param2: string, param3: string, param4: string, param5: number, param6: android.graphics.Bitmap, param7: string, param8: boolean, param9: number, param10: javautilList<any>, param11: boolean, param12: android.app.PendingIntent): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.app.ToolbarActionBar.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.widget.Toolbar.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.SearchEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.SpinnerAdapter.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class ToolbarActionBar extends android.support.v7.app.ActionBar {
					public setLogo(param0: number): void;
					public getTitle(): string;
					public invalidateOptionsMenu(): boolean;
					public isShowing(): boolean;
					public getElevation(): number;
					public getNavigationMode(): number;
					public getTabAt(param0: number): android.support.v7.app.ActionBar.Tab;
					public getNavigationItemCount(): number;
					public setTitle(param0: string): void;
					public addTab(param0: android.support.v7.app.ActionBar.Tab, param1: number, param2: boolean): void;
					public removeTab(param0: android.support.v7.app.ActionBar.Tab): void;
					public constructor(param0: android.support.v7.widget.Toolbar, param1: string, param2: android.view.Window.Callback);
					public addTab(param0: android.support.v7.app.ActionBar.Tab): void;
					public addOnMenuVisibilityListener(param0: android.support.v7.app.ActionBar.OnMenuVisibilityListener): void;
					public setDisplayShowCustomEnabled(param0: boolean): void;
					public setDefaultDisplayHomeAsUpEnabled(param0: boolean): void;
					public getCustomView(): android.view.View;
					public removeOnMenuVisibilityListener(param0: android.support.v7.app.ActionBar.OnMenuVisibilityListener): void;
					public setSelectedNavigationItem(param0: number): void;
					public setDisplayShowHomeEnabled(param0: boolean): void;
					public constructor();
					public onMenuKeyEvent(param0: android.view.KeyEvent): boolean;
					public setIcon(param0: android.graphics.drawable.Drawable): void;
					public addTab(param0: android.support.v7.app.ActionBar.Tab, param1: number): void;
					public onConfigurationChanged(param0: android.content.res.Configuration): void;
					public setSplitBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public show(): void;
					public setDisplayOptions(param0: number, param1: number): void;
					public getHeight(): number;
					public addTab(param0: android.support.v7.app.ActionBar.Tab, param1: boolean): void;
					public setStackedBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public setDisplayOptions(param0: number): void;
					public isTitleTruncated(): boolean;
					public setTitle(param0: number): void;
					public setLogo(param0: android.graphics.drawable.Drawable): void;
					public newTab(): android.support.v7.app.ActionBar.Tab;
					public setIcon(param0: number): void;
					public collapseActionView(): boolean;
					public setCustomView(param0: android.view.View): void;
					public hide(): void;
					public setDisplayUseLogoEnabled(param0: boolean): void;
					public setDisplayShowTitleEnabled(param0: boolean): void;
					public onKeyShortcut(param0: number, param1: android.view.KeyEvent): boolean;
					public setCustomView(param0: number): void;
					public setShowHideAnimationEnabled(param0: boolean): void;
					public setListNavigationCallbacks(param0: android.widget.SpinnerAdapter, param1: android.support.v7.app.ActionBar.OnNavigationListener): void;
					public getTabCount(): number;
					public setElevation(param0: number): void;
					public setHomeActionContentDescription(param0: string): void;
					public requestFocus(): boolean;
					public getWrappedWindowCallback(): android.view.Window.Callback;
					public setSubtitle(param0: number): void;
					public dispatchMenuVisibilityChanged(param0: boolean): void;
					public setCustomView(param0: android.view.View, param1: android.support.v7.app.ActionBar.LayoutParams): void;
					public setHomeActionContentDescription(param0: number): void;
					public getSelectedTab(): android.support.v7.app.ActionBar.Tab;
					public getThemedContext(): android.content.Context;
					public setHomeAsUpIndicator(param0: android.graphics.drawable.Drawable): void;
					public getSelectedNavigationIndex(): number;
					public setNavigationMode(param0: number): void;
					public setDisplayHomeAsUpEnabled(param0: boolean): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public removeTabAt(param0: number): void;
					public openOptionsMenu(): boolean;
					public setSubtitle(param0: string): void;
					public removeAllTabs(): void;
					public getSubtitle(): string;
					public getDisplayOptions(): number;
					public setHomeButtonEnabled(param0: boolean): void;
					public selectTab(param0: android.support.v7.app.ActionBar.Tab): void;
					public setWindowTitle(param0: string): void;
					public setHomeAsUpIndicator(param0: number): void;
				}
				export module ToolbarActionBar {
					export class ActionMenuPresenterCallback extends javalangObject implements android.support.v7.view.menu.MenuPresenter.Callback {
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public onOpenSubMenu(param0: android.support.v7.view.menu.MenuBuilder): boolean;
					}
					export class MenuBuilderCallback extends javalangObject implements android.support.v7.view.menu.MenuBuilder.Callback {
						public onMenuItemSelected(param0: android.support.v7.view.menu.MenuBuilder, param1: android.view.MenuItem): boolean;
						public onMenuModeChange(param0: android.support.v7.view.menu.MenuBuilder): void;
					}
					export class PanelMenuPresenterCallback extends javalangObject implements android.support.v7.view.menu.MenuPresenter.Callback {
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public onOpenSubMenu(param0: android.support.v7.view.menu.MenuBuilder): boolean;
					}
					export class ToolbarCallbackWrapper extends android.support.v7.view.WindowCallbackWrapper {
						public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
						public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
						public onActionModeFinished(param0: android.view.ActionMode): void;
						public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
						public onAttachedToWindow(): void;
						public onSearchRequested(): boolean;
						public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
						public constructor(param0: android.support.v7.app.ToolbarActionBar, param1: android.view.Window.Callback);
						public onCreatePanelView(param0: number): android.view.View;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
						public onSearchRequested(param0: any): boolean;
						public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
						public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
						public constructor(param0: android.view.Window.Callback);
						public onActionModeStarted(param0: android.view.ActionMode): void;
						public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
						public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
						public onContentChanged(): void;
						public onDetachedFromWindow(): void;
						public onPanelClosed(param0: number, param1: android.view.Menu): void;
						public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
						public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
						public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
						public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
						public onWindowFocusChanged(param0: boolean): void;
					}
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module app {
				export class TwilightCalculator extends javalangObject {
					public static DAY: number;
					public static NIGHT: number;
					public sunset: number;
					public sunrise: number;
					public state: number;
					public calculateTwilight(param0: number, param1: number, param2: number): void;
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module app {
				export class TwilightManager extends javalangObject {
				}
				export module TwilightManager {
					export class TwilightState extends javalangObject {
					}
				}
			}
		}
	}
}

/// <reference path="./android.app.Activity.d.ts" />
/// <reference path="./android.app.Dialog.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.app.WindowDecorActionBar.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.SubMenuBuilder.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuInflater.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.SpinnerAdapter.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module app {
				export class WindowDecorActionBar extends android.support.v7.app.ActionBar implements android.support.v7.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback {
					public getTitle(): string;
					public setLogo(param0: number): void;
					public isShowing(): boolean;
					public getElevation(): number;
					public getNavigationMode(): number;
					public getTabAt(param0: number): android.support.v7.app.ActionBar.Tab;
					public setTitle(param0: string): void;
					public addTab(param0: android.support.v7.app.ActionBar.Tab, param1: number, param2: boolean): void;
					public removeTab(param0: android.support.v7.app.ActionBar.Tab): void;
					public getNavigationItemCount(): number;
					public addOnMenuVisibilityListener(param0: android.support.v7.app.ActionBar.OnMenuVisibilityListener): void;
					public addTab(param0: android.support.v7.app.ActionBar.Tab): void;
					public setDisplayShowCustomEnabled(param0: boolean): void;
					public showForSystem(): void;
					public setDefaultDisplayHomeAsUpEnabled(param0: boolean): void;
					public getCustomView(): android.view.View;
					public removeOnMenuVisibilityListener(param0: android.support.v7.app.ActionBar.OnMenuVisibilityListener): void;
					public setSelectedNavigationItem(param0: number): void;
					public isHideOnContentScrollEnabled(): boolean;
					public setDisplayShowHomeEnabled(param0: boolean): void;
					public constructor();
					public enableContentAnimations(param0: boolean): void;
					public onContentScrollStarted(): void;
					public onContentScrollStopped(): void;
					public addTab(param0: android.support.v7.app.ActionBar.Tab, param1: number): void;
					public hideForSystem(): void;
					public setIcon(param0: android.graphics.drawable.Drawable): void;
					public onConfigurationChanged(param0: android.content.res.Configuration): void;
					public startActionMode(param0: android.support.v7.view.ActionMode.Callback): android.support.v7.view.ActionMode;
					public setSplitBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public setHideOnContentScrollEnabled(param0: boolean): void;
					public show(): void;
					public setDisplayOptions(param0: number, param1: number): void;
					public getHeight(): number;
					public addTab(param0: android.support.v7.app.ActionBar.Tab, param1: boolean): void;
					public hasLogo(): boolean;
					public setDisplayOptions(param0: number): void;
					public setStackedBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public isTitleTruncated(): boolean;
					public setTitle(param0: number): void;
					public newTab(): android.support.v7.app.ActionBar.Tab;
					public setLogo(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.app.Dialog);
					public setIcon(param0: number): void;
					public animateToMode(param0: boolean): void;
					public onWindowVisibilityChanged(param0: number): void;
					public collapseActionView(): boolean;
					public setCustomView(param0: android.view.View): void;
					public hide(): void;
					public setHideOffset(param0: number): void;
					public setDisplayUseLogoEnabled(param0: boolean): void;
					public setDisplayShowTitleEnabled(param0: boolean): void;
					public setCustomView(param0: number): void;
					public setShowHideAnimationEnabled(param0: boolean): void;
					public setListNavigationCallbacks(param0: android.widget.SpinnerAdapter, param1: android.support.v7.app.ActionBar.OnNavigationListener): void;
					public getTabCount(): number;
					public setElevation(param0: number): void;
					public requestFocus(): boolean;
					public setHomeActionContentDescription(param0: string): void;
					public setSubtitle(param0: number): void;
					public doHide(param0: boolean): void;
					public dispatchMenuVisibilityChanged(param0: boolean): void;
					public setCustomView(param0: android.view.View, param1: android.support.v7.app.ActionBar.LayoutParams): void;
					public constructor(param0: android.view.View);
					public setHomeActionContentDescription(param0: number): void;
					public getSelectedTab(): android.support.v7.app.ActionBar.Tab;
					public getThemedContext(): android.content.Context;
					public setHomeAsUpIndicator(param0: android.graphics.drawable.Drawable): void;
					public getSelectedNavigationIndex(): number;
					public setNavigationMode(param0: number): void;
					public setDisplayHomeAsUpEnabled(param0: boolean): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public removeTabAt(param0: number): void;
					public doShow(param0: boolean): void;
					public setSubtitle(param0: string): void;
					public removeAllTabs(): void;
					public getSubtitle(): string;
					public getDisplayOptions(): number;
					public constructor(param0: android.app.Activity, param1: boolean);
					public getHideOffset(): number;
					public hasIcon(): boolean;
					public setHomeButtonEnabled(param0: boolean): void;
					public selectTab(param0: android.support.v7.app.ActionBar.Tab): void;
					public setWindowTitle(param0: string): void;
					public setHomeAsUpIndicator(param0: number): void;
				}
				export module WindowDecorActionBar {
					export class ActionModeImpl extends android.support.v7.view.ActionMode implements android.support.v7.view.menu.MenuBuilder.Callback {
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public constructor();
						public finish(): void;
						public isTitleOptional(): boolean;
						public setCustomView(param0: android.view.View): void;
						public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
						public onMenuModeChange(param0: android.support.v7.view.menu.MenuBuilder): void;
						public getTitle(): string;
						public setTitle(param0: string): void;
						public invalidate(): void;
						public setSubtitle(param0: string): void;
						public constructor(param0: android.support.v7.app.WindowDecorActionBar, param1: android.content.Context, param2: android.support.v7.view.ActionMode.Callback);
						public getMenuInflater(): android.view.MenuInflater;
						public setTitle(param0: number): void;
						public getMenu(): android.view.Menu;
						public getCustomView(): android.view.View;
						public setSubtitle(param0: number): void;
						public setTitleOptionalHint(param0: boolean): void;
						public dispatchOnCreate(): boolean;
						public onMenuItemSelected(param0: android.support.v7.view.menu.MenuBuilder, param1: android.view.MenuItem): boolean;
						public onCloseSubMenu(param0: android.support.v7.view.menu.SubMenuBuilder): void;
						public getSubtitle(): string;
					}
					export class TabImpl extends android.support.v7.app.ActionBar.Tab {
						public constructor();
						public getTag(): javalangObject;
						public getPosition(): number;
						public setIcon(param0: android.graphics.drawable.Drawable): android.support.v7.app.ActionBar.Tab;
						public setCustomView(param0: number): android.support.v7.app.ActionBar.Tab;
						public getCallback(): android.support.v7.app.ActionBar.TabListener;
						public setTabListener(param0: android.support.v7.app.ActionBar.TabListener): android.support.v7.app.ActionBar.Tab;
						public setTag(param0: javalangObject): android.support.v7.app.ActionBar.Tab;
						public constructor(param0: android.support.v7.app.WindowDecorActionBar);
						public getText(): string;
						public setContentDescription(param0: number): android.support.v7.app.ActionBar.Tab;
						public setText(param0: string): android.support.v7.app.ActionBar.Tab;
						public setIcon(param0: number): android.support.v7.app.ActionBar.Tab;
						public setText(param0: number): android.support.v7.app.ActionBar.Tab;
						public getCustomView(): android.view.View;
						public setPosition(param0: number): void;
						public setCustomView(param0: android.view.View): android.support.v7.app.ActionBar.Tab;
						public getIcon(): android.graphics.drawable.Drawable;
						public select(): void;
						public getContentDescription(): string;
						public setContentDescription(param0: string): android.support.v7.app.ActionBar.Tab;
					}
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module appcompat {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.ColorFilter.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.Region.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module graphics {
				export module drawable {
					export class DrawableWrapper extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {
						public getChangingConfigurations(): number;
						public setColorFilter(param0: android.graphics.ColorFilter): void;
						public onLevelChange(param0: number): boolean;
						public getPadding(param0: android.graphics.Rect): boolean;
						public setTintList(param0: android.content.res.ColorStateList): void;
						public getMinimumWidth(): number;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public setAutoMirrored(param0: boolean): void;
						public isStateful(): boolean;
						public setVisible(param0: boolean, param1: boolean): boolean;
						public onBoundsChange(param0: android.graphics.Rect): void;
						public setState(param0: native.Array<number>): boolean;
						public setFilterBitmap(param0: boolean): void;
						public getState(): native.Array<number>;
						public isAutoMirrored(): boolean;
						public getCurrent(): android.graphics.drawable.Drawable;
						public setWrappedDrawable(param0: android.graphics.drawable.Drawable): void;
						public getTransparentRegion(): android.graphics.Region;
						public draw(param0: android.graphics.Canvas): void;
						public getMinimumHeight(): number;
						public setDither(param0: boolean): void;
						public constructor();
						public getIntrinsicWidth(): number;
						public getIntrinsicHeight(): number;
						public setTintMode(param0: android.graphics.PorterDuff.Mode): void;
						public getWrappedDrawable(): android.graphics.drawable.Drawable;
						public setTint(param0: number): void;
						public setColorFilter(param0: number, param1: android.graphics.PorterDuff.Mode): void;
						public getOpacity(): number;
						public jumpToCurrentState(): void;
						public setAlpha(param0: number): void;
						public setChangingConfigurations(param0: number): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
						public setHotspot(param0: number, param1: number): void;
						public setHotspotBounds(param0: number, param1: number, param2: number, param3: number): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
						public constructor(param0: android.graphics.drawable.Drawable);
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.ColorFilter.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module graphics {
				export module drawable {
					export class DrawerArrowDrawable extends android.graphics.drawable.Drawable {
						public static ARROW_DIRECTION_LEFT: number;
						public static ARROW_DIRECTION_RIGHT: number;
						public static ARROW_DIRECTION_START: number;
						public static ARROW_DIRECTION_END: number;
						public getColor(): number;
						public setColorFilter(param0: android.graphics.ColorFilter): void;
						public isSpinEnabled(): boolean;
						public getGapSize(): number;
						public getArrowShaftLength(): number;
						public constructor(param0: android.content.Context);
						public setArrowShaftLength(param0: number): void;
						public setSpinEnabled(param0: boolean): void;
						public setProgress(param0: number): void;
						public setArrowHeadLength(param0: number): void;
						public getBarThickness(): number;
						public setBarThickness(param0: number): void;
						public getProgress(): number;
						public getBarLength(): number;
						public draw(param0: android.graphics.Canvas): void;
						public constructor();
						public getIntrinsicWidth(): number;
						public getIntrinsicHeight(): number;
						public setDirection(param0: number): void;
						public getArrowHeadLength(): number;
						public setColorFilter(param0: number, param1: android.graphics.PorterDuff.Mode): void;
						public setColor(param0: number): void;
						public getOpacity(): number;
						public setAlpha(param0: number): void;
						public setVerticalMirror(param0: boolean): void;
						public setBarLength(param0: number): void;
						public setGapSize(param0: number): void;
						public getDirection(): number;
						public getPaint(): android.graphics.Paint;
					}
					export module DrawerArrowDrawable {
						export class ArrowDirection extends javalangObject implements javalangannotationAnnotation {
							/**
							 * Constructs a new instance of the android.support.v7.graphics.drawable.DrawerArrowDrawable$ArrowDirection interface with the provided implementation.
							 */
							public constructor(implementation: {
								annotationType(): javalangClass<any>;
								equals(param0: javalangObject): boolean;
								hashCode(): number;
								toString(): string;
							});
							public annotationType(): javalangClass<any>;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: javalangObject): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module text {
				export class AllCapsTransformationMethod extends javalangObject implements android.text.method.TransformationMethod {
					public onFocusChanged(param0: android.view.View, param1: string, param2: boolean, param3: number, param4: android.graphics.Rect): void;
					public constructor(param0: android.content.Context);
					public getTransformation(param0: string, param1: android.view.View): string;
				}
			}
		}
	}
}

/// <reference path="./android.view.ViewGroup.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module transition {
				export class ActionBarTransition extends javalangObject {
					public constructor();
					public static beginDelayedTransition(param0: android.view.ViewGroup): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export class ActionBarPolicy extends javalangObject {
					public getMaxActionButtons(): number;
					public getEmbeddedMenuWidthLimit(): number;
					public getTabContainerHeight(): number;
					public hasEmbeddedTabs(): boolean;
					public static get(param0: android.content.Context): android.support.v7.view.ActionBarPolicy;
					public enableHomeButtonByDefault(): boolean;
					public showsOverflowMenuButton(): boolean;
					public getStackedTabMaxWidth(): number;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export class ContextThemeWrapper extends android.content.ContextWrapper {
					public getSystemService(param0: javalangClass<any>): javalangObject;
					public constructor(param0: android.content.Context, param1: number);
					public getThemeResId(): number;
					public getTheme(): android.content.res.Resources.Theme;
					public constructor(param0: android.content.Context);
					public constructor();
					public constructor(param0: android.content.Context, param1: android.content.res.Resources.Theme);
					public setTheme(param0: number): void;
					public onApplyThemeResource(param0: android.content.res.Resources.Theme, param1: number, param2: boolean): void;
					public getSystemService(param0: string): javalangObject;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.SubMenuBuilder.d.ts" />
/// <reference path="./android.support.v7.widget.ActionBarContextView.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuInflater.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export class StandaloneActionMode extends android.support.v7.view.ActionMode implements android.support.v7.view.menu.MenuBuilder.Callback {
					public getTitle(): string;
					public onCloseSubMenu(param0: android.support.v7.view.menu.SubMenuBuilder): void;
					public constructor(param0: android.content.Context, param1: android.support.v7.widget.ActionBarContextView, param2: android.support.v7.view.ActionMode.Callback, param3: boolean);
					public setTitle(param0: string): void;
					public finish(): void;
					public onMenuModeChange(param0: android.support.v7.view.menu.MenuBuilder): void;
					public getMenuInflater(): android.view.MenuInflater;
					public setTitle(param0: number): void;
					public setSubtitle(param0: number): void;
					public getCustomView(): android.view.View;
					public getMenu(): android.view.Menu;
					public constructor();
					public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
					public setSubtitle(param0: string): void;
					public isTitleOptional(): boolean;
					public getSubtitle(): string;
					public setCustomView(param0: android.view.View): void;
					public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
					public onMenuItemSelected(param0: android.support.v7.view.menu.MenuBuilder, param1: android.view.MenuItem): boolean;
					public isUiFocusable(): boolean;
					public setTitleOptionalHint(param0: boolean): void;
					public invalidate(): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuInflater.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export class SupportActionModeWrapper extends android.view.ActionMode {
					public getTitle(): string;
					public getTitleOptionalHint(): boolean;
					public setTitle(param0: string): void;
					public finish(): void;
					public getMenuInflater(): android.view.MenuInflater;
					public setTitle(param0: number): void;
					public setSubtitle(param0: number): void;
					public getCustomView(): android.view.View;
					public getTag(): javalangObject;
					public getMenu(): android.view.Menu;
					public constructor();
					public setSubtitle(param0: string): void;
					public isTitleOptional(): boolean;
					public getSubtitle(): string;
					public setTag(param0: javalangObject): void;
					public setCustomView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.support.v7.view.ActionMode);
					public setTitleOptionalHint(param0: boolean): void;
					public invalidate(): void;
				}
				export module SupportActionModeWrapper {
					export class CallbackWrapper extends javalangObject implements android.support.v7.view.ActionMode.Callback {
						public onPrepareActionMode(param0: android.support.v7.view.ActionMode, param1: android.view.Menu): boolean;
						public onDestroyActionMode(param0: android.support.v7.view.ActionMode): void;
						public onActionItemClicked(param0: android.support.v7.view.ActionMode, param1: android.view.MenuItem): boolean;
						public getActionModeWrapper(param0: android.support.v7.view.ActionMode): android.view.ActionMode;
						public constructor(param0: android.content.Context, param1: android.view.ActionMode.Callback);
						public onCreateActionMode(param0: android.support.v7.view.ActionMode, param1: android.view.Menu): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.support.v7.view.SupportMenuInflater.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export class SupportMenuInflater {
					public inflate(param0: number, param1: android.view.Menu): void;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: javalangObject);
				}
				export module SupportMenuInflater {
					export class InflatedOnMenuItemClickListener extends javalangObject implements android.view.MenuItem.OnMenuItemClickListener {
						public constructor(param0: javalangObject, param1: string);
						public onMenuItemClick(param0: android.view.MenuItem): boolean;
					}
					export class MenuState extends javalangObject {
						public addSubMenuItem(): android.view.SubMenu;
						public hasAddedItem(): boolean;
						public addItem(): void;
						public readGroup(param0: android.util.AttributeSet): void;
						public constructor(param0: android.support.v7.view.SupportMenuInflater, param1: android.view.Menu);
						public resetGroup(): void;
						public readItem(param0: android.util.AttributeSet): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./any.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export class ViewPropertyAnimatorCompatSet extends javalangObject {
					public setInterpolator(param0: android.view.animation.Interpolator): android.support.v7.view.ViewPropertyAnimatorCompatSet;
					public setDuration(param0: number): android.support.v7.view.ViewPropertyAnimatorCompatSet;
					public play(param0: android.support.v4.view.ViewPropertyAnimatorCompat): android.support.v7.view.ViewPropertyAnimatorCompatSet;
					public constructor();
					public cancel(): void;
					public playSequentially(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.support.v4.view.ViewPropertyAnimatorCompat): android.support.v7.view.ViewPropertyAnimatorCompatSet;
					public start(): void;
					public setListener(param0: any): android.support.v7.view.ViewPropertyAnimatorCompatSet;
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./any.d.ts" />
/// <reference path="./any.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module view {
				export class ViewPropertyAnimatorCompat extends javalangObject {
					public withLayer(): android.support.v4.view.ViewPropertyAnimatorCompat;
					public alphaBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public setStartDelay(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public scaleXBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public setDuration(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public xBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public start(): void;
					public rotationYBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public rotationBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public translationZBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public getDuration(): number;
					public rotationXBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public withEndAction(param0: javalangRunnable): android.support.v4.view.ViewPropertyAnimatorCompat;
					public getStartDelay(): number;
					public setListener(param0: any): android.support.v4.view.ViewPropertyAnimatorCompat;
					public rotationX(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public translationXBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public zBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public alpha(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public scaleYBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public yBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public getInterpolator(): android.view.animation.Interpolator;
					public rotationY(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public cancel(): void;
					public rotation(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public scaleY(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public setInterpolator(param0: android.view.animation.Interpolator): android.support.v4.view.ViewPropertyAnimatorCompat;
					public y(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public z(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public x(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public scaleX(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public setUpdateListener(param0: any): android.support.v4.view.ViewPropertyAnimatorCompat;
					public withStartAction(param0: javalangRunnable): android.support.v4.view.ViewPropertyAnimatorCompat;
					public translationYBy(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public translationZ(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public translationX(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public translationY(param0: number): android.support.v4.view.ViewPropertyAnimatorCompat;
				}
				export module ViewPropertyAnimatorCompat {
					export class BaseViewPropertyAnimatorCompatImpl extends javalangObject implements android.support.v4.view.ViewPropertyAnimatorCompat.ViewPropertyAnimatorCompatImpl {
						public zBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public y(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: android.view.animation.Interpolator): void;
						public setUpdateListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public translationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withEndAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public rotation(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withLayer(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): android.view.animation.Interpolator;
						public start(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public alpha(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public x(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withStartAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public alphaBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public xBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public cancel(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZ(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public yBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public z(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
					}
					export module BaseViewPropertyAnimatorCompatImpl {
						export class Starter extends javalangObject implements javalangRunnable {
							public run(): void;
						}
					}
					export class ICSViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat.BaseViewPropertyAnimatorCompatImpl {
						public zBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public y(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: android.view.animation.Interpolator): void;
						public setUpdateListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public translationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotation(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withEndAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public rotationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withLayer(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): android.view.animation.Interpolator;
						public start(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public alpha(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public x(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withStartAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public alphaBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public xBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public cancel(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZ(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public yBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public z(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
					}
					export module ICSViewPropertyAnimatorCompatImpl {
						export class MyVpaListener extends javalangObject {
							public onAnimationCancel(param0: android.view.View): void;
							public onAnimationEnd(param0: android.view.View): void;
							public onAnimationStart(param0: android.view.View): void;
						}
					}
					export class JBMr2ViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat.JBViewPropertyAnimatorCompatImpl {
						public zBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public y(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: android.view.animation.Interpolator): void;
						public setUpdateListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public scaleY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotation(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withEndAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public rotationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withLayer(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): android.view.animation.Interpolator;
						public start(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public alpha(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public x(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withStartAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public alphaBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public xBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public cancel(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZ(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public yBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public z(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
					}
					export class JBViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat.ICSViewPropertyAnimatorCompatImpl {
						public zBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public y(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: android.view.animation.Interpolator): void;
						public setUpdateListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public scaleY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withEndAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public rotation(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withLayer(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): android.view.animation.Interpolator;
						public start(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public alpha(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public x(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withStartAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public translationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public alphaBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public xBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public cancel(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZ(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public yBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public z(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
					}
					export class KitKatViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat.JBMr2ViewPropertyAnimatorCompatImpl {
						public zBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public y(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: android.view.animation.Interpolator): void;
						public setUpdateListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public scaleY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotation(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withEndAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public rotationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withLayer(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): android.view.animation.Interpolator;
						public start(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public alpha(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public x(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withStartAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public alphaBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public xBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public cancel(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZ(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public yBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public z(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
					}
					export class LollipopViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat.KitKatViewPropertyAnimatorCompatImpl {
						public zBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public y(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: android.view.animation.Interpolator): void;
						public setUpdateListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public scaleY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotation(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withEndAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public rotationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withLayer(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): android.view.animation.Interpolator;
						public start(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public alpha(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public x(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withStartAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public alphaBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public xBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public cancel(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZ(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public yBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public z(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
					}
					export class ViewPropertyAnimatorCompatImpl extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl interface with the provided implementation.
						 */
						public constructor(implementation: {
							setDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							getDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
							setInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: android.view.animation.Interpolator): void;
							getInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): android.view.animation.Interpolator;
							setStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							getStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
							alpha(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							alphaBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							rotation(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							rotationBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							rotationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							rotationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							rotationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							rotationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							scaleX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							scaleXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							scaleY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							scaleYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							cancel(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
							x(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							xBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							y(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							yBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							z(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							zBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							translationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							translationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							translationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							translationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							translationZ(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							translationZBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
							start(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
							withLayer(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
							withStartAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
							withEndAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
							setListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
							setUpdateListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						});
						public zBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public y(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: android.view.animation.Interpolator): void;
						public setUpdateListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setListener(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: any): void;
						public setDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public scaleY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public setStartDelay(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotation(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withEndAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public rotationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withLayer(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getInterpolator(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): android.view.animation.Interpolator;
						public start(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public alpha(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public rotationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public x(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationX(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public withStartAction(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: javalangRunnable): void;
						public alphaBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public xBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public scaleXBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public cancel(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): void;
						public rotationY(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZ(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationYBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public yBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public getDuration(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View): number;
						public z(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
						public translationZBy(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: android.view.View, param2: number): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module view {
				export class ViewPropertyAnimatorListenerAdapter extends javalangObject {
					public onAnimationCancel(param0: android.view.View): void;
					public constructor();
					public onAnimationStart(param0: android.view.View): void;
					public onAnimationEnd(param0: android.view.View): void;
				}
			}
		}
	}
}


/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.SearchEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export class WindowCallbackWrapper extends javalangObject implements android.view.Window.Callback {
					public onDetachedFromWindow(): void;
					public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
					public onCreatePanelView(param0: number): android.view.View;
					public onSearchRequested(): boolean;
					public onActionModeFinished(param0: android.view.ActionMode): void;
					public onCreatePanelMenu(param0: number, param1: android.view.Menu): boolean;
					public onActionModeStarted(param0: android.view.ActionMode): void;
					public dispatchTrackballEvent(param0: android.view.MotionEvent): boolean;
					public constructor(param0: android.view.Window.Callback);
					public dispatchTouchEvent(param0: android.view.MotionEvent): boolean;
					public onMenuItemSelected(param0: number, param1: android.view.MenuItem): boolean;
					public onAttachedToWindow(): void;
					public onMenuOpened(param0: number, param1: android.view.Menu): boolean;
					public onWindowStartingActionMode(param0: android.view.ActionMode.Callback): android.view.ActionMode;
					public dispatchKeyEvent(param0: android.view.KeyEvent): boolean;
					public onSearchRequested(param0: any): boolean;
					public onWindowStartingActionMode(param0: android.view.ActionMode.Callback, param1: number): android.view.ActionMode;
					public dispatchKeyShortcutEvent(param0: android.view.KeyEvent): boolean;
					public onPanelClosed(param0: number, param1: android.view.Menu): void;
					public onWindowFocusChanged(param0: boolean): void;
					public onPreparePanel(param0: number, param1: android.view.View, param2: android.view.Menu): boolean;
					public onContentChanged(): void;
					public dispatchGenericMotionEvent(param0: android.view.MotionEvent): boolean;
					public onWindowAttributesChanged(param0: android.view.WindowManager.LayoutParams): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v4.internal.view.SupportMenuItem.d.ts" />
/// <reference path="./android.support.v4.view.ActionProvider.d.ts" />
/// <reference path="./android.view.ActionProvider.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class ActionMenuItem extends javalangObject implements android.support.v4.internal.view.SupportMenuItem {
						public setActionView(param0: number): android.support.v4.internal.view.SupportMenuItem;
						public getGroupId(): number;
						public setNumericShortcut(param0: string): android.view.MenuItem;
						public getSupportActionProvider(): android.support.v4.view.ActionProvider;
						public setAlphabeticShortcut(param0: string): android.view.MenuItem;
						public setShortcut(param0: string, param1: string): android.view.MenuItem;
						public getMenuInfo(): android.view.ContextMenu.ContextMenuInfo;
						public setCheckable(param0: boolean): android.view.MenuItem;
						public setOnActionExpandListener(param0: android.view.MenuItem.OnActionExpandListener): android.view.MenuItem;
						public setShowAsActionFlags(param0: number): android.view.MenuItem;
						public constructor(param0: android.content.Context, param1: number, param2: number, param3: number, param4: number, param5: string);
						public invoke(): boolean;
						public getIntent(): android.content.Intent;
						public isEnabled(): boolean;
						public collapseActionView(): boolean;
						public setTitle(param0: number): android.view.MenuItem;
						public setIcon(param0: android.graphics.drawable.Drawable): android.view.MenuItem;
						public setActionProvider(param0: android.view.ActionProvider): android.view.MenuItem;
						public getAlphabeticShortcut(): string;
						public setExclusiveCheckable(param0: boolean): android.support.v7.view.menu.ActionMenuItem;
						public hasSubMenu(): boolean;
						public setActionView(param0: number): android.view.MenuItem;
						public setTitleCondensed(param0: string): android.view.MenuItem;
						public getNumericShortcut(): string;
						public isCheckable(): boolean;
						public getSubMenu(): android.view.SubMenu;
						public setIcon(param0: number): android.view.MenuItem;
						public getItemId(): number;
						public isChecked(): boolean;
						public setEnabled(param0: boolean): android.view.MenuItem;
						public isVisible(): boolean;
						public setVisible(param0: boolean): android.view.MenuItem;
						public setShowAsAction(param0: number): void;
						public getIcon(): android.graphics.drawable.Drawable;
						public setSupportActionProvider(param0: android.support.v4.view.ActionProvider): android.support.v4.internal.view.SupportMenuItem;
						public getOrder(): number;
						public setTitle(param0: string): android.view.MenuItem;
						public getActionView(): android.view.View;
						public isActionViewExpanded(): boolean;
						public setSupportOnActionExpandListener(actionExpandListener: any): android.support.v4.internal.view.SupportMenuItem;
						public setShowAsActionFlags(param0: number): android.support.v4.internal.view.SupportMenuItem;
						public setOnMenuItemClickListener(param0: android.view.MenuItem.OnMenuItemClickListener): android.view.MenuItem;
						public setChecked(param0: boolean): android.view.MenuItem;
						public getTitleCondensed(): string;
						public expandActionView(): boolean;
						public getTitle(): string;
						public getActionProvider(): android.view.ActionProvider;
						public setActionView(param0: android.view.View): android.view.MenuItem;
						public setIntent(param0: android.content.Intent): android.view.MenuItem;
						public setActionView(param0: android.view.View): android.support.v4.internal.view.SupportMenuItem;
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ActionProvider.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.View.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module view {
				// export class MenuItemCompat extends javalangObject {
				// 	public static SHOW_AS_ACTION_NEVER: number;
				// 	public static SHOW_AS_ACTION_IF_ROOM: number;
				// 	public static SHOW_AS_ACTION_ALWAYS: number;
				// 	public static SHOW_AS_ACTION_WITH_TEXT: number;
				// 	public static SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;
				// 	public static getActionView(param0: android.view.MenuItem): android.view.View;
				// 	public static expandActionView(param0: android.view.MenuItem): boolean;
				// 	public static getActionProvider(param0: android.view.MenuItem): android.support.v4.view.ActionProvider;
				// 	public static setActionView(param0: android.view.MenuItem, param1: android.view.View): android.view.MenuItem;
				// 	public static setActionProvider(param0: android.view.MenuItem, param1: android.support.v4.view.ActionProvider): android.view.MenuItem;
				// 	public static setActionView(param0: android.view.MenuItem, param1: number): android.view.MenuItem;
				// 	public static collapseActionView(param0: android.view.MenuItem): boolean;
				// 	public static isActionViewExpanded(param0: android.view.MenuItem): boolean;
				// 	public static setOnActionExpandListener(param0: android.view.MenuItem, actionExpandListener: any): android.view.MenuItem;
				// 	public static setShowAsAction(param0: android.view.MenuItem, param1: number): void;
				// }
				// export module MenuItemCompat {
				// 	export class BaseMenuVersionImpl extends javalangObject implements android.support.v4.view.MenuItemCompat.MenuVersionImpl {
				// 		public collapseActionView(param0: android.view.MenuItem): boolean;
				// 		public setActionView(param0: android.view.MenuItem, param1: number): android.view.MenuItem;
				// 		public isActionViewExpanded(param0: android.view.MenuItem): boolean;
				// 		public setOnActionExpandListener(param0: android.view.MenuItem, actionExpandListener: any): android.view.MenuItem;
				// 		public setActionView(param0: android.view.MenuItem, param1: android.view.View): android.view.MenuItem;
				// 		public getActionView(param0: android.view.MenuItem): android.view.View;
				// 		public setShowAsAction(param0: android.view.MenuItem, param1: number): void;
				// 		public expandActionView(param0: android.view.MenuItem): boolean;
				// 	}
				// 	export class HoneycombMenuVersionImpl extends javalangObject implements android.support.v4.view.MenuItemCompat.MenuVersionImpl {
				// 		public collapseActionView(param0: android.view.MenuItem): boolean;
				// 		public setActionView(param0: android.view.MenuItem, param1: number): android.view.MenuItem;
				// 		public isActionViewExpanded(param0: android.view.MenuItem): boolean;
				// 		public setOnActionExpandListener(param0: android.view.MenuItem, actionExpandListener: any): android.view.MenuItem;
				// 		public setActionView(param0: android.view.MenuItem, param1: android.view.View): android.view.MenuItem;
				// 		public getActionView(param0: android.view.MenuItem): android.view.View;
				// 		public setShowAsAction(param0: android.view.MenuItem, param1: number): void;
				// 		public expandActionView(param0: android.view.MenuItem): boolean;
				// 	}
				// 	export class IcsMenuVersionImpl extends android.support.v4.view.MenuItemCompat.HoneycombMenuVersionImpl {
				// 		public collapseActionView(param0: android.view.MenuItem): boolean;
				// 		public isActionViewExpanded(param0: android.view.MenuItem): boolean;
				// 		public setActionView(param0: android.view.MenuItem, param1: number): android.view.MenuItem;
				// 		public setOnActionExpandListener(param0: android.view.MenuItem, actionExpandListener: any): android.view.MenuItem;
				// 		public setActionView(param0: android.view.MenuItem, param1: android.view.View): android.view.MenuItem;
				// 		public getActionView(param0: android.view.MenuItem): android.view.View;
				// 		public expandActionView(param0: android.view.MenuItem): boolean;
				// 		public setShowAsAction(param0: android.view.MenuItem, param1: number): void;
				// 	}
				export class MenuVersionImpl extends javalangObject {
					/**
					 * Constructs a new instance of the android.support.v4.view.MenuItemCompat$MenuVersionImpl interface with the provided implementation.
					 */
					public constructor(implementation: {
						setShowAsAction(param0: android.view.MenuItem, param1: number): void;
						setActionView(param0: android.view.MenuItem, param1: android.view.View): android.view.MenuItem;
						setActionView(param0: android.view.MenuItem, param1: number): android.view.MenuItem;
						getActionView(param0: android.view.MenuItem): android.view.View;
						expandActionView(param0: android.view.MenuItem): boolean;
						collapseActionView(param0: android.view.MenuItem): boolean;
						isActionViewExpanded(param0: android.view.MenuItem): boolean;
						setOnActionExpandListener(param0: android.view.MenuItem, actionExpandListener: any): android.view.MenuItem;
					});
					public collapseActionView(param0: android.view.MenuItem): boolean;
					public setActionView(param0: android.view.MenuItem, param1: number): android.view.MenuItem;
					public isActionViewExpanded(param0: android.view.MenuItem): boolean;
					public setOnActionExpandListener(param0: android.view.MenuItem, actionExpandListener: any): android.view.MenuItem;
					public setActionView(param0: android.view.MenuItem, param1: android.view.View): android.view.MenuItem;
					public getActionView(param0: android.view.MenuItem): android.view.View;
					public setShowAsAction(param0: android.view.MenuItem, param1: number): void;
					public expandActionView(param0: android.view.MenuItem): boolean;
				}
				export class OnActionExpandListener extends javalangObject {
					/**
					 * Constructs a new instance of the android.support.v4.view.MenuItemCompat$OnActionExpandListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onMenuItemActionExpand(param0: android.view.MenuItem): boolean;
						onMenuItemActionCollapse(param0: android.view.MenuItem): boolean;
					});
					public onMenuItemActionExpand(param0: android.view.MenuItem): boolean;
					public onMenuItemActionCollapse(param0: android.view.MenuItem): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module view {
				export abstract class ActionProvider extends javalangObject {
					public reset(): void;
					public subUiVisibilityChanged(param0: boolean): void;
					public onCreateActionView(param0: android.view.MenuItem): android.view.View;
					public refreshVisibility(): void;
					public hasSubMenu(): boolean;
					public onPerformDefaultAction(): boolean;
					public setVisibilityListener(param0: android.support.v4.view.ActionProvider.VisibilityListener): void;
					public getContext(): android.content.Context;
					public onPrepareSubMenu(param0: android.view.SubMenu): void;
					public setSubUiVisibilityListener(param0: android.support.v4.view.ActionProvider.SubUiVisibilityListener): void;
					public constructor(param0: android.content.Context);
					public isVisible(): boolean;
					public onCreateActionView(): android.view.View;
					public overridesItemVisibility(): boolean;
				}
				export module ActionProvider {
					export class SubUiVisibilityListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v4.view.ActionProvider$SubUiVisibilityListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onSubUiVisibilityChanged(param0: boolean): void;
						});
						public onSubUiVisibilityChanged(param0: boolean): void;
					}
					export class VisibilityListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v4.view.ActionProvider$VisibilityListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onActionProviderVisibilityChanged(param0: boolean): void;
						});
						public onActionProviderVisibilityChanged(param0: boolean): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v4.view.ActionProvider.d.ts" />
/// <reference path="./android.view.ActionProvider.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module internal {
				export module view {
					export class SupportMenuItem extends javalangObject implements android.view.MenuItem {
						/**
						 * Constructs a new instance of the android.support.v4.internal.view.SupportMenuItem interface with the provided implementation.
						 */
						public constructor(implementation: {
							setShowAsAction(param0: number): void;
							setShowAsActionFlags(param0: number): android.view.MenuItem;
							setActionView(param0: android.view.View): android.view.MenuItem;
							setActionView(param0: number): android.view.MenuItem;
							getActionView(): android.view.View;
							setSupportActionProvider(param0: android.support.v4.view.ActionProvider): android.support.v4.internal.view.SupportMenuItem;
							getSupportActionProvider(): android.support.v4.view.ActionProvider;
							expandActionView(): boolean;
							collapseActionView(): boolean;
							isActionViewExpanded(): boolean;
							setSupportOnActionExpandListener(actionExpandListener: any): android.support.v4.internal.view.SupportMenuItem;
							getItemId(): number;
							getGroupId(): number;
							getOrder(): number;
							setTitle(param0: string): android.view.MenuItem;
							setTitle(param0: number): android.view.MenuItem;
							getTitle(): string;
							setTitleCondensed(param0: string): android.view.MenuItem;
							getTitleCondensed(): string;
							setIcon(param0: android.graphics.drawable.Drawable): android.view.MenuItem;
							setIcon(param0: number): android.view.MenuItem;
							getIcon(): android.graphics.drawable.Drawable;
							setIntent(param0: android.content.Intent): android.view.MenuItem;
							getIntent(): android.content.Intent;
							setShortcut(param0: string, param1: string): android.view.MenuItem;
							setNumericShortcut(param0: string): android.view.MenuItem;
							getNumericShortcut(): string;
							setAlphabeticShortcut(param0: string): android.view.MenuItem;
							getAlphabeticShortcut(): string;
							setCheckable(param0: boolean): android.view.MenuItem;
							isCheckable(): boolean;
							setChecked(param0: boolean): android.view.MenuItem;
							isChecked(): boolean;
							setVisible(param0: boolean): android.view.MenuItem;
							isVisible(): boolean;
							setEnabled(param0: boolean): android.view.MenuItem;
							isEnabled(): boolean;
							hasSubMenu(): boolean;
							getSubMenu(): android.view.SubMenu;
							setOnMenuItemClickListener(param0: android.view.MenuItem.OnMenuItemClickListener): android.view.MenuItem;
							getMenuInfo(): android.view.ContextMenu.ContextMenuInfo;
							setShowAsAction(param0: number): void;
							setShowAsActionFlags(param0: number): android.view.MenuItem;
							setActionView(param0: android.view.View): android.view.MenuItem;
							setActionView(param0: number): android.view.MenuItem;
							getActionView(): android.view.View;
							setActionProvider(param0: android.view.ActionProvider): android.view.MenuItem;
							getActionProvider(): android.view.ActionProvider;
							expandActionView(): boolean;
							collapseActionView(): boolean;
							isActionViewExpanded(): boolean;
							setOnActionExpandListener(param0: android.view.MenuItem.OnActionExpandListener): android.view.MenuItem;
						});
						public static SHOW_AS_ACTION_WITH_TEXT: number;
						public static SHOW_AS_ACTION_ALWAYS: number;
						public static SHOW_AS_ACTION_NEVER: number;
						public static SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;
						public static SHOW_AS_ACTION_IF_ROOM: number;
						public setActionView(param0: number): android.view.MenuItem;
						public setTitleCondensed(param0: string): android.view.MenuItem;
						public getNumericShortcut(): string;
						public getGroupId(): number;
						public isCheckable(): boolean;
						public setIcon(param0: number): android.view.MenuItem;
						public getSubMenu(): android.view.SubMenu;
						public getItemId(): number;
						public setNumericShortcut(param0: string): android.view.MenuItem;
						public getSupportActionProvider(): android.support.v4.view.ActionProvider;
						public isChecked(): boolean;
						public setEnabled(param0: boolean): android.view.MenuItem;
						public isVisible(): boolean;
						public setShowAsAction(param0: number): void;
						public setVisible(param0: boolean): android.view.MenuItem;
						public setSupportActionProvider(param0: android.support.v4.view.ActionProvider): android.support.v4.internal.view.SupportMenuItem;
						public getIcon(): android.graphics.drawable.Drawable;
						public getOrder(): number;
						public setShortcut(param0: string, param1: string): android.view.MenuItem;
						public setAlphabeticShortcut(param0: string): android.view.MenuItem;
						public setTitle(param0: string): android.view.MenuItem;
						public getActionView(): android.view.View;
						public isActionViewExpanded(): boolean;
						public setSupportOnActionExpandListener(actionExpandListener: any): android.support.v4.internal.view.SupportMenuItem;
						public setCheckable(param0: boolean): android.view.MenuItem;
						public getMenuInfo(): android.view.ContextMenu.ContextMenuInfo;
						public setOnActionExpandListener(param0: android.view.MenuItem.OnActionExpandListener): android.view.MenuItem;
						public setShowAsActionFlags(param0: number): android.view.MenuItem;
						public setOnMenuItemClickListener(param0: android.view.MenuItem.OnMenuItemClickListener): android.view.MenuItem;
						public getIntent(): android.content.Intent;
						public isEnabled(): boolean;
						public collapseActionView(): boolean;
						public setChecked(param0: boolean): android.view.MenuItem;
						public expandActionView(): boolean;
						public setTitle(param0: number): android.view.MenuItem;
						public getTitleCondensed(): string;
						public getTitle(): string;
						public setActionView(param0: android.view.View): android.view.MenuItem;
						public getActionProvider(): android.view.ActionProvider;
						public setIcon(param0: android.graphics.drawable.Drawable): android.view.MenuItem;
						public setActionProvider(param0: android.view.ActionProvider): android.view.MenuItem;
						public getAlphabeticShortcut(): string;
						public setIntent(param0: android.content.Intent): android.view.MenuItem;
						public hasSubMenu(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.support.v7.widget.ActionMenuPresenter.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
// declare module android {
// 	export module support {
// 		export module v7 {
// 			export module widget {
// 				export class ActionMenuView extends android.support.v7.widget.LinearLayoutCompat implements android.support.v7.view.menu.MenuBuilder.ItemInvoker, android.support.v7.view.menu.MenuView {
// 					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
// 					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
// 					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
// 					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
// 					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
// 					public isTextDirectionResolved(): boolean;
// 					public setOverflowIcon(param0: android.graphics.drawable.Drawable): void;
// 					public showContextMenuForChild(param0: android.view.View): boolean;
// 					public addView(param0: android.view.View, param1: number): void;
// 					public hideOverflowMenu(): boolean;
// 					public onConfigurationChanged(param0: android.content.res.Configuration): void;
// 					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
// 					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
// 					public getLayoutDirection(): number;
// 					public getParentForAccessibility(): android.view.ViewParent;
// 					public createContextMenu(param0: android.view.ContextMenu): void;
// 					public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.support.v7.widget.ActionMenuView.LayoutParams;
// 					public getWindowAnimations(): number;
// 					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
// 					public childDrawableStateChanged(param0: android.view.View): void;
// 					public setPresenter(param0: android.support.v7.widget.ActionMenuPresenter): void;
// 					public generateDefaultLayoutParams(): android.support.v7.widget.ActionMenuView.LayoutParams;
// 					public isOverflowMenuShowing(): boolean;
// 					public focusSearch(param0: number): android.view.View;
// 					public isTextAlignmentResolved(): boolean;
// 					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
// 					public canResolveTextAlignment(): boolean;
// 					public setPopupTheme(param0: number): void;
// 					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
// 					public getPopupTheme(): number;
// 					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
// 					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
// 					public getMenu(): android.view.Menu;
// 					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
// 					public setOnMenuItemClickListener(param0: android.support.v7.widget.ActionMenuView.OnMenuItemClickListener): void;
// 					public generateDefaultLayoutParams(): android.view.ViewGroup.LayoutParams;
// 					public sendAccessibilityEvent(param0: number): void;
// 					public requestLayout(): void;
// 					public onDetachedFromWindow(): void;
// 					public onMeasure(param0: number, param1: number): void;
// 					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
// 					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
// 					public getTextAlignment(): number;
// 					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
// 					public generateDefaultLayoutParams(): android.support.v7.widget.LinearLayoutCompat.LayoutParams;
// 					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
// 					public constructor(param0: android.content.Context);
// 					public checkLayoutParams(param0: android.view.ViewGroup.LayoutParams): boolean;
// 					public focusSearch(param0: android.view.View, param1: number): android.view.View;
// 					public generateOverflowButtonLayoutParams(): android.support.v7.widget.ActionMenuView.LayoutParams;
// 					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
// 					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
// 					public invokeItem(param0: android.support.v7.view.menu.MenuItemImpl): boolean;
// 					public isLayoutRequested(): boolean;
// 					public clearChildFocus(param0: android.view.View): void;
// 					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
// 					public generateLayoutParams(param0: android.util.AttributeSet): android.view.ViewGroup.LayoutParams;
// 					public isLayoutDirectionResolved(): boolean;
// 					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
// 					public generateLayoutParams(param0: android.util.AttributeSet): android.support.v7.widget.LinearLayoutCompat.LayoutParams;
// 					public isOverflowMenuShowPending(): boolean;
// 					public dispatchPopulateAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): boolean;
// 					public setExpandedActionViewsExclusive(param0: boolean): void;
// 					public bringChildToFront(param0: android.view.View): void;
// 					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
// 					public addView(param0: android.view.View, param1: number, param2: number): void;
// 					public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.support.v7.widget.LinearLayoutCompat.LayoutParams;
// 					public hasSupportDividerBeforeChildAt(param0: number): boolean;
// 					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
// 					public getTextDirection(): number;
// 					public requestFitSystemWindows(): void;
// 					public showOverflowMenu(): boolean;
// 					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
// 					public getOverflowIcon(): android.graphics.drawable.Drawable;
// 					public initialize(param0: android.support.v7.view.menu.MenuBuilder): void;
// 					public requestTransparentRegion(param0: android.view.View): void;
// 					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
// 					public setMenuCallbacks(param0: android.support.v7.view.menu.MenuPresenter.Callback, param1: android.support.v7.view.menu.MenuBuilder.Callback): void;
// 					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
// 					public canResolveTextDirection(): boolean;
// 					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
// 					public requestDisallowInterceptTouchEvent(param0: boolean): void;
// 					public getParent(): android.view.ViewParent;
// 					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
// 					public setOverflowReserved(param0: boolean): void;
// 					public onStopNestedScroll(param0: android.view.View): void;
// 					public generateLayoutParams(param0: android.util.AttributeSet): android.support.v7.widget.ActionMenuView.LayoutParams;
// 					public isOverflowReserved(): boolean;
// 					public canResolveLayoutDirection(): boolean;
// 					public dismissPopupMenus(): void;
// 					public removeView(param0: android.view.View): void;
// 					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
// 					public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
// 					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
// 					public recomputeViewAttributes(param0: android.view.View): void;
// 					public focusableViewAvailable(param0: android.view.View): void;
// 					public addView(param0: android.view.View): void;
// 					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
// 					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
// 					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
// 					public peekMenu(): android.support.v7.view.menu.MenuBuilder;
// 				}
// 				export module ActionMenuView {
// 					export class ActionMenuChildView extends javalangObject {
// 						/**
// 						 * Constructs a new instance of the android.support.v7.widget.ActionMenuView$ActionMenuChildView interface with the provided implementation.
// 						 */
// 						public constructor(implementation: {
// 							needsDividerBefore(): boolean;
// 							needsDividerAfter(): boolean;
// 						});
// 						public needsDividerAfter(): boolean;
// 						public needsDividerBefore(): boolean;
// 					}
// 					export class ActionMenuPresenterCallback extends javalangObject implements android.support.v7.view.menu.MenuPresenter.Callback {
// 						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
// 						public onOpenSubMenu(param0: android.support.v7.view.menu.MenuBuilder): boolean;
// 					}
// 					export class LayoutParams extends android.support.v7.widget.LinearLayoutCompat.LayoutParams {
// 						public isOverflowButton: boolean;
// 						public cellsUsed: number;
// 						public extraPixels: number;
// 						public expandable: boolean;
// 						public preventEdgeOffset: boolean;
// 						public constructor(param0: android.view.ViewGroup.MarginLayoutParams);
// 						public constructor(param0: android.view.ViewGroup.LayoutParams);
// 						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
// 						public constructor(param0: android.support.v7.widget.LinearLayoutCompat.LayoutParams);
// 						public constructor(param0: number, param1: number, param2: number);
// 						public constructor(param0: number, param1: number);
// 						public constructor(param0: android.support.v7.widget.ActionMenuView.LayoutParams);
// 					}
// 					export class MenuBuilderCallback extends javalangObject implements android.support.v7.view.menu.MenuBuilder.Callback {
// 						public onMenuItemSelected(param0: android.support.v7.view.menu.MenuBuilder, param1: android.view.MenuItem): boolean;
// 						public onMenuModeChange(param0: android.support.v7.view.menu.MenuBuilder): void;
// 					}
// 					export class OnMenuItemClickListener extends javalangObject {
// 						/**
// 						 * Constructs a new instance of the android.support.v7.widget.ActionMenuView$OnMenuItemClickListener interface with the provided implementation.
// 						 */
// 						public constructor(implementation: {
// 							onMenuItemClick(param0: android.view.MenuItem): boolean;
// 						});
// 						public onMenuItemClick(param0: android.view.MenuItem): boolean;
// 					}
// 				}
// 			}
// 		}
// 	}
// }


/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.view.menu.ActionMenuItemView.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.support.v7.widget.ListPopupWindow.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class ActionMenuItemView extends android.support.v7.widget.AppCompatTextView implements android.support.v7.view.menu.MenuView.ItemView, android.view.View.OnClickListener, android.view.View.OnLongClickListener {
						public needsDividerBefore(): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public showsIcon(): boolean;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public onLongClick(param0: android.view.View): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
						public setExpandedFormat(param0: boolean): void;
						public setItemInvoker(param0: android.support.v7.view.menu.MenuBuilder.ItemInvoker): void;
						public prefersCondensedTitle(): boolean;
						public needsDividerAfter(): boolean;
						public initialize(param0: android.support.v7.view.menu.MenuItemImpl, param1: number): void;
						public getItemData(): android.support.v7.view.menu.MenuItemImpl;
						public hasText(): boolean;
						public onClick(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public setPopupCallback(param0: android.support.v7.view.menu.ActionMenuItemView.PopupCallback): void;
						public onMeasure(param0: number, param1: number): void;
						public setChecked(param0: boolean): void;
						public onConfigurationChanged(param0: android.content.res.Configuration): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public setIcon(param0: android.graphics.drawable.Drawable): void;
						public setEnabled(param0: boolean): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
						public setTitle(param0: string): void;
						public onTouchEvent(param0: android.view.MotionEvent): boolean;
						public setShortcut(param0: boolean, param1: string): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onPreDraw(): boolean;
						public setCheckable(param0: boolean): void;
						public setPadding(param0: number, param1: number, param2: number, param3: number): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
					export module ActionMenuItemView {
						export class ActionMenuItemForwardingListener {
							public getPopup(): android.support.v7.widget.ListPopupWindow;
							public onTouch(param0: android.view.View, param1: android.view.MotionEvent): boolean;
							public onForwardingStarted(): boolean;
							public constructor(param0: android.view.View);
							public constructor(param0: android.support.v7.view.menu.ActionMenuItemView);
						}
						export abstract class PopupCallback extends javalangObject {
							public constructor();
							public getPopup(): android.support.v7.widget.ListPopupWindow;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuView.d.ts" />
/// <reference path="./android.support.v7.view.menu.SubMenuBuilder.d.ts" />
/// <reference path="./android.view.LayoutInflater.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export abstract class BaseMenuPresenter extends javalangObject implements android.support.v7.view.menu.MenuPresenter {
						public mSystemContext: android.content.Context;
						public mContext: android.content.Context;
						public mMenu: android.support.v7.view.menu.MenuBuilder;
						public mSystemInflater: android.view.LayoutInflater;
						public mInflater: android.view.LayoutInflater;
						public mMenuView: android.support.v7.view.menu.MenuView;
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public getMenuView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView;
						public flagActionItems(): boolean;
						public shouldIncludeItem(param0: number, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
						public createItemView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView.ItemView;
						public collapseItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
						public getItemView(param0: android.support.v7.view.menu.MenuItemImpl, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
						public getId(): number;
						public setId(param0: number): void;
						public bindItemView(param0: android.support.v7.view.menu.MenuItemImpl, param1: android.support.v7.view.menu.MenuView.ItemView): void;
						public filterLeftoverView(param0: android.view.ViewGroup, param1: number): boolean;
						public onSaveInstanceState(): android.os.Parcelable;
						public constructor(param0: android.content.Context, param1: number, param2: number);
						public addItemView(param0: android.view.View, param1: number): void;
						public getCallback(): android.support.v7.view.menu.MenuPresenter.Callback;
						public updateMenuView(param0: boolean): void;
						public initForMenu(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder): void;
						public setCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public expandItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
					}
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export abstract class BaseMenuWrapper extends android.support.v7.view.menu.BaseWrapper {
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class BaseWrapper extends javalangObject {
						public getWrappedObject(): javalangObject;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class ExpandedMenuView extends android.widget.ListView implements android.support.v7.view.menu.MenuBuilder.ItemInvoker, android.support.v7.view.menu.MenuView, android.widget.AdapterView.OnItemClickListener {
						public isLayoutRequested(): boolean;
						public canResolveLayoutDirection(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public getParentForAccessibility(): android.view.ViewParent;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(param0: android.content.Context);
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public addView(param0: android.view.View, param1: number, param2: number): void;
						public addView(param0: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusSearch(param0: number): android.view.View;
						public onFilterComplete(param0: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public isLayoutDirectionResolved(): boolean;
						public getWindowAnimations(): number;
						public removeView(param0: android.view.View): void;
						public afterTextChanged(param0: android.text.Editable): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public requestLayout(): void;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public onGlobalLayout(): void;
						public deferNotifyDataSetChanged(): void;
						public onTouchModeChanged(param0: boolean): void;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isTextDirectionResolved(): boolean;
						public onRemoteAdapterDisconnected(): void;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public addView(param0: android.view.View, param1: number): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestFitSystemWindows(): void;
						public clearChildFocus(param0: android.view.View): void;
						public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
						public onRemoteAdapterConnected(): boolean;
						public onDetachedFromWindow(): void;
						public onItemClick(param0: android.widget.AdapterView<any>, param1: android.view.View, param2: number, param3: number): void;
						public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
						public getTextAlignment(): number;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public initialize(param0: android.support.v7.view.menu.MenuBuilder): void;
						public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public invokeItem(param0: android.support.v7.view.menu.MenuItemImpl): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class ListMenuItemView extends android.widget.LinearLayout implements android.support.v7.view.menu.MenuView.ItemView {
						public isLayoutRequested(): boolean;
						public canResolveLayoutDirection(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public getParentForAccessibility(): android.view.ViewParent;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public showsIcon(): boolean;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public onFinishInflate(): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(param0: android.content.Context);
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public prefersCondensedTitle(): boolean;
						public setForceShowIcon(param0: boolean): void;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public addView(param0: android.view.View, param1: number, param2: number): void;
						public addView(param0: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(param0: number, param1: number): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public setChecked(param0: boolean): void;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusSearch(param0: number): android.view.View;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public setIcon(param0: android.graphics.drawable.Drawable): void;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public setTitle(param0: string): void;
						public getParent(): android.view.ViewParent;
						public isLayoutDirectionResolved(): boolean;
						public setShortcut(param0: boolean, param1: string): void;
						public removeView(param0: android.view.View): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public setCheckable(param0: boolean): void;
						public requestLayout(): void;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isTextDirectionResolved(): boolean;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public addView(param0: android.view.View, param1: number): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
						public initialize(param0: android.support.v7.view.menu.MenuItemImpl, param1: number): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public getItemData(): android.support.v7.view.menu.MenuItemImpl;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestFitSystemWindows(): void;
						public clearChildFocus(param0: android.view.View): void;
						public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
						public setEnabled(param0: boolean): void;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
						public getTextAlignment(): number;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v7.view.menu.ListMenuPresenter.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuView.d.ts" />
/// <reference path="./android.support.v7.view.menu.SubMenuBuilder.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./android.widget.ListAdapter.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class ListMenuPresenter extends javalangObject implements android.support.v7.view.menu.MenuPresenter, android.widget.AdapterView.OnItemClickListener {
						public static VIEWS_TAG: string;
						public constructor(param0: android.content.Context, param1: number);
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public getMenuView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView;
						public flagActionItems(): boolean;
						public collapseItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
						public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
						public saveHierarchyState(param0: android.os.Bundle): void;
						public onItemClick(param0: android.widget.AdapterView<any>, param1: android.view.View, param2: number, param3: number): void;
						public setId(param0: number): void;
						public getId(): number;
						public onSaveInstanceState(): android.os.Parcelable;
						public setItemIndexOffset(param0: number): void;
						public restoreHierarchyState(param0: android.os.Bundle): void;
						public getAdapter(): android.widget.ListAdapter;
						public updateMenuView(param0: boolean): void;
						public initForMenu(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder): void;
						public setCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
						public constructor(param0: number, param1: number);
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public expandItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
					}
					export module ListMenuPresenter {
						export class MenuAdapter extends android.widget.BaseAdapter {
							public constructor();
							public notifyDataSetChanged(): void;
							public getItemId(param0: number): number;
							public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
							public constructor(param0: android.support.v7.view.menu.ListMenuPresenter);
							public areAllItemsEnabled(): boolean;
							public getCount(): number;
							public getItem(param0: number): android.support.v7.view.menu.MenuItemImpl;
							public isEnabled(param0: number): boolean;
							public getView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						}
					}
				}
			}
		}
	}
}

import javautilArrayList = java.util.ArrayList;
/// <reference path="./android.content.ComponentName.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuPresenter.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuBuilder extends javalangObject {
						public clearAll(): void;
						public add(param0: number, param1: number, param2: number, param3: string): android.view.MenuItem;
						public changeMenuMode(): void;
						public close(): void;
						public add(param0: string): android.view.MenuItem;
						public addSubMenu(param0: number, param1: number, param2: number, param3: string): android.view.SubMenu;
						public performIdentifierAction(param0: number, param1: number): boolean;
						public setGroupVisible(param0: number, param1: boolean): void;
						public constructor(param0: android.content.Context);
						public setCallback(param0: android.support.v7.view.menu.MenuBuilder.Callback): void;
						public findGroupIndex(param0: number): number;
						public restorePresenterStates(param0: android.os.Bundle): void;
						public removeItem(param0: number): void;
						public clearHeader(): void;
						public addMenuPresenter(param0: android.support.v7.view.menu.MenuPresenter): void;
						public add(param0: number, param1: number, param2: number, param3: number): android.view.MenuItem;
						public size(): number;
						public hasVisibleItems(): boolean;
						public getActionItems(): javautilArrayList<any>;
						public setHeaderTitleInt(param0: number): android.support.v7.view.menu.MenuBuilder;
						public getHeaderTitle(): string;
						public setQwertyMode(param0: boolean): void;
						public getVisibleItems(): javautilArrayList<any>;
						public startDispatchingItemsChanged(): void;
						public expandItemActionView(param0: android.support.v7.view.menu.MenuItemImpl): boolean;
						public performShortcut(param0: number, param1: android.view.KeyEvent, param2: number): boolean;
						public addInternal(param0: number, param1: number, param2: number, param3: string): android.view.MenuItem;
						public restoreActionViewStates(param0: android.os.Bundle): void;
						public setCurrentMenuInfo(param0: android.view.ContextMenu.ContextMenuInfo): void;
						public addSubMenu(param0: number): android.view.SubMenu;
						public add(param0: number): android.view.MenuItem;
						public removeItemAt(param0: number): void;
						public clear(): void;
						public setHeaderIconInt(param0: number): android.support.v7.view.menu.MenuBuilder;
						public onItemsChanged(param0: boolean): void;
						public collapseItemActionView(param0: android.support.v7.view.menu.MenuItemImpl): boolean;
						public getHeaderIcon(): android.graphics.drawable.Drawable;
						public getExpandedItem(): android.support.v7.view.menu.MenuItemImpl;
						public stopDispatchingItemsChanged(): void;
						public getRootMenu(): android.support.v7.view.menu.MenuBuilder;
						public getItem(param0: number): android.view.MenuItem;
						public setShortcutsVisible(param0: boolean): void;
						public addMenuPresenter(param0: android.support.v7.view.menu.MenuPresenter, param1: android.content.Context): void;
						public close(param0: boolean): void;
						public setOverrideVisibleItems(param0: boolean): void;
						public savePresenterStates(param0: android.os.Bundle): void;
						public setHeaderViewInt(param0: android.view.View): android.support.v7.view.menu.MenuBuilder;
						public saveActionViewStates(param0: android.os.Bundle): void;
						public getActionViewStatesKey(): string;
						public setHeaderIconInt(param0: android.graphics.drawable.Drawable): android.support.v7.view.menu.MenuBuilder;
						public performItemAction(param0: android.view.MenuItem, param1: android.support.v7.view.menu.MenuPresenter, param2: number): boolean;
						public getHeaderView(): android.view.View;
						public findItem(param0: number): android.view.MenuItem;
						public findItemIndex(param0: number): number;
						public flagActionItems(): void;
						public addIntentOptions(param0: number, param1: number, param2: number, param3: android.content.ComponentName, param4: native.Array<android.content.Intent>, param5: android.content.Intent, param6: number, param7: native.Array<android.view.MenuItem>): number;
						public isShortcutKey(param0: number, param1: android.view.KeyEvent): boolean;
						public isShortcutsVisible(): boolean;
						public getContext(): android.content.Context;
						public findGroupIndex(param0: number, param1: number): number;
						public setHeaderTitleInt(param0: string): android.support.v7.view.menu.MenuBuilder;
						public performItemAction(param0: android.view.MenuItem, param1: number): boolean;
						public setDefaultShowAsAction(param0: number): android.support.v7.view.menu.MenuBuilder;
						public getNonActionItems(): javautilArrayList<any>;
						public setGroupCheckable(param0: number, param1: boolean, param2: boolean): void;
						public addSubMenu(param0: number, param1: number, param2: number, param3: number): android.view.SubMenu;
						public removeGroup(param0: number): void;
						public addSubMenu(param0: string): android.view.SubMenu;
						public removeMenuPresenter(param0: android.support.v7.view.menu.MenuPresenter): void;
						public setGroupEnabled(param0: number, param1: boolean): void;
					}
					export module MenuBuilder {
						export class Callback extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.v7.view.menu.MenuBuilder$Callback interface with the provided implementation.
							 */
							public constructor(implementation: {
								onMenuItemSelected(param0: android.support.v7.view.menu.MenuBuilder, param1: android.view.MenuItem): boolean;
								onMenuModeChange(param0: android.support.v7.view.menu.MenuBuilder): void;
							});
							public onMenuItemSelected(param0: android.support.v7.view.menu.MenuBuilder, param1: android.view.MenuItem): boolean;
							public onMenuModeChange(param0: android.support.v7.view.menu.MenuBuilder): void;
						}
						export class ItemInvoker extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.v7.view.menu.MenuBuilder$ItemInvoker interface with the provided implementation.
							 */
							public constructor(implementation: {
								invokeItem(param0: android.support.v7.view.menu.MenuItemImpl): boolean;
							});
							public invokeItem(param0: android.support.v7.view.menu.MenuItemImpl): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.AutoCompleteAdapter.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.DisplayMode.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.RadAutoCompleteTextView.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormRadAutoCompleteEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor {
							public setAdapter(param0: com.telerik.widget.autocomplete.AutoCompleteAdapter): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty, param2: com.telerik.widget.autocomplete.AutoCompleteAdapter);
							public updateAdapter(): void;
							public setDisplayMode(param0: com.telerik.widget.autocomplete.DisplayMode): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public getAdapter(): com.telerik.widget.autocomplete.AutoCompleteAdapter;
							public onEntityPropertyChanged(): void;
							public initEditor(param0: androidviewView, param1: com.telerik.widget.dataform.engine.EntityProperty): void;
							public getDisplayMode(): com.telerik.widget.autocomplete.DisplayMode;
							public value(): javalangObject;
							public getAutoCompleteView(): com.telerik.widget.autocomplete.RadAutoCompleteTextView;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.DialogInterface.d.ts" />
/// <reference path="./android.os.IBinder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuDialogHelper extends javalangObject implements android.content.DialogInterface.OnKeyListener, android.content.DialogInterface.OnClickListener, android.content.DialogInterface.OnDismissListener, android.support.v7.view.menu.MenuPresenter.Callback {
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public setPresenterCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
						public onOpenSubMenu(param0: android.support.v7.view.menu.MenuBuilder): boolean;
						public dismiss(): void;
						public onClick(param0: android.content.DialogInterface, param1: number): void;
						public constructor(param0: android.support.v7.view.menu.MenuBuilder);
						public show(param0: android.os.IBinder): void;
						public onKey(param0: android.content.DialogInterface, param1: number, param2: android.view.KeyEvent): boolean;
						public onDismiss(param0: android.content.DialogInterface): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v4.internal.view.SupportMenuItem.d.ts" />
/// <reference path="./android.support.v4.view.ActionProvider.d.ts" />
/// <reference path="./android.support.v7.view.menu.SubMenuBuilder.d.ts" />
/// <reference path="./android.view.ActionProvider.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuItemImpl extends javalangObject implements android.support.v4.internal.view.SupportMenuItem {
						public requiresActionButton(): boolean;
						public setActionView(param0: number): android.support.v4.internal.view.SupportMenuItem;
						public getGroupId(): number;
						public setNumericShortcut(param0: string): android.view.MenuItem;
						public getSupportActionProvider(): android.support.v4.view.ActionProvider;
						public getOrdering(): number;
						public isExclusiveCheckable(): boolean;
						public setAlphabeticShortcut(param0: string): android.view.MenuItem;
						public setShortcut(param0: string, param1: string): android.view.MenuItem;
						public setActionViewExpanded(param0: boolean): void;
						public setCheckable(param0: boolean): android.view.MenuItem;
						public getMenuInfo(): android.view.ContextMenu.ContextMenuInfo;
						public setOnActionExpandListener(param0: android.view.MenuItem.OnActionExpandListener): android.view.MenuItem;
						public setShowAsActionFlags(param0: number): android.view.MenuItem;
						public invoke(): boolean;
						public isEnabled(): boolean;
						public getIntent(): android.content.Intent;
						public collapseActionView(): boolean;
						public setTitle(param0: number): android.view.MenuItem;
						public toString(): string;
						public hasCollapsibleActionView(): boolean;
						public setIcon(param0: android.graphics.drawable.Drawable): android.view.MenuItem;
						public setActionProvider(param0: android.view.ActionProvider): android.view.MenuItem;
						public getAlphabeticShortcut(): string;
						public shouldShowIcon(): boolean;
						public hasSubMenu(): boolean;
						public showsTextAsAction(): boolean;
						public setActionView(param0: number): android.view.MenuItem;
						public setTitleCondensed(param0: string): android.view.MenuItem;
						public getNumericShortcut(): string;
						public actionFormatChanged(): void;
						public isCheckable(): boolean;
						public getSubMenu(): android.view.SubMenu;
						public setIcon(param0: number): android.view.MenuItem;
						public getItemId(): number;
						public setExclusiveCheckable(param0: boolean): void;
						public setEnabled(param0: boolean): android.view.MenuItem;
						public isChecked(): boolean;
						public requestsActionButton(): boolean;
						public isVisible(): boolean;
						public setVisible(param0: boolean): android.view.MenuItem;
						public setIsActionButton(param0: boolean): void;
						public setShowAsAction(param0: number): void;
						public setSubMenu(param0: android.support.v7.view.menu.SubMenuBuilder): void;
						public getIcon(): android.graphics.drawable.Drawable;
						public setSupportActionProvider(param0: android.support.v4.view.ActionProvider): android.support.v4.internal.view.SupportMenuItem;
						public getOrder(): number;
						public setTitle(param0: string): android.view.MenuItem;
						public getActionView(): android.view.View;
						public setSupportOnActionExpandListener(actionExpandListener: any): android.support.v4.internal.view.SupportMenuItem;
						public isActionViewExpanded(): boolean;
						public setShowAsActionFlags(param0: number): android.support.v4.internal.view.SupportMenuItem;
						public setOnMenuItemClickListener(param0: android.view.MenuItem.OnMenuItemClickListener): android.view.MenuItem;
						public setChecked(param0: boolean): android.view.MenuItem;
						public isActionButton(): boolean;
						public getTitleCondensed(): string;
						public expandActionView(): boolean;
						public getTitle(): string;
						public getActionProvider(): android.view.ActionProvider;
						public setActionView(param0: android.view.View): android.view.MenuItem;
						public setIntent(param0: android.content.Intent): android.view.MenuItem;
						public setCallback(param0: javalangRunnable): android.view.MenuItem;
						public setActionView(param0: android.view.View): android.support.v4.internal.view.SupportMenuItem;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemWrapperICS.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ActionProvider.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuItemWrapperICS extends android.support.v7.view.menu.BaseMenuWrapper implements android.view.MenuItem {
						public setActionView(param0: number): android.view.MenuItem;
						public setTitleCondensed(param0: string): android.view.MenuItem;
						public getNumericShortcut(): string;
						public getGroupId(): number;
						public isCheckable(): boolean;
						public setIcon(param0: number): android.view.MenuItem;
						public getSubMenu(): android.view.SubMenu;
						public getItemId(): number;
						public setNumericShortcut(param0: string): android.view.MenuItem;
						public setExclusiveCheckable(param0: boolean): void;
						public isChecked(): boolean;
						public setEnabled(param0: boolean): android.view.MenuItem;
						public isVisible(): boolean;
						public setVisible(param0: boolean): android.view.MenuItem;
						public setShowAsAction(param0: number): void;
						public getIcon(): android.graphics.drawable.Drawable;
						public getOrder(): number;
						public setShortcut(param0: string, param1: string): android.view.MenuItem;
						public setAlphabeticShortcut(param0: string): android.view.MenuItem;
						public setTitle(param0: string): android.view.MenuItem;
						public getActionView(): android.view.View;
						public isActionViewExpanded(): boolean;
						public setCheckable(param0: boolean): android.view.MenuItem;
						public getMenuInfo(): android.view.ContextMenu.ContextMenuInfo;
						public setOnActionExpandListener(param0: android.view.MenuItem.OnActionExpandListener): android.view.MenuItem;
						public setShowAsActionFlags(param0: number): android.view.MenuItem;
						public setOnMenuItemClickListener(param0: android.view.MenuItem.OnMenuItemClickListener): android.view.MenuItem;
						public getIntent(): android.content.Intent;
						public isEnabled(): boolean;
						public setChecked(param0: boolean): android.view.MenuItem;
						public collapseActionView(): boolean;
						public setTitle(param0: number): android.view.MenuItem;
						public getTitleCondensed(): string;
						public expandActionView(): boolean;
						public getTitle(): string;
						public setActionView(param0: android.view.View): android.view.MenuItem;
						public getActionProvider(): android.view.ActionProvider;
						public setIcon(param0: android.graphics.drawable.Drawable): android.view.MenuItem;
						public setActionProvider(param0: android.view.ActionProvider): android.view.MenuItem;
						public getAlphabeticShortcut(): string;
						public setIntent(param0: android.content.Intent): android.view.MenuItem;
						public hasSubMenu(): boolean;
					}
					export module MenuItemWrapperICS {
						export class ActionProviderWrapper extends android.support.v4.view.ActionProvider {
							public onPrepareSubMenu(param0: android.view.SubMenu): void;
							public constructor(param0: android.support.v7.view.menu.MenuItemWrapperICS, param1: android.content.Context, param2: android.view.ActionProvider);
							public onCreateActionView(param0: android.view.MenuItem): android.view.View;
							public hasSubMenu(): boolean;
							public onCreateActionView(): android.view.View;
							public onPerformDefaultAction(): boolean;
							public constructor(param0: android.content.Context);
						}
						export class CollapsibleActionViewWrapper extends android.widget.FrameLayout implements android.support.v7.view.CollapsibleActionView {
							public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
							public focusSearch(param0: number): android.view.View;
							public getParentForAccessibility(): android.view.ViewParent;
							public onActionViewCollapsed(): void;
							public getTextDirection(): number;
							public addView(param0: android.view.View, param1: number): void;
							public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
							public isLayoutRequested(): boolean;
							public onActionViewExpanded(): void;
							public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
							public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
							public removeView(param0: android.view.View): void;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
							public onStopNestedScroll(param0: android.view.View): void;
							public isLayoutDirectionResolved(): boolean;
							public childDrawableStateChanged(param0: android.view.View): void;
							public addView(param0: android.view.View, param1: number, param2: number): void;
							public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
							public canResolveTextDirection(): boolean;
							public clearChildFocus(param0: android.view.View): void;
							public canResolveLayoutDirection(): boolean;
							public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
							public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
							public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
							public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
							public isTextAlignmentResolved(): boolean;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public recomputeViewAttributes(param0: android.view.View): void;
							public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
							public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
							public bringChildToFront(param0: android.view.View): void;
							public focusSearch(param0: android.view.View, param1: number): android.view.View;
							public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
							public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
							public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
							public requestFitSystemWindows(): void;
							public addView(param0: android.view.View): void;
							public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
							public canResolveTextAlignment(): boolean;
							public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
							public getTextAlignment(): number;
							public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
							public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
							public getParent(): android.view.ViewParent;
							public focusableViewAvailable(param0: android.view.View): void;
							public createContextMenu(param0: android.view.ContextMenu): void;
							public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
							public getLayoutDirection(): number;
							public showContextMenuForChild(param0: android.view.View): boolean;
							public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
							public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
							public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
							public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
							public sendAccessibilityEvent(param0: number): void;
							public requestTransparentRegion(param0: android.view.View): void;
							public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
							public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						}
						// export class OnActionExpandListenerWrapper extends android.support.v7.view.menu.BaseWrapper implements android.support.v4.view.MenuItemCompat.OnActionExpandListener {
						// 	public onMenuItemActionCollapse(param0: android.view.MenuItem): boolean;
						// 	public onMenuItemActionExpand(param0: android.view.MenuItem): boolean;
						// }
						// export class OnMenuItemClickListenerWrapper extends android.support.v7.view.menu.BaseWrapper implements android.view.MenuItem.OnMenuItemClickListener {
						// 	public onMenuItemClick(param0: android.view.MenuItem): boolean;
						// }
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemWrapperICS.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemWrapperJB.d.ts" />
/// <reference path="./android.view.ActionProvider.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuItemWrapperJB extends android.support.v7.view.menu.MenuItemWrapperICS {
						public setActionView(param0: number): android.view.MenuItem;
						public setTitleCondensed(param0: string): android.view.MenuItem;
						public getNumericShortcut(): string;
						public getGroupId(): number;
						public isCheckable(): boolean;
						public setIcon(param0: number): android.view.MenuItem;
						public getSubMenu(): android.view.SubMenu;
						public getItemId(): number;
						public setNumericShortcut(param0: string): android.view.MenuItem;
						public isChecked(): boolean;
						public setEnabled(param0: boolean): android.view.MenuItem;
						public isVisible(): boolean;
						public setVisible(param0: boolean): android.view.MenuItem;
						public setShowAsAction(param0: number): void;
						public getIcon(): android.graphics.drawable.Drawable;
						public getOrder(): number;
						public setShortcut(param0: string, param1: string): android.view.MenuItem;
						public setAlphabeticShortcut(param0: string): android.view.MenuItem;
						public setTitle(param0: string): android.view.MenuItem;
						public getActionView(): android.view.View;
						public isActionViewExpanded(): boolean;
						public setCheckable(param0: boolean): android.view.MenuItem;
						public getMenuInfo(): android.view.ContextMenu.ContextMenuInfo;
						public setOnActionExpandListener(param0: android.view.MenuItem.OnActionExpandListener): android.view.MenuItem;
						public setShowAsActionFlags(param0: number): android.view.MenuItem;
						public setOnMenuItemClickListener(param0: android.view.MenuItem.OnMenuItemClickListener): android.view.MenuItem;
						public getIntent(): android.content.Intent;
						public isEnabled(): boolean;
						public setChecked(param0: boolean): android.view.MenuItem;
						public collapseActionView(): boolean;
						public setTitle(param0: number): android.view.MenuItem;
						public getTitleCondensed(): string;
						public expandActionView(): boolean;
						public getTitle(): string;
						public setActionView(param0: android.view.View): android.view.MenuItem;
						public getActionProvider(): android.view.ActionProvider;
						public setIcon(param0: android.graphics.drawable.Drawable): android.view.MenuItem;
						public setActionProvider(param0: android.view.ActionProvider): android.view.MenuItem;
						public getAlphabeticShortcut(): string;
						public setIntent(param0: android.content.Intent): android.view.MenuItem;
						public hasSubMenu(): boolean;
					}
					export module MenuItemWrapperJB {
						export class ActionProviderWrapperJB extends android.support.v7.view.menu.MenuItemWrapperICS.ActionProviderWrapper implements android.view.ActionProvider.VisibilityListener {
							public isVisible(): boolean;
							public constructor(param0: android.support.v7.view.menu.MenuItemWrapperICS, param1: android.content.Context, param2: android.view.ActionProvider);
							public onCreateActionView(param0: android.view.MenuItem): android.view.View;
							public refreshVisibility(): void;
							public setVisibilityListener(param0: android.support.v4.view.ActionProvider.VisibilityListener): void;
							public onActionProviderVisibilityChanged(param0: boolean): void;
							public constructor(param0: android.support.v7.view.menu.MenuItemWrapperJB, param1: android.content.Context, param2: android.view.ActionProvider);
							public onCreateActionView(): android.view.View;
							public overridesItemVisibility(): boolean;
							public constructor(param0: android.content.Context);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuPopupHelper.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuView.d.ts" />
/// <reference path="./android.support.v7.view.menu.SubMenuBuilder.d.ts" />
/// <reference path="./android.support.v7.widget.ListPopupWindow.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuPopupHelper extends javalangObject implements android.widget.AdapterView.OnItemClickListener, android.view.View.OnKeyListener, android.view.ViewTreeObserver.OnGlobalLayoutListener, android.widget.PopupWindow.OnDismissListener, android.support.v7.view.menu.MenuPresenter {
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public getMenuView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView;
						public tryShow(): boolean;
						public flagActionItems(): boolean;
						public dismiss(): void;
						public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View, param3: boolean, param4: number, param5: number);
						public onSaveInstanceState(): android.os.Parcelable;
						public setForceShowIcon(param0: boolean): void;
						public onKey(param0: android.view.View, param1: number, param2: android.view.KeyEvent): boolean;
						public updateMenuView(param0: boolean): void;
						public setGravity(param0: number): void;
						public collapseItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
						public getPopup(): android.support.v7.widget.ListPopupWindow;
						public onItemClick(param0: android.widget.AdapterView<any>, param1: android.view.View, param2: number, param3: number): void;
						public getId(): number;
						public onDismiss(): void;
						public setAnchorView(param0: android.view.View): void;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View);
						public show(): void;
						public onGlobalLayout(): void;
						public initForMenu(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder): void;
						public setCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder);
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public getGravity(): number;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View, param3: boolean, param4: number);
						public isShowing(): boolean;
						public expandItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
					}
					export module MenuPopupHelper {
						export class MenuAdapter extends android.widget.BaseAdapter {
							public constructor();
							public notifyDataSetChanged(): void;
							public getItemId(param0: number): number;
							public constructor(param0: android.support.v7.view.menu.MenuPopupHelper, param1: android.support.v7.view.menu.MenuBuilder);
							public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
							public areAllItemsEnabled(): boolean;
							public getCount(): number;
							public getItem(param0: number): android.support.v7.view.menu.MenuItemImpl;
							public isEnabled(param0: number): boolean;
							public getView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuView.d.ts" />
/// <reference path="./android.support.v7.view.menu.SubMenuBuilder.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuPresenter extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.view.menu.MenuPresenter interface with the provided implementation.
						 */
						public constructor(implementation: {
							initForMenu(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder): void;
							getMenuView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView;
							updateMenuView(param0: boolean): void;
							setCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
							onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
							onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
							flagActionItems(): boolean;
							expandItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
							collapseItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
							getId(): number;
							onSaveInstanceState(): android.os.Parcelable;
							onRestoreInstanceState(param0: android.os.Parcelable): void;
						});
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public getMenuView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView;
						public flagActionItems(): boolean;
						public onSaveInstanceState(): android.os.Parcelable;
						public collapseItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
						public updateMenuView(param0: boolean): void;
						public initForMenu(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder): void;
						public setCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
						public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public expandItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
						public getId(): number;
					}
					export module MenuPresenter {
						export class Callback extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.v7.view.menu.MenuPresenter$Callback interface with the provided implementation.
							 */
							public constructor(implementation: {
								onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
								onOpenSubMenu(param0: android.support.v7.view.menu.MenuBuilder): boolean;
							});
							public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
							public onOpenSubMenu(param0: android.support.v7.view.menu.MenuBuilder): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuView extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.view.menu.MenuView interface with the provided implementation.
						 */
						public constructor(implementation: {
							initialize(param0: android.support.v7.view.menu.MenuBuilder): void;
							getWindowAnimations(): number;
						});
						public getWindowAnimations(): number;
						public initialize(param0: android.support.v7.view.menu.MenuBuilder): void;
					}
					export module MenuView {
						export class ItemView extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.v7.view.menu.MenuView$ItemView interface with the provided implementation.
							 */
							public constructor(implementation: {
								initialize(param0: android.support.v7.view.menu.MenuItemImpl, param1: number): void;
								getItemData(): android.support.v7.view.menu.MenuItemImpl;
								setTitle(param0: string): void;
								setEnabled(param0: boolean): void;
								setCheckable(param0: boolean): void;
								setChecked(param0: boolean): void;
								setShortcut(param0: boolean, param1: string): void;
								setIcon(param0: android.graphics.drawable.Drawable): void;
								prefersCondensedTitle(): boolean;
								showsIcon(): boolean;
							});
							public setTitle(param0: string): void;
							public setIcon(param0: android.graphics.drawable.Drawable): void;
							public prefersCondensedTitle(): boolean;
							public getItemData(): android.support.v7.view.menu.MenuItemImpl;
							public initialize(param0: android.support.v7.view.menu.MenuItemImpl, param1: number): void;
							public setEnabled(param0: boolean): void;
							public setCheckable(param0: boolean): void;
							public setChecked(param0: boolean): void;
							public setShortcut(param0: boolean, param1: string): void;
							public showsIcon(): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.support.v4.internal.view.SupportMenu.d.ts" />
/// <reference path="./android.support.v4.internal.view.SupportMenuItem.d.ts" />
/// <reference path="./android.support.v4.internal.view.SupportSubMenu.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					// export class MenuWrapperFactory extends javalangObject {
					// 	public static wrapSupportMenu(param0: android.content.Context, param1: android.support.v4.internal.view.SupportMenu): android.view.Menu;
					// 	public static wrapSupportSubMenu(param0: android.content.Context, param1: android.support.v4.internal.view.SupportSubMenu): android.view.SubMenu;
					// 	public static wrapSupportMenuItem(param0: android.content.Context, param1: android.support.v4.internal.view.SupportMenuItem): android.view.MenuItem;
					// }
				}
			}
		}
	}
}

/// <reference path="./android.content.ComponentName.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class MenuWrapperICS extends android.support.v7.view.menu.BaseMenuWrapper implements android.view.Menu {
						public setQwertyMode(param0: boolean): void;
						public add(param0: number, param1: number, param2: number, param3: string): android.view.MenuItem;
						public close(): void;
						public add(param0: string): android.view.MenuItem;
						public addSubMenu(param0: number, param1: number, param2: number, param3: string): android.view.SubMenu;
						public getItem(param0: number): android.view.MenuItem;
						public performIdentifierAction(param0: number, param1: number): boolean;
						public setGroupVisible(param0: number, param1: boolean): void;
						public findItem(param0: number): android.view.MenuItem;
						public performShortcut(param0: number, param1: android.view.KeyEvent, param2: number): boolean;
						public addIntentOptions(param0: number, param1: number, param2: number, param3: android.content.ComponentName, param4: native.Array<android.content.Intent>, param5: android.content.Intent, param6: number, param7: native.Array<android.view.MenuItem>): number;
						public removeItem(param0: number): void;
						public isShortcutKey(param0: number, param1: android.view.KeyEvent): boolean;
						public add(param0: number, param1: number, param2: number, param3: number): android.view.MenuItem;
						public addSubMenu(param0: number): android.view.SubMenu;
						public add(param0: number): android.view.MenuItem;
						public clear(): void;
						public setGroupCheckable(param0: number, param1: boolean, param2: boolean): void;
						public addSubMenu(param0: number, param1: number, param2: number, param3: number): android.view.SubMenu;
						public removeGroup(param0: number): void;
						public addSubMenu(param0: string): android.view.SubMenu;
						public size(): number;
						public setGroupEnabled(param0: number, param1: boolean): void;
						public hasVisibleItems(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.ComponentName.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class SubMenuBuilder extends android.support.v7.view.menu.MenuBuilder implements android.view.SubMenu {
						public setIcon(param0: number): android.view.SubMenu;
						public getRootMenu(): android.support.v7.view.menu.MenuBuilder;
						public add(param0: number, param1: number, param2: number, param3: string): android.view.MenuItem;
						public close(): void;
						public add(param0: string): android.view.MenuItem;
						public getItem(param0: number): android.view.MenuItem;
						public setHeaderIcon(param0: android.graphics.drawable.Drawable): android.view.SubMenu;
						public addSubMenu(param0: number, param1: number, param2: number, param3: string): android.view.SubMenu;
						public setShortcutsVisible(param0: boolean): void;
						public getItem(): android.view.MenuItem;
						public setIcon(param0: android.graphics.drawable.Drawable): android.view.SubMenu;
						public performIdentifierAction(param0: number, param1: number): boolean;
						public setGroupVisible(param0: number, param1: boolean): void;
						public close(param0: boolean): void;
						public setHeaderIcon(param0: number): android.view.SubMenu;
						public constructor(param0: android.content.Context);
						public setCallback(param0: android.support.v7.view.menu.MenuBuilder.Callback): void;
						public removeItem(param0: number): void;
						public clearHeader(): void;
						public add(param0: number, param1: number, param2: number, param3: number): android.view.MenuItem;
						public getActionViewStatesKey(): string;
						public size(): number;
						public hasVisibleItems(): boolean;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.support.v7.view.menu.MenuItemImpl);
						public setQwertyMode(param0: boolean): void;
						public expandItemActionView(param0: android.support.v7.view.menu.MenuItemImpl): boolean;
						public setHeaderTitle(param0: number): android.view.SubMenu;
						public findItem(param0: number): android.view.MenuItem;
						public performShortcut(param0: number, param1: android.view.KeyEvent, param2: number): boolean;
						public addIntentOptions(param0: number, param1: number, param2: number, param3: android.content.ComponentName, param4: native.Array<android.content.Intent>, param5: android.content.Intent, param6: number, param7: native.Array<android.view.MenuItem>): number;
						public isShortcutKey(param0: number, param1: android.view.KeyEvent): boolean;
						public isShortcutsVisible(): boolean;
						public getParentMenu(): android.view.Menu;
						public setHeaderView(param0: android.view.View): android.view.SubMenu;
						public addSubMenu(param0: number): android.view.SubMenu;
						public isQwertyMode(): boolean;
						public add(param0: number): android.view.MenuItem;
						public clear(): void;
						public setGroupCheckable(param0: number, param1: boolean, param2: boolean): void;
						public addSubMenu(param0: number, param1: number, param2: number, param3: number): android.view.SubMenu;
						public removeGroup(param0: number): void;
						public setHeaderTitle(param0: string): android.view.SubMenu;
						public addSubMenu(param0: string): android.view.SubMenu;
						public collapseItemActionView(param0: android.support.v7.view.menu.MenuItemImpl): boolean;
						public setGroupEnabled(param0: number, param1: boolean): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.ComponentName.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v4.internal.view.SupportSubMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.SubMenu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module view {
				export module menu {
					export class SubMenuWrapperICS extends android.support.v7.view.menu.MenuWrapperICS implements android.view.SubMenu {
						public setIcon(param0: number): android.view.SubMenu;
						public add(param0: number, param1: number, param2: number, param3: string): android.view.MenuItem;
						public close(): void;
						public add(param0: string): android.view.MenuItem;
						public setHeaderIcon(param0: android.graphics.drawable.Drawable): android.view.SubMenu;
						public getItem(param0: number): android.view.MenuItem;
						public addSubMenu(param0: number, param1: number, param2: number, param3: string): android.view.SubMenu;
						public setIcon(param0: android.graphics.drawable.Drawable): android.view.SubMenu;
						public getItem(): android.view.MenuItem;
						public performIdentifierAction(param0: number, param1: number): boolean;
						public setGroupVisible(param0: number, param1: boolean): void;
						public setHeaderIcon(param0: number): android.view.SubMenu;
						public removeItem(param0: number): void;
						public clearHeader(): void;
						public add(param0: number, param1: number, param2: number, param3: number): android.view.MenuItem;
						public size(): number;
						public hasVisibleItems(): boolean;
						public setQwertyMode(param0: boolean): void;
						public setHeaderTitle(param0: number): android.view.SubMenu;
						public findItem(param0: number): android.view.MenuItem;
						public performShortcut(param0: number, param1: android.view.KeyEvent, param2: number): boolean;
						public addIntentOptions(param0: number, param1: number, param2: number, param3: android.content.ComponentName, param4: native.Array<android.content.Intent>, param5: android.content.Intent, param6: number, param7: native.Array<android.view.MenuItem>): number;
						public isShortcutKey(param0: number, param1: android.view.KeyEvent): boolean;
						public setHeaderView(param0: android.view.View): android.view.SubMenu;
						public addSubMenu(param0: number): android.view.SubMenu;
						public add(param0: number): android.view.MenuItem;
						public clear(): void;
						public setGroupCheckable(param0: number, param1: boolean, param2: boolean): void;
						public getWrappedObject(): any;
						public addSubMenu(param0: number, param1: number, param2: number, param3: number): android.view.SubMenu;
						public removeGroup(param0: number): void;
						public setHeaderTitle(param0: string): android.view.SubMenu;
						public addSubMenu(param0: string): android.view.SubMenu;
						public setGroupEnabled(param0: number, param1: boolean): void;
						public getWrappedObject(): javalangObject;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.support.v7.widget.AbsActionBarView.d.ts" />
/// <reference path="./android.support.v7.widget.ActionMenuPresenter.d.ts" />
/// <reference path="./android.support.v7.widget.ActionMenuView.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export abstract class AbsActionBarView extends android.view.ViewGroup {
					public mVisAnimListener: android.support.v7.widget.AbsActionBarView.VisibilityAnimListener;
					public mPopupContext: android.content.Context;
					public mMenuView: android.support.v7.widget.ActionMenuView;
					public mActionMenuPresenter: android.support.v7.widget.ActionMenuPresenter;
					public mContentHeight: number;
					public mVisibilityAnim: android.support.v4.view.ViewPropertyAnimatorCompat;
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public onHoverEvent(param0: android.view.MotionEvent): boolean;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public clearChildFocus(param0: android.view.View): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public measureChildView(param0: android.view.View, param1: number, param2: number, param3: number): number;
					public hideOverflowMenu(): boolean;
					public onConfigurationChanged(param0: android.content.res.Configuration): void;
					public canShowOverflowMenu(): boolean;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public setupAnimatorToVisibility(param0: number, param1: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public onTouchEvent(param0: android.view.MotionEvent): boolean;
					public isOverflowMenuShowPending(): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public setContentHeight(param0: number): void;
					public animateToVisibility(param0: number): void;
					public setVisibility(param0: number): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public showOverflowMenu(): boolean;
					public isOverflowMenuShowing(): boolean;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public getAnimatedVisibility(): number;
					public positionChild(param0: android.view.View, param1: number, param2: number, param3: number, param4: boolean): number;
					public isOverflowReserved(): boolean;
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public dismissPopupMenus(): void;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public getContentHeight(): number;
					public postShowOverflowMenu(): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public addView(param0: android.view.View): void;
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public static next(param0: number, param1: number, param2: boolean): number;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
				}
				export module AbsActionBarView {
					export class VisibilityAnimListener extends javalangObject {
						public withFinalVisibility(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: number): android.support.v7.widget.AbsActionBarView.VisibilityAnimListener;
						public onAnimationCancel(param0: android.view.View): void;
						public onAnimationEnd(param0: android.view.View): void;
						public constructor(param0: android.support.v7.widget.AbsActionBarView);
						public onAnimationStart(param0: android.view.View): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.ColorFilter.d.ts" />
/// <reference path="./android.support.v7.widget.ActionBarContainer.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ActionBarBackgroundDrawable extends android.graphics.drawable.Drawable {
					public constructor(param0: android.support.v7.widget.ActionBarContainer);
					public constructor();
					public setAlpha(param0: number): void;
					public setColorFilter(param0: android.graphics.ColorFilter): void;
					public setColorFilter(param0: number, param1: android.graphics.PorterDuff.Mode): void;
					public draw(param0: android.graphics.Canvas): void;
					public getOpacity(): number;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Outline.d.ts" />
/// <reference path="./android.support.v7.widget.ActionBarContainer.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ActionBarBackgroundDrawableV21 extends android.support.v7.widget.ActionBarBackgroundDrawable {
					public constructor(param0: android.support.v7.widget.ActionBarContainer);
					public getOutline(param0: any): void;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.support.v7.widget.ScrollingTabContainerView.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ActionBarContainer extends android.widget.FrameLayout {
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public clearChildFocus(param0: android.view.View): void;
					public jumpDrawablesToCurrentState(): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public onTouchEvent(param0: android.view.MotionEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public setPrimaryBackground(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public startActionModeForChild(param0: android.view.View, param1: android.support.v7.view.ActionMode.Callback): android.support.v7.view.ActionMode;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public setVisibility(param0: number): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public drawableStateChanged(): void;
					public requestFitSystemWindows(): void;
					public setTabContainer(param0: android.support.v7.widget.ScrollingTabContainerView): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public onInterceptTouchEvent(param0: android.view.MotionEvent): boolean;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public verifyDrawable(param0: android.graphics.drawable.Drawable): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public onFinishInflate(): void;
					public getTabContainer(): android.view.View;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setSplitBackground(param0: android.graphics.drawable.Drawable): void;
					public setStackedBackground(param0: android.graphics.drawable.Drawable): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public setTransitioning(param0: boolean): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ActionBarContextView extends android.support.v7.widget.AbsActionBarView {
					public getTitle(): string;
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public setTitle(param0: string): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public clearChildFocus(param0: android.view.View): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public generateLayoutParams(param0: android.util.AttributeSet): android.view.ViewGroup.LayoutParams;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public isTitleOptional(): boolean;
					public hideOverflowMenu(): boolean;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public killMode(): void;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public setContentHeight(param0: number): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public setCustomView(param0: android.view.View): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public showOverflowMenu(): boolean;
					public isOverflowMenuShowing(): boolean;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public closeMode(): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public onInitializeAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): void;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public initForMode(param0: android.support.v7.view.ActionMode): void;
					public generateDefaultLayoutParams(): android.view.ViewGroup.LayoutParams;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public onDetachedFromWindow(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public shouldDelayChildPressedState(): boolean;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public setSubtitle(param0: string): void;
					public getSubtitle(): string;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
					public setTitleOptional(param0: boolean): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.util.SparseArray.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ActionBarOverlayLayout extends android.view.ViewGroup implements android.support.v7.widget.DecorContentParent, android.support.v4.view.NestedScrollingParent {
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public getTitle(): string;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public fitSystemWindows(param0: android.graphics.Rect): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public setMenu(param0: android.view.Menu, param1: android.support.v7.view.menu.MenuPresenter.Callback): void;
					public isTextDirectionResolved(): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public hideOverflowMenu(): boolean;
					public setIcon(param0: android.graphics.drawable.Drawable): void;
					public onConfigurationChanged(param0: android.content.res.Configuration): void;
					public canShowOverflowMenu(): boolean;
					public onWindowSystemUiVisibilityChanged(param0: number): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public setMenuPrepared(): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public setHasNonEmbeddedTabs(param0: boolean): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public onWindowVisibilityChanged(param0: number): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public setActionBarVisibilityCallback(param0: android.support.v7.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback): void;
					public generateLayoutParams(param0: android.util.AttributeSet): android.support.v7.widget.ActionBarOverlayLayout.LayoutParams;
					public isOverflowMenuShowing(): boolean;
					public focusSearch(param0: number): android.view.View;
					public isTextAlignmentResolved(): boolean;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public canResolveTextAlignment(): boolean;
					public restoreToolbarHierarchyState(param0: android.util.SparseArray<any>): void;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public generateDefaultLayoutParams(): android.support.v7.widget.ActionBarOverlayLayout.LayoutParams;
					public setShowingForActionMode(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public generateDefaultLayoutParams(): android.view.ViewGroup.LayoutParams;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public onDetachedFromWindow(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public dismissPopups(): void;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public getTextAlignment(): number;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public checkLayoutParams(param0: android.view.ViewGroup.LayoutParams): boolean;
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public setWindowTitle(param0: string): void;
					public setLogo(param0: number): void;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isLayoutRequested(): boolean;
					public setUiOptions(param0: number): void;
					public clearChildFocus(param0: android.view.View): void;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public generateLayoutParams(param0: android.util.AttributeSet): android.view.ViewGroup.LayoutParams;
					public isHideOnContentScrollEnabled(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public setOverlayMode(param0: boolean): void;
					public getActionBarHideOffset(): number;
					public setWindowCallback(param0: android.view.Window.Callback): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public isOverflowMenuShowPending(): boolean;
					public setHideOnContentScrollEnabled(param0: boolean): void;
					public bringChildToFront(param0: android.view.View): void;
					public initFeature(param0: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public hasLogo(): boolean;
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public setIcon(param0: number): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public showOverflowMenu(): boolean;
					public isInOverlayMode(): boolean;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public requestTransparentRegion(param0: android.view.View): void;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public setActionBarHideOffset(param0: number): void;
					public onStopNestedScroll(param0: android.view.View): void;
					public saveToolbarHierarchyState(param0: android.util.SparseArray<any>): void;
					public canResolveLayoutDirection(): boolean;
					public removeView(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public shouldDelayChildPressedState(): boolean;
					public getNestedScrollAxes(): number;
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public hasIcon(): boolean;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
				}
				export module ActionBarOverlayLayout {
					export class ActionBarVisibilityCallback extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback interface with the provided implementation.
						 */
						public constructor(implementation: {
							onWindowVisibilityChanged(param0: number): void;
							showForSystem(): void;
							hideForSystem(): void;
							enableContentAnimations(param0: boolean): void;
							onContentScrollStarted(): void;
							onContentScrollStopped(): void;
						});
						public onContentScrollStarted(): void;
						public hideForSystem(): void;
						public onContentScrollStopped(): void;
						public onWindowVisibilityChanged(param0: number): void;
						public enableContentAnimations(param0: boolean): void;
						public showForSystem(): void;
					}
					export class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
						public constructor(param0: android.view.ViewGroup.MarginLayoutParams);
						public constructor(param0: android.view.ViewGroup.LayoutParams);
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public constructor(param0: number, param1: number);
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuBuilder.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuItemImpl.d.ts" />
/// <reference path="./android.support.v7.view.menu.MenuView.d.ts" />
/// <reference path="./android.support.v7.view.menu.SubMenuBuilder.d.ts" />
/// <reference path="./android.support.v7.widget.ActionMenuPresenter.d.ts" />
/// <reference path="./android.support.v7.widget.ActionMenuView.d.ts" />
/// <reference path="./android.support.v7.widget.ListPopupWindow.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ActionMenuPresenter extends android.support.v7.view.menu.BaseMenuPresenter implements android.support.v4.view.ActionProvider.SubUiVisibilityListener {
					public getOverflowIcon(): android.graphics.drawable.Drawable;
					public bindItemView(param0: android.support.v7.view.menu.MenuItemImpl, param1: android.support.v7.view.menu.MenuView.ItemView): void;
					public onSubUiVisibilityChanged(param0: boolean): void;
					public getItemView(param0: android.support.v7.view.menu.MenuItemImpl, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					public setWidthLimit(param0: number, param1: boolean): void;
					public expandItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
					public setReserveOverflow(param0: boolean): void;
					public setOverflowIcon(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context, param1: number, param2: number);
					public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
					public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
					public hideOverflowMenu(): boolean;
					public onConfigurationChanged(param0: android.content.res.Configuration): void;
					public flagActionItems(): boolean;
					public isOverflowMenuShowPending(): boolean;
					public isOverflowReserved(): boolean;
					public setExpandedActionViewsExclusive(param0: boolean): void;
					public getId(): number;
					public onRestoreInstanceState(param0: android.os.Parcelable): void;
					public collapseItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
					public updateMenuView(param0: boolean): void;
					public setCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
					public setItemLimit(param0: number): void;
					public initForMenu(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder): void;
					public constructor(param0: android.content.Context);
					public filterLeftoverView(param0: android.view.ViewGroup, param1: number): boolean;
					public dismissPopupMenus(): boolean;
					public shouldIncludeItem(param0: number, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
					public hideSubMenus(): boolean;
					public getMenuView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView;
					public showOverflowMenu(): boolean;
					public isOverflowMenuShowing(): boolean;
					public setMenuView(param0: android.support.v7.widget.ActionMenuView): void;
					public onSaveInstanceState(): android.os.Parcelable;
				}
				export module ActionMenuPresenter {
					export class ActionButtonSubmenu extends android.support.v7.view.menu.MenuPopupHelper {
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public getMenuView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView;
						public flagActionItems(): boolean;
						public collapseItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
						public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
						public onItemClick(param0: android.widget.AdapterView<any>, param1: android.view.View, param2: number, param3: number): void;
						public getId(): number;
						public onDismiss(): void;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View, param3: boolean, param4: number, param5: number);
						public onSaveInstanceState(): android.os.Parcelable;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View);
						public constructor(param0: android.support.v7.widget.ActionMenuPresenter, param1: android.content.Context, param2: android.support.v7.view.menu.SubMenuBuilder);
						public onKey(param0: android.view.View, param1: number, param2: android.view.KeyEvent): boolean;
						public updateMenuView(param0: boolean): void;
						public onGlobalLayout(): void;
						public initForMenu(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder): void;
						public setCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder);
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View, param3: boolean, param4: number);
						public expandItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
					}
					export class ActionMenuPopupCallback extends android.support.v7.view.menu.ActionMenuItemView.PopupCallback {
						public getPopup(): android.support.v7.widget.ListPopupWindow;
					}
					export class OpenOverflowRunnable extends javalangObject implements javalangRunnable {
						public run(): void;
						public constructor(param0: android.support.v7.widget.ActionMenuPresenter, param1: android.support.v7.widget.ActionMenuPresenter.OverflowPopup);
					}
					export class OverflowMenuButton extends android.support.v7.widget.AppCompatImageView {
						public needsDividerBefore(): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public constructor(param0: android.support.v7.widget.ActionMenuPresenter, param1: android.content.Context);
						public sendAccessibilityEvent(param0: number): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public performClick(): boolean;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(param0: android.content.Context);
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
						public needsDividerAfter(): boolean;
						public setFrame(param0: number, param1: number, param2: number, param3: number): boolean;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					}
					export class OverflowPopup extends android.support.v7.view.menu.MenuPopupHelper {
						public constructor(param0: android.support.v7.widget.ActionMenuPresenter, param1: android.content.Context, param2: android.support.v7.view.menu.MenuBuilder, param3: android.view.View, param4: boolean);
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public getMenuView(param0: android.view.ViewGroup): android.support.v7.view.menu.MenuView;
						public flagActionItems(): boolean;
						public collapseItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
						public onSubMenuSelected(param0: android.support.v7.view.menu.SubMenuBuilder): boolean;
						public onItemClick(param0: android.widget.AdapterView<any>, param1: android.view.View, param2: number, param3: number): void;
						public getId(): number;
						public onDismiss(): void;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View, param3: boolean, param4: number, param5: number);
						public onSaveInstanceState(): android.os.Parcelable;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View);
						public onKey(param0: android.view.View, param1: number, param2: android.view.KeyEvent): boolean;
						public updateMenuView(param0: boolean): void;
						public onGlobalLayout(): void;
						public initForMenu(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder): void;
						public setCallback(param0: android.support.v7.view.menu.MenuPresenter.Callback): void;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder);
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public constructor(param0: android.content.Context, param1: android.support.v7.view.menu.MenuBuilder, param2: android.view.View, param3: boolean, param4: number);
						public expandItemActionView(param0: android.support.v7.view.menu.MenuBuilder, param1: android.support.v7.view.menu.MenuItemImpl): boolean;
					}
					export class PopupPresenterCallback extends javalangObject implements android.support.v7.view.menu.MenuPresenter.Callback {
						public onCloseMenu(param0: android.support.v7.view.menu.MenuBuilder, param1: boolean): void;
						public onOpenSubMenu(param0: android.support.v7.view.menu.MenuBuilder): boolean;
					}
					export class SavedState extends javalangObject implements android.os.Parcelable {
						public openSubMenuId: number;
						public static CREATOR: android.os.Parcelable.Creator<any>;
						public describeContents(): number;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
					}
				}
			}
		}
	}
}

import javalangVoid = java.lang.Void;
/// <reference path="./android.content.ComponentName.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.content.pm.ResolveInfo.d.ts" />
/// <reference path="./android.support.v7.widget.ActivityChooserModel.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.lang.Void.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ActivityChooserModel extends android.database.DataSetObservable {
					public static DEFAULT_HISTORY_FILE_NAME: string;
					public static DEFAULT_HISTORY_MAX_LENGTH: number;
					public setOnChooseActivityListener(param0: android.support.v7.widget.ActivityChooserModel.OnChooseActivityListener): void;
					public getActivityIndex(param0: android.content.pm.ResolveInfo): number;
					public chooseActivity(param0: number): android.content.Intent;
					public static get(param0: android.content.Context, param1: string): android.support.v7.widget.ActivityChooserModel;
					public setActivitySorter(param0: android.support.v7.widget.ActivityChooserModel.ActivitySorter): void;
					public setDefaultActivity(param0: number): void;
					public getActivityCount(): number;
					public setIntent(param0: android.content.Intent): void;
					public getIntent(): android.content.Intent;
					public setHistoryMaxSize(param0: number): void;
					public getDefaultActivity(): android.content.pm.ResolveInfo;
					public getHistoryMaxSize(): number;
					public getActivity(param0: number): android.content.pm.ResolveInfo;
					public getHistorySize(): number;
				}
				export module ActivityChooserModel {
					export class ActivityChooserModelClient extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.ActivityChooserModel$ActivityChooserModelClient interface with the provided implementation.
						 */
						public constructor(implementation: {
							setActivityChooserModel(param0: android.support.v7.widget.ActivityChooserModel): void;
						});
						public setActivityChooserModel(param0: android.support.v7.widget.ActivityChooserModel): void;
					}
					export class ActivityResolveInfo extends javalangObject {
						public resolveInfo: android.content.pm.ResolveInfo;
						public weight: number;
						public equals(param0: javalangObject): boolean;
						public hashCode(): number;
						public compareTo(param0: android.support.v7.widget.ActivityChooserModel.ActivityResolveInfo): number;
						public constructor(param0: android.support.v7.widget.ActivityChooserModel, param1: android.content.pm.ResolveInfo);
						public toString(): string;
					}
					export class ActivitySorter extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.ActivityChooserModel$ActivitySorter interface with the provided implementation.
						 */
						public constructor(implementation: {
							sort(param0: android.content.Intent, param1: javautilList<any>, param2: javautilList<any>): void;
						});
						public sort(param0: android.content.Intent, param1: javautilList<any>, param2: javautilList<any>): void;
					}
					export class DefaultSorter extends javalangObject implements android.support.v7.widget.ActivityChooserModel.ActivitySorter {
						public sort(param0: android.content.Intent, param1: javautilList<any>, param2: javautilList<any>): void;
					}
					export class HistoricalRecord extends javalangObject {
						public activity: android.content.ComponentName;
						public time: number;
						public weight: number;
						public constructor(param0: android.content.ComponentName, param1: number, param2: number);
						public equals(param0: javalangObject): boolean;
						public constructor(param0: string, param1: number, param2: number);
						public hashCode(): number;
						public toString(): string;
					}
					export class OnChooseActivityListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.ActivityChooserModel$OnChooseActivityListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onChooseActivity(param0: android.support.v7.widget.ActivityChooserModel, param1: android.content.Intent): boolean;
						});
						public onChooseActivity(param0: android.support.v7.widget.ActivityChooserModel, param1: android.content.Intent): boolean;
					}
					export class PersistHistoryAsyncTask extends android.os.AsyncTask<any, any, any> {
						public doInBackground(param0: native.Array<javalangObject>): javalangObject;
						public doInBackground(param0: native.Array<javalangObject>): javalangVoid;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.pm.ResolveInfo.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v4.view.ActionProvider.d.ts" />
/// <reference path="./android.support.v7.widget.ActivityChooserModel.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ActivityChooserView extends android.view.ViewGroup implements android.support.v7.widget.ActivityChooserModel.ActivityChooserModelClient {
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public setExpandActivityOverflowButtonContentDescription(param0: number): void;
					public onAttachedToWindow(): void;
					public clearChildFocus(param0: android.view.View): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public setProvider(param0: android.support.v4.view.ActionProvider): void;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public getDataModel(): android.support.v7.widget.ActivityChooserModel;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public showPopup(): boolean;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public setOnDismissListener(param0: android.widget.PopupWindow.OnDismissListener): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public setDefaultActionButtonContentDescription(param0: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public setExpandActivityOverflowButtonDrawable(param0: android.graphics.drawable.Drawable): void;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public setActivityChooserModel(param0: android.support.v7.widget.ActivityChooserModel): void;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public onDetachedFromWindow(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public isShowingPopup(): boolean;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public dismissPopup(): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
					public setInitialActivityCount(param0: number): void;
				}
				export module ActivityChooserView {
					export class ActivityChooserViewAdapter extends android.widget.BaseAdapter {
						public static MAX_ACTIVITY_COUNT_UNLIMITED: number;
						public static MAX_ACTIVITY_COUNT_DEFAULT: number;
						public isEnabled(param0: number): boolean;
						public getView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						public areAllItemsEnabled(): boolean;
						public getActivityCount(): number;
						public getShowDefaultActivity(): boolean;
						public getItem(param0: number): javalangObject;
						public getItemViewType(param0: number): number;
						public setShowDefaultActivity(param0: boolean, param1: boolean): void;
						public measureContentWidth(): number;
						public getDataModel(): android.support.v7.widget.ActivityChooserModel;
						public getCount(): number;
						public getViewTypeCount(): number;
						public getDefaultActivity(): android.content.pm.ResolveInfo;
						public setShowFooterView(param0: boolean): void;
						public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						public getItemId(param0: number): number;
						public setMaxActivityCount(param0: number): void;
						public getHistorySize(): number;
						public setDataModel(param0: android.support.v7.widget.ActivityChooserModel): void;
					}
					export class Callbacks extends javalangObject implements android.widget.AdapterView.OnItemClickListener, android.view.View.OnClickListener, android.view.View.OnLongClickListener, android.widget.PopupWindow.OnDismissListener {
						public onDismiss(): void;
						public onLongClick(param0: android.view.View): boolean;
						public onClick(param0: android.view.View): void;
						public onItemClick(param0: android.widget.AdapterView<any>, param1: android.view.View, param2: number, param3: number): void;
					}
					export class InnerLayout extends android.support.v7.widget.LinearLayoutCompat {
						public isLayoutRequested(): boolean;
						public canResolveLayoutDirection(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public getParentForAccessibility(): android.view.ViewParent;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(param0: android.content.Context);
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public addView(param0: android.view.View, param1: number, param2: number): void;
						public addView(param0: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusSearch(param0: number): android.view.View;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public isLayoutDirectionResolved(): boolean;
						public removeView(param0: android.view.View): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public requestLayout(): void;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isTextDirectionResolved(): boolean;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public addView(param0: android.view.View, param1: number): void;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestFitSystemWindows(): void;
						public clearChildFocus(param0: android.view.View): void;
						public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
						public getTextAlignment(): number;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatAutoCompleteTextView extends android.widget.AutoCompleteTextView {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public setDropDownBackgroundResource(param0: number): void;
					public getSupportBackgroundTintList(): android.content.res.ColorStateList;
					public sendAccessibilityEvent(param0: number): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public setTextAppearance(param0: android.content.Context, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public setTextAppearance(param0: number): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setBackgroundResource(param0: number): void;
					public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
					public drawableStateChanged(): void;
					public onFilterComplete(param0: number): void;
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatBackgroundHelper extends javalangObject {
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityNodeInfo.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatButton extends android.widget.Button {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onInitializeAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): void;
					public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public getSupportBackgroundTintList(): android.content.res.ColorStateList;
					public sendAccessibilityEvent(param0: number): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public onInitializeAccessibilityNodeInfo(param0: android.view.accessibility.AccessibilityNodeInfo): void;
					public setTextAppearance(param0: android.content.Context, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public setTextAppearance(param0: number): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setBackgroundResource(param0: number): void;
					public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
					public drawableStateChanged(): void;
					public setSupportAllCaps(param0: boolean): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatCheckBox extends android.widget.CheckBox {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public getCompoundPaddingLeft(): number;
					public setButtonDrawable(param0: number): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public setButtonDrawable(param0: android.graphics.drawable.Drawable): void;
					public setChecked(param0: boolean): void;
					public sendAccessibilityEvent(param0: number): void;
					public isChecked(): boolean;
					public getSupportButtonTintMode(): android.graphics.PorterDuff.Mode;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public toggle(): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setSupportButtonTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public getSupportButtonTintList(): android.content.res.ColorStateList;
					public setSupportButtonTintList(param0: android.content.res.ColorStateList): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatCheckedTextView extends android.widget.CheckedTextView {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setCheckMarkDrawable(param0: android.graphics.drawable.Drawable): void;
					public setTextAppearance(param0: android.content.Context, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public setTextAppearance(param0: number): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public toggle(): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public drawableStateChanged(): void;
					public setChecked(param0: boolean): void;
					public sendAccessibilityEvent(param0: number): void;
					public setCheckMarkDrawable(param0: number): void;
					public isChecked(): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatCompoundButtonHelper extends javalangObject {
				}
				export module AppCompatCompoundButtonHelper {
					export class DirectSetButtonDrawableInterface extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.AppCompatCompoundButtonHelper$DirectSetButtonDrawableInterface interface with the provided implementation.
						 */
						public constructor(implementation: {
							setButtonDrawable(param0: android.graphics.drawable.Drawable): void;
						});
						public setButtonDrawable(param0: android.graphics.drawable.Drawable): void;
					}
				}
			}
		}
	}
}

import orgxmlpullv1XmlPullParser = org.xmlpull.v1.XmlPullParser;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.PorterDuffColorFilter.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.widget.TintInfo.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./org.xmlpull.v1.XmlPullParser.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatDrawableManager extends javalangObject {
					public getTintList(param0: android.content.Context, param1: number): android.content.res.ColorStateList;
					public static tintDrawable(param0: android.graphics.drawable.Drawable, param1: android.support.v7.widget.TintInfo, param2: native.Array<number>): void;
					public getDrawable(param0: android.content.Context, param1: number, param2: boolean): android.graphics.drawable.Drawable;
					public constructor();
					public getDrawable(param0: android.content.Context, param1: number): android.graphics.drawable.Drawable;
					public static getPorterDuffColorFilter(param0: number, param1: android.graphics.PorterDuff.Mode): android.graphics.PorterDuffColorFilter;
					public static get(): android.support.v7.widget.AppCompatDrawableManager;
				}
				export module AppCompatDrawableManager {
					export class AvdcInflateDelegate extends javalangObject implements android.support.v7.widget.AppCompatDrawableManager.InflateDelegate {
						public createFromXmlInner(param0: android.content.Context, param1: orgxmlpullv1XmlPullParser, param2: android.util.AttributeSet, param3: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
					}
					export class ColorFilterLruCache extends android.support.v4.util.LruCache<any, any> {
						public constructor(param0: number);
					}
					export class InflateDelegate extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.AppCompatDrawableManager$InflateDelegate interface with the provided implementation.
						 */
						public constructor(implementation: {
							createFromXmlInner(param0: android.content.Context, param1: orgxmlpullv1XmlPullParser, param2: android.util.AttributeSet, param3: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
						});
						public createFromXmlInner(param0: android.content.Context, param1: orgxmlpullv1XmlPullParser, param2: android.util.AttributeSet, param3: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
					}
					export class VdcInflateDelegate extends javalangObject implements android.support.v7.widget.AppCompatDrawableManager.InflateDelegate {
						public createFromXmlInner(param0: android.content.Context, param1: orgxmlpullv1XmlPullParser, param2: android.util.AttributeSet, param3: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatEditText extends android.widget.EditText {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public setTextAppearance(param0: android.content.Context, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public setTextAppearance(param0: number): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setBackgroundResource(param0: number): void;
					public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
					public drawableStateChanged(): void;
					public getSupportBackgroundTintList(): android.content.res.ColorStateList;
					public sendAccessibilityEvent(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatImageButton extends android.widget.ImageButton {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setBackgroundResource(param0: number): void;
					public setImageResource(param0: number): void;
					public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
					public drawableStateChanged(): void;
					public getSupportBackgroundTintList(): android.content.res.ColorStateList;
					public sendAccessibilityEvent(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.support.v7.widget.AppCompatDrawableManager.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.widget.ImageView.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatImageHelper extends javalangObject {
					public loadFromAttributes(param0: android.util.AttributeSet, param1: number): void;
					public constructor(param0: android.widget.ImageView, param1: android.support.v7.widget.AppCompatDrawableManager);
					public setImageResource(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatImageView extends android.widget.ImageView {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setBackgroundResource(param0: number): void;
					public setImageResource(param0: number): void;
					public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
					public drawableStateChanged(): void;
					public getSupportBackgroundTintList(): android.content.res.ColorStateList;
					public sendAccessibilityEvent(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatMultiAutoCompleteTextView extends android.widget.MultiAutoCompleteTextView {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public setDropDownBackgroundResource(param0: number): void;
					public getSupportBackgroundTintList(): android.content.res.ColorStateList;
					public sendAccessibilityEvent(param0: number): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public setTextAppearance(param0: android.content.Context, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public setTextAppearance(param0: number): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setBackgroundResource(param0: number): void;
					public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
					public drawableStateChanged(): void;
					public onFilterComplete(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.View.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatPopupWindow extends android.widget.PopupWindow {
					public update(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public constructor(param0: android.view.View, param1: number, param2: number);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public update(param0: number, param1: number, param2: number, param3: number): void;
					public showAsDropDown(param0: android.view.View, param1: number, param2: number, param3: number): void;
					public showAsDropDown(param0: android.view.View, param1: number, param2: number): void;
					public update(param0: number, param1: number, param2: number, param3: number, param4: boolean): void;
					public getSupportOverlapAnchor(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public constructor(param0: android.view.View, param1: number, param2: number, param3: boolean);
					public showAsDropDown(param0: android.view.View): void;
					public update(param0: android.view.View, param1: number, param2: number): void;
					public setSupportOverlapAnchor(param0: boolean): void;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public constructor();
					public update(): void;
					public constructor(param0: android.view.View);
					public update(param0: number, param1: number): void;
					public constructor(param0: number, param1: number);
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatProgressBarHelper extends javalangObject {
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatRadioButton extends android.widget.RadioButton {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public getCompoundPaddingLeft(): number;
					public setButtonDrawable(param0: number): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public setButtonDrawable(param0: android.graphics.drawable.Drawable): void;
					public setChecked(param0: boolean): void;
					public sendAccessibilityEvent(param0: number): void;
					public isChecked(): boolean;
					public getSupportButtonTintMode(): android.graphics.PorterDuff.Mode;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public toggle(): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setSupportButtonTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public getSupportButtonTintList(): android.content.res.ColorStateList;
					public setSupportButtonTintList(param0: android.content.res.ColorStateList): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatRatingBar extends android.widget.RatingBar {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public sendAccessibilityEvent(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatSeekBar extends android.widget.SeekBar {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public sendAccessibilityEvent(param0: number): void;
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatSeekBarHelper extends android.support.v7.widget.AppCompatProgressBarHelper {
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.DialogInterface.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.database.DataSetObserver.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.widget.AppCompatSpinner.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.Adapter.d.ts" />
/// <reference path="./android.widget.ListAdapter.d.ts" />
/// <reference path="./android.widget.SpinnerAdapter.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatSpinner extends android.widget.Spinner {
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context, param1: number);
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public setAdapter(param0: android.widget.SpinnerAdapter): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public clearChildFocus(param0: android.view.View): void;
					public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public setDropDownWidth(param0: number): void;
					public getPopupContext(): android.content.Context;
					public setDropDownHorizontalOffset(param0: number): void;
					public getSupportBackgroundTintList(): android.content.res.ColorStateList;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public onTouchEvent(param0: android.view.MotionEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public performClick(): boolean;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number, param4: number);
					public childDrawableStateChanged(param0: android.view.View): void;
					public getPopupBackground(): android.graphics.drawable.Drawable;
					public setBackgroundResource(param0: number): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
					public drawableStateChanged(): void;
					public requestFitSystemWindows(): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public getPrompt(): string;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public setPopupBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public setDropDownVerticalOffset(param0: number): void;
					public setPopupBackgroundResource(param0: number): void;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public setPrompt(param0: string): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number, param4: number, param5: android.content.res.Resources.Theme);
					public onDetachedFromWindow(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number, param4: android.content.res.Resources.Theme);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public setAdapter(param0: android.widget.Adapter): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public getDropDownHorizontalOffset(): number;
					public getDropDownVerticalOffset(): number;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public getDropDownWidth(): number;
					public onClick(param0: android.content.DialogInterface, param1: number): void;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
				}
				export module AppCompatSpinner {
					// export class DropDownAdapter extends javalangObject implements android.widget.ListAdapter, android.widget.SpinnerAdapter {
					// 	public isEnabled(param0: number): boolean;
					// 	public getView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					// 	public areAllItemsEnabled(): boolean;
					// 	public unregisterDataSetObserver(param0: android.database.DataSetObserver): void;
					// 	public getItem(param0: number): javalangObject;
					// 	public registerDataSetObserver(param0: android.database.DataSetObserver): void;
					// 	public getItemViewType(param0: number): number;
					// 	public getCount(): number;
					// 	public hasStableIds(): boolean;
					// 	public getViewTypeCount(): number;
					// 	public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					// 	public getItemId(param0: number): number;
					// 	public isEmpty(): boolean;
					// 	public constructor(param0: android.widget.SpinnerAdapter, param1: android.content.res.Resources.Theme);
					// }
					// export class DropdownPopup extends android.support.v7.widget.ListPopupWindow {
					// 	public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					// 	public setAdapter(param0: android.widget.ListAdapter): void;
					// 	public show(): void;
					// 	public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					// 	public setPromptText(param0: string): void;
					// 	public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					// 	public constructor(param0: android.support.v7.widget.AppCompatSpinner, param1: android.content.Context, param2: android.util.AttributeSet, param3: number);
					// 	public constructor(param0: android.content.Context);
					// 	public getHintText(): string;
					// }
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.support.v7.widget.AppCompatDrawableManager.d.ts" />
/// <reference path="./android.support.v7.widget.TintInfo.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatTextHelper extends javalangObject {
					public static createTintInfo(param0: android.content.Context, param1: android.support.v7.widget.AppCompatDrawableManager, param2: number): android.support.v7.widget.TintInfo;
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatTextHelperV17 extends android.support.v7.widget.AppCompatTextHelper {
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class AppCompatTextView extends android.widget.TextView {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public setTextAppearance(param0: android.content.Context, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public setTextAppearance(param0: number): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintList(param0: android.content.res.ColorStateList): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public setSupportBackgroundTintMode(param0: android.graphics.PorterDuff.Mode): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setBackgroundResource(param0: number): void;
					public getSupportBackgroundTintMode(): android.graphics.PorterDuff.Mode;
					public drawableStateChanged(): void;
					public getSupportBackgroundTintList(): android.content.res.ColorStateList;
					public sendAccessibilityEvent(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ButtonBarLayout extends android.widget.LinearLayout {
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public clearChildFocus(param0: android.view.View): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public setAllowStacking(param0: boolean): void;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.util.TypedValue.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ContentFrameLayout extends android.widget.FrameLayout {
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public onAttachedToWindow(): void;
					public clearChildFocus(param0: android.view.View): void;
					public getMinWidthMajor(): android.util.TypedValue;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public setDecorPadding(param0: number, param1: number, param2: number, param3: number): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public setAttachListener(param0: android.support.v7.widget.ContentFrameLayout.OnAttachListener): void;
					public getFixedHeightMinor(): android.util.TypedValue;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public getFixedWidthMinor(): android.util.TypedValue;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public getFixedHeightMajor(): android.util.TypedValue;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public onDetachedFromWindow(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public getMinWidthMinor(): android.util.TypedValue;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public getFixedWidthMajor(): android.util.TypedValue;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
					public dispatchFitSystemWindows(param0: android.graphics.Rect): void;
				}
				export module ContentFrameLayout {
					export class OnAttachListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.ContentFrameLayout$OnAttachListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onDetachedFromWindow(): void;
							onAttachedFromWindow(): void;
						});
						public onAttachedFromWindow(): void;
						public onDetachedFromWindow(): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.SparseArray.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class DecorContentParent extends javalangObject {
					/**
					 * Constructs a new instance of the android.support.v7.widget.DecorContentParent interface with the provided implementation.
					 */
					public constructor(implementation: {
						setWindowCallback(param0: android.view.Window.Callback): void;
						setWindowTitle(param0: string): void;
						getTitle(): string;
						initFeature(param0: number): void;
						setUiOptions(param0: number): void;
						hasIcon(): boolean;
						hasLogo(): boolean;
						setIcon(param0: number): void;
						setIcon(param0: android.graphics.drawable.Drawable): void;
						setLogo(param0: number): void;
						canShowOverflowMenu(): boolean;
						isOverflowMenuShowing(): boolean;
						isOverflowMenuShowPending(): boolean;
						showOverflowMenu(): boolean;
						hideOverflowMenu(): boolean;
						setMenuPrepared(): void;
						setMenu(param0: android.view.Menu, param1: android.support.v7.view.menu.MenuPresenter.Callback): void;
						saveToolbarHierarchyState(param0: android.util.SparseArray<any>): void;
						restoreToolbarHierarchyState(param0: android.util.SparseArray<any>): void;
						dismissPopups(): void;
					});
					public getTitle(): string;
					public setLogo(param0: number): void;
					public isOverflowMenuShowPending(): boolean;
					public saveToolbarHierarchyState(param0: android.util.SparseArray<any>): void;
					public dismissPopups(): void;
					public initFeature(param0: number): void;
					public restoreToolbarHierarchyState(param0: android.util.SparseArray<any>): void;
					public hasLogo(): boolean;
					public setUiOptions(param0: number): void;
					public setMenuPrepared(): void;
					public setMenu(param0: android.view.Menu, param1: android.support.v7.view.menu.MenuPresenter.Callback): void;
					public setIcon(param0: number): void;
					public hasIcon(): boolean;
					public hideOverflowMenu(): boolean;
					public setWindowCallback(param0: android.view.Window.Callback): void;
					public setIcon(param0: android.graphics.drawable.Drawable): void;
					public setWindowTitle(param0: string): void;
					public canShowOverflowMenu(): boolean;
					public isOverflowMenuShowing(): boolean;
					public showOverflowMenu(): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.support.v7.widget.ScrollingTabContainerView.d.ts" />
/// <reference path="./android.util.SparseArray.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.SpinnerAdapter.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class DecorToolbar extends javalangObject {
					/**
					 * Constructs a new instance of the android.support.v7.widget.DecorToolbar interface with the provided implementation.
					 */
					public constructor(implementation: {
						getViewGroup(): android.view.ViewGroup;
						getContext(): android.content.Context;
						hasExpandedActionView(): boolean;
						collapseActionView(): void;
						setWindowCallback(param0: android.view.Window.Callback): void;
						setWindowTitle(param0: string): void;
						getTitle(): string;
						setTitle(param0: string): void;
						getSubtitle(): string;
						setSubtitle(param0: string): void;
						initProgress(): void;
						initIndeterminateProgress(): void;
						hasIcon(): boolean;
						hasLogo(): boolean;
						setIcon(param0: number): void;
						setIcon(param0: android.graphics.drawable.Drawable): void;
						setLogo(param0: number): void;
						setLogo(param0: android.graphics.drawable.Drawable): void;
						canShowOverflowMenu(): boolean;
						isOverflowMenuShowing(): boolean;
						isOverflowMenuShowPending(): boolean;
						showOverflowMenu(): boolean;
						hideOverflowMenu(): boolean;
						setMenuPrepared(): void;
						setMenu(param0: android.view.Menu, param1: android.support.v7.view.menu.MenuPresenter.Callback): void;
						dismissPopupMenus(): void;
						getDisplayOptions(): number;
						setDisplayOptions(param0: number): void;
						setEmbeddedTabView(param0: android.support.v7.widget.ScrollingTabContainerView): void;
						hasEmbeddedTabs(): boolean;
						isTitleTruncated(): boolean;
						setCollapsible(param0: boolean): void;
						setHomeButtonEnabled(param0: boolean): void;
						getNavigationMode(): number;
						setNavigationMode(param0: number): void;
						setDropdownParams(param0: android.widget.SpinnerAdapter, param1: android.widget.AdapterView.OnItemSelectedListener): void;
						setDropdownSelectedPosition(param0: number): void;
						getDropdownSelectedPosition(): number;
						getDropdownItemCount(): number;
						setCustomView(param0: android.view.View): void;
						getCustomView(): android.view.View;
						animateToVisibility(param0: number): void;
						setupAnimatorToVisibility(param0: number, param1: number): android.support.v4.view.ViewPropertyAnimatorCompat;
						setNavigationIcon(param0: android.graphics.drawable.Drawable): void;
						setNavigationIcon(param0: number): void;
						setNavigationContentDescription(param0: string): void;
						setNavigationContentDescription(param0: number): void;
						setDefaultNavigationContentDescription(param0: number): void;
						setDefaultNavigationIcon(param0: android.graphics.drawable.Drawable): void;
						saveHierarchyState(param0: android.util.SparseArray<any>): void;
						restoreHierarchyState(param0: android.util.SparseArray<any>): void;
						setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
						getHeight(): number;
						setVisibility(param0: number): void;
						getVisibility(): number;
						setMenuCallbacks(param0: android.support.v7.view.menu.MenuPresenter.Callback, param1: android.support.v7.view.menu.MenuBuilder.Callback): void;
						getMenu(): android.view.Menu;
					});
					public getTitle(): string;
					public setLogo(param0: number): void;
					public getNavigationMode(): number;
					public setTitle(param0: string): void;
					public setDropdownParams(param0: android.widget.SpinnerAdapter, param1: android.widget.AdapterView.OnItemSelectedListener): void;
					public setMenu(param0: android.view.Menu, param1: android.support.v7.view.menu.MenuPresenter.Callback): void;
					public getCustomView(): android.view.View;
					public setDefaultNavigationContentDescription(param0: number): void;
					public hideOverflowMenu(): boolean;
					public getVisibility(): number;
					public setCollapsible(param0: boolean): void;
					public setWindowCallback(param0: android.view.Window.Callback): void;
					public setIcon(param0: android.graphics.drawable.Drawable): void;
					public canShowOverflowMenu(): boolean;
					public setupAnimatorToVisibility(param0: number, param1: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public isOverflowMenuShowPending(): boolean;
					public getHeight(): number;
					public getViewGroup(): android.view.ViewGroup;
					public restoreHierarchyState(param0: android.util.SparseArray<any>): void;
					public setDefaultNavigationIcon(param0: android.graphics.drawable.Drawable): void;
					public hasLogo(): boolean;
					public setMenuPrepared(): void;
					public setDisplayOptions(param0: number): void;
					public getDropdownItemCount(): number;
					public isTitleTruncated(): boolean;
					public setLogo(param0: android.graphics.drawable.Drawable): void;
					public setNavigationIcon(param0: android.graphics.drawable.Drawable): void;
					public setIcon(param0: number): void;
					public animateToVisibility(param0: number): void;
					public setVisibility(param0: number): void;
					public initProgress(): void;
					public setCustomView(param0: android.view.View): void;
					public hasExpandedActionView(): boolean;
					public isOverflowMenuShowing(): boolean;
					public showOverflowMenu(): boolean;
					public setDropdownSelectedPosition(param0: number): void;
					public setEmbeddedTabView(param0: android.support.v7.widget.ScrollingTabContainerView): void;
					public setMenuCallbacks(param0: android.support.v7.view.menu.MenuPresenter.Callback, param1: android.support.v7.view.menu.MenuBuilder.Callback): void;
					public setNavigationContentDescription(param0: number): void;
					public getContext(): android.content.Context;
					public getMenu(): android.view.Menu;
					public saveHierarchyState(param0: android.util.SparseArray<any>): void;
					public getDropdownSelectedPosition(): number;
					public setNavigationIcon(param0: number): void;
					public dismissPopupMenus(): void;
					public collapseActionView(): void;
					public setNavigationMode(param0: number): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public initIndeterminateProgress(): void;
					public setNavigationContentDescription(param0: string): void;
					public setSubtitle(param0: string): void;
					public hasEmbeddedTabs(): boolean;
					public getSubtitle(): string;
					public getDisplayOptions(): number;
					public hasIcon(): boolean;
					public setHomeButtonEnabled(param0: boolean): void;
					public setWindowTitle(param0: string): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class DialogTitle extends android.widget.TextView {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onMeasure(param0: number, param1: number): void;
					public onPreDraw(): boolean;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public sendAccessibilityEvent(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class DrawableUtils extends javalangObject {
					public static INSETS_NONE: android.graphics.Rect;
					public static canSafelyMutateDrawable(param0: android.graphics.drawable.Drawable): boolean;
					public static getOpticalBounds(param0: android.graphics.drawable.Drawable): android.graphics.Rect;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class FitWindowsFrameLayout extends android.widget.FrameLayout implements android.support.v7.widget.FitWindowsViewGroup {
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public fitSystemWindows(param0: android.graphics.Rect): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public clearChildFocus(param0: android.view.View): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public setOnFitSystemWindowsListener(param0: android.support.v7.widget.FitWindowsViewGroup.OnFitSystemWindowsListener): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class FitWindowsLinearLayout extends android.widget.LinearLayout implements android.support.v7.widget.FitWindowsViewGroup {
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public fitSystemWindows(param0: android.graphics.Rect): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public clearChildFocus(param0: android.view.View): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public setOnFitSystemWindowsListener(param0: android.support.v7.widget.FitWindowsViewGroup.OnFitSystemWindowsListener): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Rect.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class FitWindowsViewGroup extends javalangObject {
					/**
					 * Constructs a new instance of the android.support.v7.widget.FitWindowsViewGroup interface with the provided implementation.
					 */
					public constructor(implementation: {
						setOnFitSystemWindowsListener(param0: android.support.v7.widget.FitWindowsViewGroup.OnFitSystemWindowsListener): void;
					});
					public setOnFitSystemWindowsListener(param0: android.support.v7.widget.FitWindowsViewGroup.OnFitSystemWindowsListener): void;
				}
				export module FitWindowsViewGroup {
					export class OnFitSystemWindowsListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.FitWindowsViewGroup$OnFitSystemWindowsListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onFitSystemWindows(param0: android.graphics.Rect): void;
						});
						public onFitSystemWindows(param0: android.graphics.Rect): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ListViewCompat extends android.widget.ListView {
					public static INVALID_POSITION: number;
					public static NO_POSITION: number;
					public mMotionPosition: number;
					public lookForSelectablePosition(param0: number, param1: boolean): number;
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public drawSelectorCompat(param0: android.graphics.Canvas): void;
					public clearChildFocus(param0: android.view.View): void;
					public positionSelectorLikeTouchCompat(param0: number, param1: android.view.View, param2: number, param3: number): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public setSelector(param0: android.graphics.drawable.Drawable): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public updateSelectorStateCompat(): void;
					public onTouchEvent(param0: android.view.MotionEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public onRemoteAdapterConnected(): boolean;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public onGlobalLayout(): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public afterTextChanged(param0: android.text.Editable): void;
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
					public drawableStateChanged(): void;
					public onFilterComplete(param0: number): void;
					public requestFitSystemWindows(): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public setSelector(param0: number): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public deferNotifyDataSetChanged(): void;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public measureHeightOfChildrenCompat(param0: number, param1: number, param2: number, param3: number, param4: number): number;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public positionSelectorLikeFocusCompat(param0: number, param1: android.view.View): void;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public dispatchDraw(param0: android.graphics.Canvas): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public touchModeDrawsInPressedStateCompat(): boolean;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public onRemoteAdapterDisconnected(): void;
					public constructor(param0: android.content.Context);
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public positionSelectorCompat(param0: number, param1: android.view.View): void;
					public setSelectorEnabled(param0: boolean): void;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
					public onTouchModeChanged(param0: boolean): void;
					public shouldShowSelectorCompat(): boolean;
				}
				export module ListViewCompat {
					export class GateKeeperDrawable extends android.support.v7.graphics.drawable.DrawableWrapper {
						public draw(param0: android.graphics.Canvas): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
						public constructor();
						public setVisible(param0: boolean, param1: boolean): boolean;
						public setState(param0: native.Array<number>): boolean;
						public setHotspot(param0: number, param1: number): void;
						public setHotspotBounds(param0: number, param1: number, param2: number, param3: number): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
						public constructor(param0: android.graphics.drawable.Drawable);
					}
				}
			}
		}
	}
}

import javaioInputStream = java.io.InputStream;
/// <reference path="./android.content.res.AssetFileDescriptor.d.ts" />
/// <reference path="./android.content.res.AssetManager.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./any.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.content.res.Resources.d.ts" />
/// <reference path="./android.content.res.TypedArray.d.ts" />
/// <reference path="./android.content.res.XmlResourceParser.d.ts" />
/// <reference path="./android.graphics.Movie.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.util.DisplayMetrics.d.ts" />
/// <reference path="./android.util.TypedValue.d.ts" />
/// <reference path="./java.io.InputStream.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ResourcesWrapper extends android.content.res.Resources {
					public getValue(param0: number, param1: android.util.TypedValue, param2: boolean): void;
					public getDimensionPixelSize(param0: number): number;
					public getColorStateList(param0: number): android.content.res.ColorStateList;
					public getStringArray(param0: number): native.Array<string>;
					public constructor(param0: android.content.res.AssetManager, param1: android.util.DisplayMetrics, param2: android.content.res.Configuration, param3: any);
					public openRawResourceFd(param0: number): android.content.res.AssetFileDescriptor;
					public openRawResource(param0: number, param1: android.util.TypedValue): javaioInputStream;
					public getResourceTypeName(param0: number): string;
					public getDrawableForDensity(param0: number, param1: number, param2: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
					public getXml(param0: number): android.content.res.XmlResourceParser;
					public getDrawable(param0: number): android.graphics.drawable.Drawable;
					public openRawResource(param0: number): javaioInputStream;
					public constructor(param0: android.content.res.Resources);
					public getString(param0: number): string;
					public getConfiguration(): android.content.res.Configuration;
					public getColor(param0: number, param1: android.content.res.Resources.Theme): number;
					public getAnimation(param0: number): android.content.res.XmlResourceParser;
					//public getTextArray(param0: number): native.Array<javalangCharSequence>;
					public getBoolean(param0: number): boolean;
					public obtainTypedArray(param0: number): android.content.res.TypedArray;
					public getText(param0: number, param1: string): string;
					public getResourcePackageName(param0: number): string;
					public getValueForDensity(param0: number, param1: number, param2: android.util.TypedValue, param3: boolean): void;
					public getResourceName(param0: number): string;
					public updateConfiguration(param0: android.content.res.Configuration, param1: android.util.DisplayMetrics, param2: any): void;
					public getQuantityString(param0: number, param1: number): string;
					public getInteger(param0: number): number;
					public updateConfiguration(param0: android.content.res.Configuration, param1: android.util.DisplayMetrics): void;
					public getText(param0: number): string;
					public getLayout(param0: number): android.content.res.XmlResourceParser;
					public obtainAttributes(param0: android.util.AttributeSet, param1: native.Array<number>): android.content.res.TypedArray;
					public getIntArray(param0: number): native.Array<number>;
					public getFraction(param0: number, param1: number, param2: number): number;
					public constructor(param0: android.content.res.AssetManager, param1: android.util.DisplayMetrics, param2: android.content.res.Configuration);
					public getString(param0: number, param1: native.Array<javalangObject>): string;
					public getValue(param0: string, param1: android.util.TypedValue, param2: boolean): void;
					public getIdentifier(param0: string, param1: string, param2: string): number;
					public getQuantityString(param0: number, param1: number, param2: native.Array<javalangObject>): string;
					public getDimensionPixelOffset(param0: number): number;
					public getQuantityText(param0: number, param1: number): string;
					public getColorStateList(param0: number, param1: android.content.res.Resources.Theme): android.content.res.ColorStateList;
					public getDisplayMetrics(): android.util.DisplayMetrics;
					public getDrawableForDensity(param0: number, param1: number): android.graphics.drawable.Drawable;
					public parseBundleExtras(param0: android.content.res.XmlResourceParser, param1: android.os.Bundle): void;
					public getResourceEntryName(param0: number): string;
					public getDrawable(param0: number, param1: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
					public parseBundleExtra(param0: string, param1: android.util.AttributeSet, param2: android.os.Bundle): void;
					public getMovie(param0: number): android.graphics.Movie;
					public getColor(param0: number): number;
					public getDimension(param0: number): number;
					public static obtainAttributes(param0: android.content.res.Resources, param1: android.content.res.Resources.Theme, param2: android.util.AttributeSet, param3: native.Array<number>): android.content.res.TypedArray;
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class RtlSpacingHelper extends javalangObject {
					public static UNDEFINED: number;
					public getRight(): number;
					public getEnd(): number;
					public setRelative(param0: number, param1: number): void;
					public getLeft(): number;
					public setDirection(param0: boolean): void;
					public getStart(): number;
					public setAbsolute(param0: number, param1: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.support.v7.widget.ScrollingTabContainerView.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityNodeInfo.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ScrollingTabContainerView extends android.widget.HorizontalScrollView implements android.widget.AdapterView.OnItemSelectedListener {
					public mVisibilityAnim: android.support.v4.view.ViewPropertyAnimatorCompat;
					public mVisAnimListener: android.support.v7.widget.ScrollingTabContainerView.VisibilityAnimListener;
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public addTab(param0: android.support.v7.app.ActionBar.Tab, param1: number, param2: boolean): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public onAttachedToWindow(): void;
					public clearChildFocus(param0: android.view.View): void;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public setTabSelected(param0: number): void;
					public onConfigurationChanged(param0: android.content.res.Configuration): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addTab(param0: android.support.v7.app.ActionBar.Tab, param1: boolean): void;
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public setAllowCollapse(param0: boolean): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public setContentHeight(param0: number): void;
					public animateToVisibility(param0: number): void;
					public childDrawableStateChanged(param0: android.view.View): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public focusSearch(param0: number): android.view.View;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public isTextAlignmentResolved(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public canResolveTextAlignment(): boolean;
					public onItemSelected(param0: android.widget.AdapterView<any>, param1: android.view.View, param2: number, param3: number): void;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public onNothingSelected(param0: android.widget.AdapterView<any>): void;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public onDetachedFromWindow(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public animateToTab(param0: number): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public removeTabAt(param0: number): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public updateTab(param0: number): void;
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public removeAllTabs(): void;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
				}
				export module ScrollingTabContainerView {
					export class TabAdapter extends android.widget.BaseAdapter {
						public isEnabled(param0: number): boolean;
						public getView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						public areAllItemsEnabled(): boolean;
						public getItem(param0: number): javalangObject;
						public getItemId(param0: number): number;
						public getCount(): number;
						public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					}
					export class TabClickListener extends javalangObject implements android.view.View.OnClickListener {
						public onClick(param0: android.view.View): void;
					}
					export class TabView extends android.support.v7.widget.LinearLayoutCompat implements android.view.View.OnLongClickListener {
						public isLayoutRequested(): boolean;
						public canResolveLayoutDirection(): boolean;
						public onStopNestedScroll(param0: android.view.View): void;
						public getParentForAccessibility(): android.view.ViewParent;
						public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
						public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public requestTransparentRegion(param0: android.view.View): void;
						public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
						public constructor(param0: android.content.Context);
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
						public recomputeViewAttributes(param0: android.view.View): void;
						public isTextAlignmentResolved(): boolean;
						public addView(param0: android.view.View, param1: number, param2: number): void;
						public addView(param0: android.view.View): void;
						public focusableViewAvailable(param0: android.view.View): void;
						public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
						public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public onInitializeAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): void;
						public showContextMenuForChild(param0: android.view.View): boolean;
						public onMeasure(param0: number, param1: number): void;
						public getTextDirection(): number;
						public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
						public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
						public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						public focusSearch(param0: number): android.view.View;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getParent(): android.view.ViewParent;
						public isLayoutDirectionResolved(): boolean;
						public getTab(): android.support.v7.app.ActionBar.Tab;
						public removeView(param0: android.view.View): void;
						public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
						public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
						public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public requestLayout(): void;
						public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
						public isTextDirectionResolved(): boolean;
						public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
						public addView(param0: android.view.View, param1: number): void;
						public onLongClick(param0: android.view.View): boolean;
						public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
						public childDrawableStateChanged(param0: android.view.View): void;
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
						public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
						public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
						public setSelected(param0: boolean): void;
						public update(): void;
						public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
						public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
						public constructor(param0: android.support.v7.widget.ScrollingTabContainerView, param1: android.content.Context, param2: android.support.v7.app.ActionBar.Tab, param3: boolean);
						public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						public requestFitSystemWindows(): void;
						public clearChildFocus(param0: android.view.View): void;
						public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
						public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
						public getTextAlignment(): number;
						public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
						public bringChildToFront(param0: android.view.View): void;
						public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
						public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
						public onInitializeAccessibilityNodeInfo(param0: android.view.accessibility.AccessibilityNodeInfo): void;
						public bindTab(param0: android.support.v7.app.ActionBar.Tab): void;
						public focusSearch(param0: android.view.View, param1: number): android.view.View;
						public createContextMenu(param0: android.view.ContextMenu): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
					export class VisibilityAnimListener extends javalangObject {
						public constructor(param0: android.support.v7.widget.ScrollingTabContainerView);
						public onAnimationCancel(param0: android.view.View): void;
						public onAnimationEnd(param0: android.view.View): void;
						public withFinalVisibility(param0: android.support.v4.view.ViewPropertyAnimatorCompat, param1: number): android.support.v7.widget.ScrollingTabContainerView.VisibilityAnimListener;
						public onAnimationStart(param0: android.view.View): void;
					}
				}
			}
		}
	}
}

import javautilWeakHashMap = java.util.WeakHashMap;
/// <reference path="./android.app.SearchableInfo.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.database.Cursor.d.ts" />
/// <reference path="./android.support.v7.widget.SearchView.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.Filter.d.ts" />
/// <reference path="./android.widget.ImageView.d.ts" />
/// <reference path="./android.widget.TextView.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.WeakHashMap.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class SuggestionsAdapter extends android.support.v4.widget.ResourceCursorAdapter implements android.view.View.OnClickListener {
					public constructor(param0: android.content.Context, param1: android.database.Cursor);
					public constructor(param0: android.content.Context, param1: android.database.Cursor, param2: boolean);
					public getView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					public constructor(param0: android.content.Context, param1: android.support.v7.widget.SearchView, param2: android.app.SearchableInfo, param3: javautilWeakHashMap<any, any>);
					public notifyDataSetChanged(): void;
					public changeCursor(param0: android.database.Cursor): void;
					public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					public constructor();
					public runQueryOnBackgroundThread(param0: string): android.database.Cursor;
					public close(): void;
					public constructor(param0: android.content.Context, param1: number, param2: android.database.Cursor);
					public constructor(param0: android.content.Context, param1: number, param2: android.database.Cursor, param3: boolean);
					public convertToString(param0: android.database.Cursor): string;
					public getCursor(): android.database.Cursor;
					public getFilter(): android.widget.Filter;
					public getQueryRefinement(): number;
					public areAllItemsEnabled(): boolean;
					public notifyDataSetInvalidated(): void;
					public constructor(param0: android.content.Context, param1: number, param2: android.database.Cursor, param3: number);
					public setQueryRefinement(param0: number): void;
					public onClick(param0: android.view.View): void;
					public newView(param0: android.content.Context, param1: android.database.Cursor, param2: android.view.ViewGroup): android.view.View;
					public hasStableIds(): boolean;
					public bindView(param0: android.view.View, param1: android.content.Context, param2: android.database.Cursor): void;
					public static getColumnString(param0: android.database.Cursor, param1: string): string;
					public isEnabled(param0: number): boolean;
					public constructor(param0: android.content.Context, param1: android.database.Cursor, param2: number);
				}
				export module SuggestionsAdapter {
					export class ChildViewCache extends javalangObject {
						public mText1: android.widget.TextView;
						public mText2: android.widget.TextView;
						public mIcon1: android.widget.ImageView;
						public mIcon2: android.widget.ImageView;
						public mIconRefine: android.widget.ImageView;
						public constructor(param0: android.view.View);
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ThemeUtils extends javalangObject {
					public static getThemeAttrColor(param0: android.content.Context, param1: number): number;
					public static createDisabledStateList(param0: number, param1: number): android.content.res.ColorStateList;
					public static getThemeAttrColorStateList(param0: android.content.Context, param1: number): android.content.res.ColorStateList;
					public static getDisabledThemeAttrColor(param0: android.content.Context, param1: number): number;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.database.DataSetObserver.d.ts" />
/// <reference path="./android.view.LayoutInflater.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ThemedSpinnerAdapter extends javalangObject implements android.widget.SpinnerAdapter {
					/**
					 * Constructs a new instance of the android.support.v7.widget.ThemedSpinnerAdapter interface with the provided implementation.
					 */
					public constructor(implementation: {
						setDropDownViewTheme(param0: android.content.res.Resources.Theme): void;
						getDropDownViewTheme(): android.content.res.Resources.Theme;
						getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						registerDataSetObserver(param0: android.database.DataSetObserver): void;
						unregisterDataSetObserver(param0: android.database.DataSetObserver): void;
						getCount(): number;
						getItem(param0: number): javalangObject;
						getItemId(param0: number): number;
						hasStableIds(): boolean;
						getView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
						getItemViewType(param0: number): number;
						getViewTypeCount(): number;
						isEmpty(): boolean;
					});
					public static NO_SELECTION: number;
					public static IGNORE_ITEM_VIEW_TYPE: number;
					public isEmpty(): boolean;
					public getCount(): number;
					public getViewTypeCount(): number;
					public getDropDownViewTheme(): android.content.res.Resources.Theme;
					public getView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					public getItem(param0: number): javalangObject;
					public getDropDownView(param0: number, param1: android.view.View, param2: android.view.ViewGroup): android.view.View;
					public hasStableIds(): boolean;
					public setDropDownViewTheme(param0: android.content.res.Resources.Theme): void;
					public unregisterDataSetObserver(param0: android.database.DataSetObserver): void;
					public getItemViewType(param0: number): number;
					public registerDataSetObserver(param0: android.database.DataSetObserver): void;
					public getItemId(param0: number): number;
				}
				export module ThemedSpinnerAdapter {
					export class Helper extends javalangObject {
						public getDropDownViewInflater(): android.view.LayoutInflater;
						public setDropDownViewTheme(param0: android.content.res.Resources.Theme): void;
						public constructor(param0: android.content.Context);
						public getDropDownViewTheme(): android.content.res.Resources.Theme;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Resources.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class TintContextWrapper extends android.content.ContextWrapper {
					public getResources(): android.content.res.Resources;
					public static wrap(param0: android.content.Context): android.content.Context;
				}
			}
		}
	}
}

/// <reference path="./android.content.res.ColorStateList.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class TintInfo extends javalangObject {
					public mTintList: android.content.res.ColorStateList;
					public mTintMode: android.graphics.PorterDuff.Mode;
					public mHasTintMode: boolean;
					public mHasTintList: boolean;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.AssetManager.d.ts" />
/// <reference path="./any.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.content.res.Resources.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.DisplayMetrics.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class TintResources extends android.support.v7.widget.ResourcesWrapper {
					public getDrawable(param0: number, param1: android.content.res.Resources.Theme): android.graphics.drawable.Drawable;
					public constructor(param0: android.content.res.AssetManager, param1: android.util.DisplayMetrics, param2: android.content.res.Configuration);
					public getDrawable(param0: number): android.graphics.drawable.Drawable;
					public constructor(param0: android.content.res.Resources);
					public constructor(param0: android.content.res.AssetManager, param1: android.util.DisplayMetrics, param2: android.content.res.Configuration, param3: any);
					public constructor(param0: android.content.Context, param1: android.content.res.Resources);
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.ColorStateList.d.ts" />
/// <reference path="./android.content.res.Resources.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.util.TypedValue.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class TintTypedArray extends javalangObject {
					public getNonResourceString(param0: number): string;
					public recycle(): void;
					public getDimension(param0: number, param1: number): number;
					public getFraction(param0: number, param1: number, param2: number, param3: number): number;
					public getText(param0: number): string;
					public static obtainStyledAttributes(param0: android.content.Context, param1: android.util.AttributeSet, param2: native.Array<number>): android.support.v7.widget.TintTypedArray;
					public getColor(param0: number, param1: number): number;
					public getColorStateList(param0: number): android.content.res.ColorStateList;
					public getDimensionPixelSize(param0: number, param1: number): number;
					public getChangingConfigurations(): number;
					public static obtainStyledAttributes(param0: android.content.Context, param1: android.util.AttributeSet, param2: native.Array<number>, param3: number, param4: number): android.support.v7.widget.TintTypedArray;
					public getResources(): android.content.res.Resources;
					public hasValue(param0: number): boolean;
					public getDimensionPixelOffset(param0: number, param1: number): number;
					public getType(param0: number): number;
					public getLayoutDimension(param0: number, param1: string): number;
					public getResourceId(param0: number, param1: number): number;
					public getValue(param0: number, param1: android.util.TypedValue): boolean;
					public getDrawable(param0: number): android.graphics.drawable.Drawable;
					public getInteger(param0: number, param1: number): number;
					public getDrawableIfKnown(param0: number): android.graphics.drawable.Drawable;
					public peekValue(param0: number): android.util.TypedValue;
					public getString(param0: number): string;
					public getIndex(param0: number): number;
					public getBoolean(param0: number, param1: boolean): boolean;
					public length(): number;
					public getIndexCount(): number;
					public getPositionDescription(): string;
					public getTextArray(param0: number): native.Array<javalangCharSequence>;
					public getInt(param0: number, param1: number): number;
					public getFloat(param0: number, param1: number): number;
					public getLayoutDimension(param0: number, param1: number): number;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.support.v7.widget.ScrollingTabContainerView.d.ts" />
/// <reference path="./android.support.v7.widget.Toolbar.d.ts" />
/// <reference path="./android.util.SparseArray.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.SpinnerAdapter.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ToolbarWidgetWrapper extends javalangObject implements android.support.v7.widget.DecorToolbar {
					public getTitle(): string;
					public setLogo(param0: number): void;
					public getNavigationMode(): number;
					public setTitle(param0: string): void;
					public setDropdownParams(param0: android.widget.SpinnerAdapter, param1: android.widget.AdapterView.OnItemSelectedListener): void;
					public setMenu(param0: android.view.Menu, param1: android.support.v7.view.menu.MenuPresenter.Callback): void;
					public setDefaultNavigationContentDescription(param0: number): void;
					public getCustomView(): android.view.View;
					public hideOverflowMenu(): boolean;
					public getVisibility(): number;
					public setCollapsible(param0: boolean): void;
					public setWindowCallback(param0: android.view.Window.Callback): void;
					public setIcon(param0: android.graphics.drawable.Drawable): void;
					public canShowOverflowMenu(): boolean;
					public setupAnimatorToVisibility(param0: number, param1: number): android.support.v4.view.ViewPropertyAnimatorCompat;
					public isOverflowMenuShowPending(): boolean;
					public getHeight(): number;
					public getViewGroup(): android.view.ViewGroup;
					public restoreHierarchyState(param0: android.util.SparseArray<any>): void;
					public setDefaultNavigationIcon(param0: android.graphics.drawable.Drawable): void;
					public hasLogo(): boolean;
					public setMenuPrepared(): void;
					public setDisplayOptions(param0: number): void;
					public getDropdownItemCount(): number;
					public isTitleTruncated(): boolean;
					public constructor(param0: android.support.v7.widget.Toolbar, param1: boolean);
					public setLogo(param0: android.graphics.drawable.Drawable): void;
					public setNavigationIcon(param0: android.graphics.drawable.Drawable): void;
					public setIcon(param0: number): void;
					public animateToVisibility(param0: number): void;
					public setVisibility(param0: number): void;
					public initProgress(): void;
					public setCustomView(param0: android.view.View): void;
					public hasExpandedActionView(): boolean;
					public isOverflowMenuShowing(): boolean;
					public showOverflowMenu(): boolean;
					public setDropdownSelectedPosition(param0: number): void;
					public setEmbeddedTabView(param0: android.support.v7.widget.ScrollingTabContainerView): void;
					public setMenuCallbacks(param0: android.support.v7.view.menu.MenuPresenter.Callback, param1: android.support.v7.view.menu.MenuBuilder.Callback): void;
					public setNavigationContentDescription(param0: number): void;
					public getContext(): android.content.Context;
					public getMenu(): android.view.Menu;
					public saveHierarchyState(param0: android.util.SparseArray<any>): void;
					public getDropdownSelectedPosition(): number;
					public setNavigationIcon(param0: number): void;
					public dismissPopupMenus(): void;
					public collapseActionView(): void;
					public setNavigationMode(param0: number): void;
					public setBackgroundDrawable(param0: android.graphics.drawable.Drawable): void;
					public initIndeterminateProgress(): void;
					public constructor(param0: android.support.v7.widget.Toolbar, param1: boolean, param2: number, param3: number);
					public setNavigationContentDescription(param0: string): void;
					public setSubtitle(param0: string): void;
					public hasEmbeddedTabs(): boolean;
					public getSubtitle(): string;
					public getDisplayOptions(): number;
					public hasIcon(): boolean;
					public setHomeButtonEnabled(param0: boolean): void;
					public setWindowTitle(param0: string): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.widget.ViewStubCompat.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.LayoutInflater.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ViewStubCompat extends android.view.View {
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public setOnInflateListener(param0: android.support.v7.widget.ViewStubCompat.OnInflateListener): void;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public setInflatedId(param0: number): void;
					public getInflatedId(): number;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public setLayoutResource(param0: number): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public getLayoutResource(): number;
					public sendAccessibilityEvent(param0: number): void;
					public dispatchDraw(param0: android.graphics.Canvas): void;
					//public draw(param0: android.graphics.Canvas): void;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public setLayoutInflater(param0: android.view.LayoutInflater): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public getLayoutInflater(): android.view.LayoutInflater;
					public inflate(): android.view.View;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public setVisibility(param0: number): void;
					public static inflate(param0: android.content.Context, param1: number, param2: android.view.ViewGroup): android.view.View;
				}
				export module ViewStubCompat {
					export class OnInflateListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.ViewStubCompat$OnInflateListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onInflate(param0: android.support.v7.widget.ViewStubCompat, param1: android.view.View): void;
						});
						public onInflate(param0: android.support.v7.widget.ViewStubCompat, param1: android.view.View): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.view.View.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class ViewUtils extends javalangObject {
					public static makeOptionalFitsSystemWindows(param0: android.view.View): void;
					public static isLayoutRtl(param0: android.view.View): boolean;
					public static computeFitSystemWindows(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Rect): void;
					public static combineMeasuredStates(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module common {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

import javalangEnum = java.lang.Enum;
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class CollectionChangeAction extends javalangEnum<any> {
					public static ADD: com.telerik.android.common.CollectionChangeAction;
					public static REMOVE: com.telerik.android.common.CollectionChangeAction;
					public static RESET: com.telerik.android.common.CollectionChangeAction;
					public static REPLACE: com.telerik.android.common.CollectionChangeAction;
					public static MOVE: com.telerik.android.common.CollectionChangeAction;
					public static valueOf(param0: string): com.telerik.android.common.CollectionChangeAction;
					public static values(): native.Array<com.telerik.android.common.CollectionChangeAction>;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class CollectionChangeListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.common.CollectionChangeListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
					});
					public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangeAction.d.ts" />
/// <reference path="./com.telerik.android.common.ObservableCollection.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class CollectionChangedEvent extends javalangObject {
					public getSource(): com.telerik.android.common.ObservableCollection;
					public getOldItems(): javautilList<any>;
					public constructor(param0: com.telerik.android.common.ObservableCollection, param1: com.telerik.android.common.CollectionChangeAction);
					public getNewIndex(): number;
					public getOldIndex(): number;
					public constructor(param0: com.telerik.android.common.ObservableCollection, param1: com.telerik.android.common.CollectionChangeAction, param2: javautilList<any>, param3: javautilList<any>, param4: number, param5: number);
					public getNewItems(): javautilList<any>;
					public action(): com.telerik.android.common.CollectionChangeAction;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class DataTuple extends javalangObject {
					public firstValue: javalangObject;
					public secondValue: javalangObject;
					public thirdValue: javalangObject;
					public toString(): string;
					public constructor(param0: javalangObject, param1: javalangObject, param2: javalangObject);
					public constructor(param0: javalangObject, param1: javalangObject);
					public constructor(param0: javalangObject);
				}
			}
		}
	}
}

import javautilCalendar = java.util.Calendar;
/// <reference path="./com.telerik.android.common.TimeSpan.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class DateTimeExtensions extends javalangObject {
					public static getQuarterOfYear(param0: javautilCalendar): number;
					public static getSecondOfYear(param0: javautilCalendar): number;
					public constructor();
					public static getMinuteOfYear(param0: javautilCalendar): number;
					public static getHourOfYear(param0: javautilCalendar): number;
					public static subtract(param0: javautilCalendar, param1: javautilCalendar): com.telerik.android.common.TimeSpan;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class DependencyPropertyChangedListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.common.DependencyPropertyChangedListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onPropertyChanged(param0: javalangObject, param1: number, param2: javalangObject): void;
					});
					public onPropertyChanged(param0: javalangObject, param1: number, param2: javalangObject): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class Function extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.common.Function interface with the provided implementation.
					 */
					public constructor(implementation: {
						apply(param0: javalangObject): javalangObject;
					});
					public apply(param0: javalangObject): javalangObject;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class Function2 extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.common.Function2 interface with the provided implementation.
					 */
					public constructor(implementation: {
						apply(param0: javalangObject, param1: javalangObject): javalangObject;
					});
					public apply(param0: javalangObject, param1: javalangObject): javalangObject;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Procedure.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class Function2Async extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.common.Function2Async interface with the provided implementation.
					 */
					public constructor(implementation: {
						apply(param0: javalangObject, param1: javalangObject, param2: com.telerik.android.common.Procedure): void;
					});
					public apply(param0: javalangObject, param1: javalangObject, param2: com.telerik.android.common.Procedure): void;
				}
			}
		}
	}
}

import javautilCollection = java.util.Collection;
import javautilIterator = java.util.Iterator;
import javautilListIterator = java.util.ListIterator;
/// <reference path="./com.telerik.android.common.CollectionChangeListener.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class ObservableCollection extends javautilArrayList<any> {
					public removeRange(param0: number, param1: number): void;
					public listIterator(param0: number): javautilListIterator<any>;
					public containsAll(param0: javautilCollection<any>): boolean;
					public isEmpty(): boolean;
					public retainAll(param0: javautilCollection<any>): boolean;
					public addAll(param0: javautilCollection<any>): boolean;
					public toArray(): native.Array<javalangObject>;
					public iterator(): javautilIterator<any>;
					public size(): number;
					public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
					public remove(param0: javalangObject): boolean;
					public removeAll(param0: javautilCollection<any>): boolean;
					public constructor();
					public indexOf(param0: javalangObject): number;
					public clear(): void;
					public lastIndexOf(param0: javalangObject): number;
					public beginUpdate(): void;
					public endUpdate(): void;
					public hashCode(): number;
					public constructor(param0: number);
					public addCollectionChangeListener(param0: com.telerik.android.common.CollectionChangeListener): void;
					public remove(param0: number): javalangObject;
					public add(param0: number, param1: javalangObject): void;
					public addAll(param0: number, param1: javautilCollection<any>): boolean;
					public notifyListeners(param0: com.telerik.android.common.CollectionChangedEvent): void;
					public equals(param0: javalangObject): boolean;
					public removeCollectionChangeListener(param0: com.telerik.android.common.CollectionChangeListener): void;
					public add(param0: javalangObject): boolean;
					public set(param0: number, param1: javalangObject): javalangObject;
					public listIterator(): javautilListIterator<any>;
					public contains(param0: javalangObject): boolean;
					public subList(param0: number, param1: number): javautilList<any>;
					public get(param0: number): javalangObject;
					public constructor(param0: javautilCollection<any>);
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class Orientation extends javalangEnum<any> {
					public static HORIZONTAL: com.telerik.android.common.Orientation;
					public static VERTICAL: com.telerik.android.common.Orientation;
					public static valueOf(param0: string): com.telerik.android.common.Orientation;
					public static values(): native.Array<com.telerik.android.common.Orientation>;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class Procedure extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.common.Procedure interface with the provided implementation.
					 */
					public constructor(implementation: {
						apply(param0: javalangObject): void;
					});
					public apply(param0: javalangObject): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class Procedure2 extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.common.Procedure2 interface with the provided implementation.
					 */
					public constructor(implementation: {
						apply(param0: javalangObject, param1: javalangObject): void;
					});
					public apply(param0: javalangObject, param1: javalangObject): void;
				}
			}
		}
	}
}

import javautilHashMap = java.util.HashMap;
/// <reference path="./com.telerik.android.common.DependencyPropertyChangedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export abstract class PropertyManager extends javalangObject {
					public static LOCAL_VALUE: number;
					public static PALETTE_VALUE: number;
					public static DEFAULT_VALUE: number;
					public static UNSET_VALUE: javalangObject;
					public static registerProperty(param0: javalangObject, param1: com.telerik.android.common.DependencyPropertyChangedListener): number;
					public resetPropertyValue(param0: number): void;
					public constructor();
					public getValue(param0: number): javalangObject;
					public setValue(param0: number, param1: javalangObject): void;
					public setValue(param0: number, param1: number, param2: javalangObject): void;
				}
				export module PropertyManager {
					export class PropertyBag extends javalangObject {
						public constructor(param0: javalangObject);
						public resolveValue(): javalangObject;
						public setValueForKey(param0: number, param1: javalangObject): void;
					}
					export class PropertyMetadata extends javalangObject {
						public propertyBags: javautilHashMap<any, any>;
						public constructor(param0: javalangObject, param1: com.telerik.android.common.DependencyPropertyChangedListener);
						public defaultValue(): javalangObject;
						public getListener(): com.telerik.android.common.DependencyPropertyChangedListener;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class RadThickness extends javalangObject {
					public left: number;
					public top: number;
					public right: number;
					public bottom: number;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public clone(): javalangObject;
					public constructor();
					public equals(param0: javalangObject): boolean;
					public clone(): com.telerik.android.common.RadThickness;
					public static getEmpty(): com.telerik.android.common.RadThickness;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class TimeSpan extends javalangObject {
					public static fromDays(param0: number): com.telerik.android.common.TimeSpan;
					public static fromMinutes(param0: number): com.telerik.android.common.TimeSpan;
					public static fromHours(param0: number): com.telerik.android.common.TimeSpan;
					public constructor(param0: javautilCalendar, param1: javautilCalendar);
					public constructor();
					public getMillis(): number;
					public compareTo(param0: javalangObject): number;
					public static fromMilliseconds(param0: number): com.telerik.android.common.TimeSpan;
					public static fromSeconds(param0: number): com.telerik.android.common.TimeSpan;
					public getTotalDays(): number;
					public static getZero(): com.telerik.android.common.TimeSpan;
				}
			}
		}
	}
}

import androidgraphicsRectF = android.graphics.RectF;
import androidgraphicsRect = android.graphics.Rect;
import androidviewView = android.view.View;
import androidappActivity = android.app.Activity;
import androidcontentContext = android.content.Context;
/// <reference path="./android.app.Activity.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export class Util extends javalangObject {
					public static getLayoutPart(param0: androidappActivity, param1: number, param2: javalangClass<any>, param3: boolean): javalangObject;
					public static getLayoutPart(param0: androidappActivity, param1: number, param2: javalangClass<any>): javalangObject;
					public static generateDummyText(param0: string): string;
					public static Equals(param0: javalangObject, param1: javalangObject): boolean;
					public static isNullOrEmpty(param0: string): boolean;
					public static toString(param0: javalangObject): string;
					public static getLayoutPart(param0: androidviewView, param1: number, param2: javalangClass<any>): javalangObject;
					public static RectFToRect(param0: androidgraphicsRectF): androidgraphicsRect;
					public toString(): string;
					public static getDimen(param0: number, param1: number): number;
					public constructor();
					public static convertToRectF(param0: com.telerik.android.common.math.RadRect): androidgraphicsRectF;
					public static generateViewId(): number;
					public static getLayoutPart(param0: androidviewView, param1: number, param2: javalangClass<any>, param3: boolean): javalangObject;
					public static createViewFromXML(param0: number, param1: javalangClass<any>, param2: androidcontentContext): javalangObject;
					public static getDP(param0: number): number;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module common {
				export module animations {
					export class AnimationEasingHelper extends javalangObject {
						public constructor();
						public static circularEaseOut(param0: number, param1: number, param2: number, param3: number): number;
						public static sinusoidalEaseInOut(param0: number, param1: number, param2: number, param3: number): number;
						public static cubicEaseIn(param0: number, param1: number, param2: number, param3: number): number;
						public static quadraticEaseInOut(param0: number, param1: number, param2: number, param3: number): number;
						public static quarticEaseIn(param0: number, param1: number, param2: number, param3: number): number;
						public static quadraticEaseOut(param0: number, param1: number, param2: number, param3: number): number;
						public static exponentialEaseIn(param0: number, param1: number, param2: number, param3: number): number;
						public static exponentialEaseOut(param0: number, param1: number, param2: number, param3: number): number;
						public static quadraticEaseIn(param0: number, param1: number, param2: number, param3: number): number;
						public static quarticEaseOut(param0: number, param1: number, param2: number, param3: number): number;
						public static quarticEaseInOut(param0: number, param1: number, param2: number, param3: number): number;
						public static cubicEaseInOut(param0: number, param1: number, param2: number, param3: number): number;
						public static sinusoidalEaseOut(param0: number, param1: number, param2: number, param3: number): number;
						public static cubicEaseOut(param0: number, param1: number, param2: number, param3: number): number;
						public static quinticEaseIn(param0: number, param1: number, param2: number, param3: number): number;
						public static quinticEaseOut(param0: number, param1: number, param2: number, param3: number): number;
						public static exponentialEaseInOut(param0: number, param1: number, param2: number, param3: number): number;
						public static circularEaseInOut(param0: number, param1: number, param2: number, param3: number): number;
						public static quinticEaseInOut(param0: number, param1: number, param2: number, param3: number): number;
						public static linear(param0: number, param1: number, param2: number, param3: number): number;
						public static sinusoidalEaseIn(param0: number, param1: number, param2: number, param3: number): number;
						public static circularEaseIn(param0: number, param1: number, param2: number, param3: number): number;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module animations {
					export class EasingType extends javalangEnum<any> {
						public static Linear: com.telerik.android.common.animations.EasingType;
						public static QuadraticIn: com.telerik.android.common.animations.EasingType;
						public static QuadraticOut: com.telerik.android.common.animations.EasingType;
						public static QuadraticInOut: com.telerik.android.common.animations.EasingType;
						public static CubicIn: com.telerik.android.common.animations.EasingType;
						public static CubicOut: com.telerik.android.common.animations.EasingType;
						public static CubicInOut: com.telerik.android.common.animations.EasingType;
						public static QuarticIn: com.telerik.android.common.animations.EasingType;
						public static QuarticOut: com.telerik.android.common.animations.EasingType;
						public static QuarticInOut: com.telerik.android.common.animations.EasingType;
						public static QuinticIn: com.telerik.android.common.animations.EasingType;
						public static QuinticOut: com.telerik.android.common.animations.EasingType;
						public static QuinticInOut: com.telerik.android.common.animations.EasingType;
						public static SinusoidalIn: com.telerik.android.common.animations.EasingType;
						public static SinusoidalOut: com.telerik.android.common.animations.EasingType;
						public static SinusoidalInOut: com.telerik.android.common.animations.EasingType;
						public static ExponentialIn: com.telerik.android.common.animations.EasingType;
						public static ExponentialOut: com.telerik.android.common.animations.EasingType;
						public static ExponentialInOut: com.telerik.android.common.animations.EasingType;
						public static CircularIn: com.telerik.android.common.animations.EasingType;
						public static CircularOut: com.telerik.android.common.animations.EasingType;
						public static CircularInOut: com.telerik.android.common.animations.EasingType;
						public static valueOf(param0: string): com.telerik.android.common.animations.EasingType;
						public static values(): native.Array<com.telerik.android.common.animations.EasingType>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					}
				}
			}
		}
	}
}

import javalangError = java.lang.Error;
import javalangThrowable = java.lang.Throwable;
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.lang.Throwable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module exceptions {
					export class MissingLayoutPartException extends javalangError {
						public constructor();
						public constructor(param0: javalangThrowable);
						public constructor(param0: string, param1: javalangThrowable, param2: boolean, param3: boolean);
						public constructor(param0: string, param1: javalangThrowable);
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.lang.Throwable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module exceptions {
					export class WrongLayoutPartTypeException extends javalangError {
						public constructor();
						public constructor(param0: javalangThrowable);
						public constructor(param0: string, param1: javalangThrowable, param2: boolean, param3: boolean);
						public constructor(param0: string, param1: javalangThrowable);
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module licensing {
					export class LicensingProvider extends javalangObject {
						public constructor();
						public static verify(param0: androidcontentContext): void;
						public static licenseRequired(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module licensing {
					export class TelerikLicense extends javalangObject {
						public constructor();
						public static verify(param0: androidcontentContext): void;
						public static licenseRequired(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module math {
					export class RadCircle extends javalangObject {
						public centerX: number;
						public centerY: number;
						public radius: number;
						public constructor();
						public constructor(param0: com.telerik.android.common.math.RadPoint, param1: number);
						public center(): com.telerik.android.common.math.RadPoint;
						public getBounds(): com.telerik.android.common.math.RadRect;
						public constructor(param0: number, param1: number, param2: number);
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module math {
					export class RadLine extends javalangObject {
						public x1: number;
						public x2: number;
						public y1: number;
						public y2: number;
						public constructor(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.android.common.math.RadPoint);
						public static round(param0: com.telerik.android.common.math.RadLine): com.telerik.android.common.math.RadLine;
						public constructor(param0: number, param1: number, param2: number, param3: number);
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPolarCoordinates.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module math {
					export class RadMath extends javalangObject {
						public static DEG_TO_RAD_FACTOR: number;
						public static RAD_TO_DEG_FACTOR: number;
						public static EPSILON: number;
						public static areClose(param0: number, param1: number): boolean;
						public static getPolarCoordinates(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.android.common.math.RadPoint): com.telerik.android.common.math.RadPolarCoordinates;
						public static areClose(param0: number, param1: number, param2: number): boolean;
						public static isOne(param0: number): boolean;
						public static getRotatedSize(param0: com.telerik.android.common.math.RadSize, param1: number): com.telerik.android.common.math.RadSize;
						public static getPointDistance(param0: number, param1: number, param2: number, param3: number): number;
						public static isZero(param0: number): boolean;
						public static getArcPoint(param0: number, param1: com.telerik.android.common.math.RadPoint, param2: number): com.telerik.android.common.math.RadPoint;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module math {
					export class RadPoint extends javalangObject {
						public static getInfinityPoint(): com.telerik.android.common.math.RadPoint;
						public constructor();
						public static round(param0: com.telerik.android.common.math.RadPoint): com.telerik.android.common.math.RadPoint;
						public equals(param0: javalangObject): boolean;
						public getX(): number;
						public getY(): number;
						public constructor(param0: number, param1: number);
						public toString(): string;
						public static getEmpty(): com.telerik.android.common.math.RadPoint;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module common {
				export module math {
					export class RadPolarCoordinates extends javalangObject {
						public angle: number;
						public radius: number;
						public constructor(param0: number, param1: number);
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module math {
					export class RadPolarVector extends javalangObject {
						public centerX: number;
						public centerY: number;
						public pointX: number;
						public pointY: number;
						public angle: number;
						public point(): com.telerik.android.common.math.RadPoint;
						public constructor();
						public center(): com.telerik.android.common.math.RadPoint;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.RadThickness.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module math {
					export class RadRect extends javalangObject {
						public getLocation(): com.telerik.android.common.math.RadPoint;
						public constructor();
						public equals(param0: javalangObject): boolean;
						public contains(param0: number, param1: number): boolean;
						public getX(): number;
						public constructor(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.android.common.math.RadPoint);
						public getCenter(): com.telerik.android.common.math.RadPoint;
						public getRight(): number;
						public static getEmpty(): com.telerik.android.common.math.RadRect;
						public static centerRect(param0: com.telerik.android.common.math.RadRect, param1: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
						public getHeight(): number;
						public toString(): string;
						public constructor(param0: number, param1: number, param2: number, param3: number);
						public getBottom(): number;
						public intersectsWith(param0: com.telerik.android.common.math.RadRect): boolean;
						public getWidth(): number;
						public static inflate(param0: com.telerik.android.common.math.RadRect, param1: com.telerik.android.common.RadThickness): com.telerik.android.common.math.RadRect;
						public static round(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
						public contains(param0: com.telerik.android.common.math.RadRect): boolean;
						public getY(): number;
						public isSizeValid(): boolean;
						public constructor(param0: number, param1: number);
						public static toSquare(param0: com.telerik.android.common.math.RadRect, param1: boolean): com.telerik.android.common.math.RadRect;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module common {
				export module math {
					export class RadSize extends javalangObject {
						public constructor();
						public halfWidth(): number;
						public halfHeight(): number;
						public getWidth(): number;
						public equals(param0: javalangObject): boolean;
						public static getEmpty(): com.telerik.android.common.math.RadSize;
						public getHeight(): number;
						public static getInfinitySize(): com.telerik.android.common.math.RadSize;
						public constructor(param0: number, param1: number);
						public static getInvalid(): com.telerik.android.common.math.RadSize;
					}
				}
			}
		}
	}
}

import androidwidgetAdapterViewOnItemClickListener = android.widget.AdapterView.OnItemClickListener;
import androidwidgetAdapterViewOnItemSelectedListener = android.widget.AdapterView.OnItemSelectedListener;
import androidwidgetAdapterView = android.widget.AdapterView;
import androidviewViewGroup = android.view.ViewGroup;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./com.telerik.android.data.CurrentItemChangedInfo.d.ts" />
/// <reference path="./com.telerik.android.data.DataChangeInfo.d.ts" />
/// <reference path="./com.telerik.android.data.SelectionChangeInfo.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class AndroidDataSourceAdapter extends com.telerik.android.data.DataSourceAdapterBase implements androidwidgetAdapterViewOnItemClickListener, androidwidgetAdapterViewOnItemSelectedListener {
					public dataChanged(param0: com.telerik.android.data.DataChangeInfo): void;
					public onItemSelected(param0: androidwidgetAdapterView<any>, param1: androidviewView, param2: number, param3: number): void;
					public onNothingSelected(param0: androidwidgetAdapterView<any>): void;
					public areAllItemsEnabled(): boolean;
					public constructor();
					public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					public constructor(param0: javautilList<any>, param1: androidcontentContext);
					public isEnabled(param0: number): boolean;
					public selectionChanged(param0: com.telerik.android.data.SelectionChangeInfo): void;
					public constructor(param0: javautilList<any>, param1: androidcontentContext, param2: androidwidgetAdapterView<any>);
					public onItemClick(param0: androidwidgetAdapterView<any>, param1: androidviewView, param2: number, param3: number): void;
					public currentItemChanged(param0: com.telerik.android.data.CurrentItemChangedInfo): void;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module data {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.data.CurrentItemChangedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class CurrencyService extends javalangObject {
					public addCurrentChangedListener(param0: com.telerik.android.data.CurrentItemChangedListener): void;
					public getCurrentItem(): javalangObject;
					public isCurrent(param0: javalangObject): boolean;
					public movePrevious(): boolean;
					public constructor(param0: javautilList<any>);
					public removeCurrentChangedListener(param0: com.telerik.android.data.CurrentItemChangedListener): boolean;
					public setCurrentItem(param0: javalangObject): void;
					public moveFirst(): void;
					public onCurrentItemChanged(param0: javalangObject, param1: javalangObject): void;
					public moveNext(): boolean;
					public moveLast(): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class CurrentItemChangedInfo extends javalangObject {
					public constructor(param0: javalangObject, param1: javalangObject);
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.data.CurrentItemChangedInfo.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class CurrentItemChangedListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.data.CurrentItemChangedListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						currentItemChanged(param0: com.telerik.android.data.CurrentItemChangedInfo): void;
					});
					public currentItemChanged(param0: com.telerik.android.data.CurrentItemChangedInfo): void;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module data {
				export class DataChangeInfo extends javalangObject {
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.data.DataChangeInfo.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class DataChangedListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.data.DataChangedListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						dataChanged(param0: com.telerik.android.data.DataChangeInfo): void;
					});
					public dataChanged(param0: com.telerik.android.data.DataChangeInfo): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class DataItem extends javalangObject {
					public toString(): string;
					public entity(): javalangObject;
					public groupKey(): javalangObject;
					public getItems(): javautilList<any>;
					public constructor(param0: javalangObject, param1: javalangObject);
					public constructor(param0: javalangObject);
				}
			}
		}
	}
}

import androidwidgetBaseAdapter = android.widget.BaseAdapter;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.android.data.CurrentItemChangedInfo.d.ts" />
/// <reference path="./com.telerik.android.data.DataChangeInfo.d.ts" />
/// <reference path="./com.telerik.android.data.DataItem.d.ts" />
/// <reference path="./com.telerik.android.data.RadDataSource.d.ts" />
/// <reference path="./com.telerik.android.data.SelectionChangeInfo.d.ts" />
/// <reference path="./com.telerik.android.data.SelectionService.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class DataSourceAdapterBase extends androidwidgetBaseAdapter implements com.telerik.android.data.DataChangedListener, com.telerik.android.data.SelectionChangeListener, com.telerik.android.data.CurrentItemChangedListener {
					public dataChanged(param0: com.telerik.android.data.DataChangeInfo): void;
					public dataSource(): com.telerik.android.data.RadDataSource;
					public getCount(): number;
					public areAllItemsEnabled(): boolean;
					public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					public constructor(param0: javautilList<any>, param1: androidcontentContext);
					public selectionChanged(param0: com.telerik.android.data.SelectionChangeInfo): void;
					public currentItemChanged(param0: com.telerik.android.data.CurrentItemChangedInfo): void;
					public getItem(param0: number): javalangObject;
					public getView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					public selectionService(): com.telerik.android.data.SelectionService;
					public constructor();
					public isEnabled(param0: number): boolean;
					public getViewType(): com.telerik.android.data.DataSourceAdapterBase.ViewType;
					public getItemId(param0: number): number;
					public setViewType(param0: com.telerik.android.data.DataSourceAdapterBase.ViewType): void;
					public createCurrentView(param0: com.telerik.android.data.DataItem): androidviewView;
				}
				export module DataSourceAdapterBase {
					export class ViewType extends javalangEnum<any> {
						public static FLAT: com.telerik.android.data.DataSourceAdapterBase.ViewType;
						public static HIERARCHY: com.telerik.android.data.DataSourceAdapterBase.ViewType;
						public static values(): native.Array<com.telerik.android.data.DataSourceAdapterBase.ViewType>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						public static valueOf(param0: string): com.telerik.android.data.DataSourceAdapterBase.ViewType;
					}
				}
			}
		}
	}
}

import androidosAsyncTask = android.os.AsyncTask;
/// <reference path="./com.telerik.android.common.Procedure.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class LoadJSONTask extends androidosAsyncTask<any, any, any> {
					public setFinishedListener(param0: com.telerik.android.common.Procedure): void;
					public constructor();
					public doInBackground(param0: native.Array<javalangObject>): javalangObject;
					public onPostExecute(param0: javalangObject): void;
				}
			}
		}
	}
}

import orgjsonJSONException = org.json.JSONException;
/// <reference path="./com.telerik.android.data.RadDataSource.d.ts" />
/// <reference path="./org.json.JSONException.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class OnJSONDataSourceCreated extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.data.OnJSONDataSourceCreated interface with the provided implementation.
					 */
					public constructor(implementation: {
						onError(param0: orgjsonJSONException): void;
						onDataSourceCreated(param0: com.telerik.android.data.RadDataSource): void;
					});
					public onError(param0: orgjsonJSONException): void;
					public onDataSourceCreated(param0: com.telerik.android.data.RadDataSource): void;
				}
			}
		}
	}
}

import javalangIterable = java.lang.Iterable;
import javanetURL = java.net.URL;
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.android.common.ObservableCollection.d.ts" />
/// <reference path="./com.telerik.android.data.DataChangedListener.d.ts" />
/// <reference path="./com.telerik.android.data.OnJSONDataSourceCreated.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.net.URL.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class RadDataSource extends javalangObject implements com.telerik.android.common.CollectionChangeListener, javalangIterable<any> {
					public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
					public sortDescriptors(): com.telerik.android.common.ObservableCollection;
					public filterDescriptors(): com.telerik.android.common.ObservableCollection;
					public groupDescriptors(): com.telerik.android.common.ObservableCollection;
					public flatView(): javautilList<any>;
					public suspendUpdate(): void;
					public addDataChangeListener(param0: com.telerik.android.data.DataChangedListener): void;
					public constructor(param0: javalangIterable<any>);
					public resumeUpdate(): void;
					public iterator(): javautilIterator<any>;
					public invalidateDescriptors(): void;
					public removeDataChangeListener(param0: com.telerik.android.data.DataChangedListener): void;
					public view(): javautilList<any>;
					public setSource(param0: javalangIterable<any>): void;
					public constructor();
					public onDataChanged(): void;
					public resumeUpdate(param0: boolean): void;
					public static createFromJson(param0: string): com.telerik.android.data.RadDataSource;
					public getSource(): javalangIterable<any>;
					public static createFromJsonUrl(param0: javanetURL, param1: com.telerik.android.data.OnJSONDataSourceCreated): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.android.data.CurrentItemChangedInfo.d.ts" />
/// <reference path="./com.telerik.android.data.DataChangeInfo.d.ts" />
/// <reference path="./com.telerik.android.data.SelectionChangeInfo.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class RadDataSourceAdapter extends com.telerik.android.data.DataSourceAdapterBase {
					public dataChanged(param0: com.telerik.android.data.DataChangeInfo): void;
					public areAllItemsEnabled(): boolean;
					public constructor();
					public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					public constructor(param0: javautilList<any>, param1: androidcontentContext);
					public isEnabled(param0: number): boolean;
					public selectionChanged(param0: com.telerik.android.data.SelectionChangeInfo): void;
					public currentItemChanged(param0: com.telerik.android.data.CurrentItemChangedInfo): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class SelectionChangeInfo extends javalangObject {
					public selectedItems(): javalangIterable<any>;
					public constructor(param0: javautilList<any>, param1: javautilList<any>);
					public deselectedItems(): javalangIterable<any>;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.data.SelectionChangeInfo.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class SelectionChangeListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.android.data.SelectionChangeListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						selectionChanged(param0: com.telerik.android.data.SelectionChangeInfo): void;
					});
					public selectionChanged(param0: com.telerik.android.data.SelectionChangeInfo): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class SelectionMode extends javalangEnum<any> {
					public static NONE: com.telerik.android.data.SelectionMode;
					public static SINGLE: com.telerik.android.data.SelectionMode;
					public static MULTIPLE: com.telerik.android.data.SelectionMode;
					public static valueOf(param0: string): com.telerik.android.data.SelectionMode;
					public static values(): native.Array<com.telerik.android.data.SelectionMode>;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.data.SelectionChangeListener.d.ts" />
/// <reference path="./com.telerik.android.data.SelectionMode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module data {
				export class SelectionService extends javalangObject {
					public selectItems(param0: javautilList<any>): void;
					public addSelectionChangeListener(param0: com.telerik.android.data.SelectionChangeListener): void;
					public selectedItems(): javautilList<any>;
					public setSelectionMode(param0: com.telerik.android.data.SelectionMode): void;
					public clearSelection(): void;
					public selectItem(param0: javalangObject): void;
					public getSelectionMode(): com.telerik.android.data.SelectionMode;
					public deselectItem(param0: javalangObject): void;
					public constructor();
					public selectedItemsSize(): number;
					public onSelectionChanged(param0: javautilList<any>, param1: javautilList<any>): void;
					public removeSelectionChangeListener(param0: com.telerik.android.data.SelectionChangeListener): boolean;
					public get(param0: number): javalangObject;
					public isItemSelected(param0: javalangObject): boolean;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

import androidutilAttributeSet = android.util.AttributeSet;
import androidgraphicsBitmap = android.graphics.Bitmap;
import androidviewViewParent = android.view.ViewParent;
import androidgraphicsPoint = android.graphics.Point;
import androidviewContextMenu = android.view.ContextMenu;
import androidviewActionModeCallback = android.view.ActionMode.Callback;
import androidviewActionMode = android.view.ActionMode;
import androidviewaccessibilityAccessibilityEvent = android.view.accessibility.AccessibilityEvent;
import androidosBundle = android.os.Bundle;
import androidviewKeyEvent = android.view.KeyEvent;
import androidgraphicsdrawableDrawable = android.graphics.drawable.Drawable;
import androidviewViewGroupLayoutParams = android.view.ViewGroup.LayoutParams;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Bitmap.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class BlurFadeLayer extends com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayerBase {
							public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
							public focusableViewAvailable(param0: androidviewView): void;
							public getTextDirection(): number;
							public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public isLayoutRequested(): boolean;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public hide(): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
							public blurBitmap(param0: androidgraphicsBitmap): androidgraphicsBitmap;
							public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
							public removeView(param0: androidviewView): void;
							public recomputeViewAttributes(param0: androidviewView): void;
							public getParent(): androidviewViewParent;
							public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
							public canResolveTextDirection(): boolean;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
							public canResolveLayoutDirection(): boolean;
							public onStopNestedScroll(param0: androidviewView): void;
							public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
							public addView(param0: androidviewView, param1: number): void;
							public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
							public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
							public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
							public isTextAlignmentResolved(): boolean;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public bringChildToFront(param0: androidviewView): void;
							public clearChildFocus(param0: androidviewView): void;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
							public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public show(): void;
							public childDrawableStateChanged(param0: androidviewView): void;
							public requestFitSystemWindows(): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
							public showContextMenuForChild(param0: androidviewView): boolean;
							public requestTransparentRegion(param0: androidviewView): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public canResolveTextAlignment(): boolean;
							public getTextAlignment(): number;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
							public focusSearch(param0: androidviewView, param1: number): androidviewView;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public addView(param0: androidviewView, param1: number, param2: number): void;
							public focusSearch(param0: number): androidviewView;
							public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
							public createContextMenu(param0: androidviewContextMenu): void;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public view(): androidviewView;
							public getLayoutDirection(): number;
							public addView(param0: androidviewView): void;
							public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
							public constructor(param0: androidcontentContext);
							public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
							public sendAccessibilityEvent(param0: number): void;
							public getParentForAccessibility(): androidviewViewParent;
							public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class DrawerChangeListener extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.android.primitives.widget.sidedrawer.DrawerChangeListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onDrawerOpening(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): boolean;
								onDrawerOpened(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
								onDrawerClosing(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): boolean;
								onDrawerClosed(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
								onDrawerPan(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
							});
							public onDrawerOpened(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
							public onDrawerClosing(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): boolean;
							public onDrawerClosed(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
							public onDrawerOpening(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): boolean;
							public onDrawerPan(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class DrawerFadeLayer extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer interface with the provided implementation.
							 */
							public constructor(implementation: {
								show(): void;
								hide(): void;
								view(): androidviewView;
							});
							public show(): void;
							public hide(): void;
							public view(): androidviewView;
						}
					}
				}
			}
		}
	}
}

import androidwidgetFrameLayout = android.widget.FrameLayout;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class DrawerFadeLayerBase extends androidwidgetFrameLayout implements com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer {
							public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
							public focusableViewAvailable(param0: androidviewView): void;
							public getTextDirection(): number;
							public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public isLayoutRequested(): boolean;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public hide(): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
							public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
							public removeView(param0: androidviewView): void;
							public recomputeViewAttributes(param0: androidviewView): void;
							public getParent(): androidviewViewParent;
							public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
							public canResolveTextDirection(): boolean;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
							public canResolveLayoutDirection(): boolean;
							public onStopNestedScroll(param0: androidviewView): void;
							public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
							public addView(param0: androidviewView, param1: number): void;
							public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
							public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
							public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
							public isTextAlignmentResolved(): boolean;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public bringChildToFront(param0: androidviewView): void;
							public clearChildFocus(param0: androidviewView): void;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
							public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public show(): void;
							public childDrawableStateChanged(param0: androidviewView): void;
							public requestFitSystemWindows(): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
							public showContextMenuForChild(param0: androidviewView): boolean;
							public requestTransparentRegion(param0: androidviewView): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public canResolveTextAlignment(): boolean;
							public getTextAlignment(): number;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
							public focusSearch(param0: androidviewView, param1: number): androidviewView;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public addView(param0: androidviewView, param1: number, param2: number): void;
							public focusSearch(param0: number): androidviewView;
							public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
							public createContextMenu(param0: androidviewContextMenu): void;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public view(): androidviewView;
							public getLayoutDirection(): number;
							public addView(param0: androidviewView): void;
							public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
							public constructor(param0: androidcontentContext);
							public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
							public sendAccessibilityEvent(param0: number): void;
							public getParentForAccessibility(): androidviewViewParent;
							public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class DrawerLocation extends javalangEnum<any> {
							public static LEFT: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public static TOP: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public static RIGHT: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public static BOTTOM: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public static values(): native.Array<com.telerik.android.primitives.widget.sidedrawer.DrawerLocation>;
							public static valueOf(param0: string): com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

import androidviewanimationInterpolator = android.view.animation.Interpolator;
import androidosParcel = android.os.Parcel;
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class DrawerTransition extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.android.primitives.widget.sidedrawer.DrawerTransition interface with the provided implementation.
							 */
							public constructor(implementation: {
								animateOpen(): void;
								animateClose(): void;
								addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								setDuration(param0: number): void;
								getDuration(): number;
								setInterpolator(param0: androidviewanimationInterpolator): void;
								getInterpolator(): androidviewanimationInterpolator;
								setFadeLayerOpacity(param0: number): void;
								getFadeLayerOpacity(): number;
								setProgress(param0: number): void;
								getProgress(): number;
								setMainContent(param0: androidviewView): void;
								setDrawerContent(param0: androidviewView): void;
								setFadeLayer(param0: androidviewView): void;
								setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								saveInstanceState(param0: androidosParcel, param1: number): void;
								restoreInstanceState(param0: androidosParcel): void;
								clear(): void;
							});
							public setDuration(param0: number): void;
							public animateClose(): void;
							public setFadeLayerOpacity(param0: number): void;
							public clear(): void;
							public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
							public getProgress(): number;
							public setMainContent(param0: androidviewView): void;
							public setFadeLayer(param0: androidviewView): void;
							public setInterpolator(param0: androidviewanimationInterpolator): void;
							public getFadeLayerOpacity(): number;
							public setDrawerContent(param0: androidviewView): void;
							public getInterpolator(): androidviewanimationInterpolator;
							public restoreInstanceState(param0: androidosParcel): void;
							public animateOpen(): void;
							public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
							public getDuration(): number;
							public setProgress(param0: number): void;
							public saveInstanceState(param0: androidosParcel, param1: number): void;
							public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransition.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class DrawerTransitionEndedListener extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onTransitionEnded(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransition): void;
							});
							public onTransitionEnded(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransition): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class NSDrawerChangeListener extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.android.primitives.widget.sidedrawer.NSDrawerChangeListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onDrawerOpening(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer): boolean;
								onDrawerOpened(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer): void;
								onDrawerClosing(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer): boolean;
								onDrawerClosed(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer): void;
							});
							public onDrawerClosing(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer): boolean;
							public onDrawerOpening(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer): boolean;
							public onDrawerClosed(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer): void;
							public onDrawerOpened(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer): void;
						}
					}
				}
			}
		}
	}
}

import androidwidgetFrameLayoutLayoutParams = android.widget.FrameLayout.LayoutParams;
import androidviewMotionEvent = android.view.MotionEvent;
import androidosParcelable = android.os.Parcelable;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransition.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.NSDrawerChangeListener.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.NSSideDrawerState.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class NSSideDrawer extends androidwidgetFrameLayout implements com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener {
							public static OPEN_THRESHOLD: number;
							public static CLOSE_THRESHOLD: number;
							public getDrawerTransition(): com.telerik.android.primitives.widget.sidedrawer.DrawerTransition;
							public getTouchTargetThreshold(): number;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public getIsOpen(): boolean;
							public getCloseOnBackPress(): boolean;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public getDrawerCloseThreshold(): number;
							public getDrawerContent(): androidviewView;
							public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							public setDrawerCloseThreshold(param0: number): void;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
							public recomputeViewAttributes(param0: androidviewView): void;
							public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
							public canResolveTextDirection(): boolean;
							public notifyClosed(): void;
							public resolveFadeLayer(): com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public handleOnUp(param0: androidviewMotionEvent): boolean;
							public onStopNestedScroll(param0: androidviewView): void;
							public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
							public handleOnMove(param0: androidviewMotionEvent): boolean;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public clearChildFocus(param0: androidviewView): void;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
							public notifyClosing(): boolean;
							public setDrawerContent(param0: number): void;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
							public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public childDrawableStateChanged(param0: androidviewView): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
							public getIsLocked(): boolean;
							public requestTransparentRegion(param0: androidviewView): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public canResolveTextAlignment(): boolean;
							public addChangeListener(param0: com.telerik.android.primitives.widget.sidedrawer.NSDrawerChangeListener): void;
							public getDrawerLocation(): com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public onAttachedToWindow(): void;
							public setFadeLayer(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer): void;
							public setTapOutsideToClose(param0: boolean): void;
							public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public addView(param0: androidviewView, param1: number, param2: number): void;
							public setDrawerLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
							public resolveTransition(): com.telerik.android.primitives.widget.sidedrawer.DrawerTransition;
							public handlePan(param0: androidviewMotionEvent): boolean;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public getFadeLayer(): com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer;
							public getLayoutDirection(): number;
							public addView(param0: androidviewView): void;
							public setMainContent(param0: number): void;
							public setIsOpen(param0: boolean, param1: boolean): void;
							public setDrawerContent(param0: androidviewView): void;
							public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
							public onGesture(param0: androidviewMotionEvent): boolean;
							public removeChangeListener(param0: com.telerik.android.primitives.widget.sidedrawer.NSDrawerChangeListener): void;
							public getTapOutsideToClose(): boolean;
							public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
							public focusableViewAvailable(param0: androidviewView): void;
							public getTextDirection(): number;
							public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public setMainContent(param0: androidviewView): void;
							public isLayoutRequested(): boolean;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public closeDrawerCore(param0: boolean): void;
							public getDrawerSize(): number;
							public isLayoutDirectionResolved(): boolean;
							public notifyOpening(): boolean;
							public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public onTouchEvent(param0: androidviewMotionEvent): boolean;
							public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
							public removeView(param0: androidviewView): void;
							public getParent(): androidviewViewParent;
							public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
							public canResolveLayoutDirection(): boolean;
							public notifyOpened(): void;
							public restoreState(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawerState): void;
							public setDrawerSize(param0: number): void;
							public handleOnDown(param0: androidviewMotionEvent): boolean;
							public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
							public addView(param0: androidviewView, param1: number): void;
							public setDrawerTransition(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransition): void;
							public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
							public setTouchTargetThreshold(param0: number): void;
							public getMainContent(): androidviewView;
							public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
							public isTextAlignmentResolved(): boolean;
							public setCloseOnBackPress(param0: boolean): void;
							public setIsLocked(param0: boolean): void;
							public bringChildToFront(param0: androidviewView): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public requestFitSystemWindows(): void;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public onRestoreInstanceState(param0: androidosParcelable): void;
							public showContextMenuForChild(param0: androidviewView): boolean;
							public setIsOpen(param0: boolean): void;
							public getTextAlignment(): number;
							public onSaveInstanceState(): androidosParcelable;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public focusSearch(param0: androidviewView, param1: number): androidviewView;
							public focusSearch(param0: number): androidviewView;
							public drawerLayoutParams(): androidwidgetFrameLayoutLayoutParams;
							public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
							public createContextMenu(param0: androidviewContextMenu): void;
							public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
							public openDrawerCore(param0: boolean): void;
							public constructor(param0: androidcontentContext);
							public sendAccessibilityEvent(param0: number): void;
							public getParentForAccessibility(): androidviewViewParent;
							public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
							public onTransitionEnded(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransition): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class NSSideDrawerLayout extends androidwidgetFrameLayout {
							public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
							public focusableViewAvailable(param0: androidviewView): void;
							public getTextDirection(): number;
							public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public isLayoutRequested(): boolean;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public onTouchEvent(param0: androidviewMotionEvent): boolean;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
							public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
							public removeView(param0: androidviewView): void;
							public recomputeViewAttributes(param0: androidviewView): void;
							public getParent(): androidviewViewParent;
							public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
							public canResolveTextDirection(): boolean;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
							public canResolveLayoutDirection(): boolean;
							public onStopNestedScroll(param0: androidviewView): void;
							public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
							public addView(param0: androidviewView, param1: number): void;
							public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
							public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
							public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
							public isTextAlignmentResolved(): boolean;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public bringChildToFront(param0: androidviewView): void;
							public constructor(param0: androidcontentContext, param1: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer);
							public clearChildFocus(param0: androidviewView): void;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
							public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public childDrawableStateChanged(param0: androidviewView): void;
							public requestFitSystemWindows(): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
							public showContextMenuForChild(param0: androidviewView): boolean;
							public requestTransparentRegion(param0: androidviewView): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public canResolveTextAlignment(): boolean;
							public getTextAlignment(): number;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
							public focusSearch(param0: androidviewView, param1: number): androidviewView;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public addView(param0: androidviewView, param1: number, param2: number): void;
							public focusSearch(param0: number): androidviewView;
							public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
							public createContextMenu(param0: androidviewContextMenu): void;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public getLayoutDirection(): number;
							public addView(param0: androidviewView): void;
							public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
							public constructor(param0: androidcontentContext);
							public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
							public sendAccessibilityEvent(param0: number): void;
							public getParentForAccessibility(): androidviewViewParent;
							public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						}
					}
				}
			}
		}
	}
}

import androidviewViewBaseSavedState = android.view.View.BaseSavedState;
import androidosParcelableCreator = android.os.Parcelable.Creator;
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransition.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class NSSideDrawerState extends androidviewViewBaseSavedState {
							public static CREATOR: androidosParcelableCreator<any>;
							public getIsOpen(): boolean;
							public getTapOutsideToClose(): boolean;
							public describeContents(): number;
							public writeToParcel(param0: androidosParcel, param1: number): void;
							public getTouchTargetThreshold(): number;
							public getDrawerLocation(): com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public constructor(param0: androidosParcelable);
							public getIsLocked(): boolean;
							public constructor(param0: com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer, param1: androidosParcelable);
							public getTransition(): com.telerik.android.primitives.widget.sidedrawer.DrawerTransition;
							public constructor(param0: androidosParcel);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerChangeListener.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransition.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.SideDrawerState.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class RadSideDrawer extends androidwidgetFrameLayout implements com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener {
							public static OPEN_THRESHOLD: number;
							public static CLOSE_THRESHOLD: number;
							public getDrawerTransition(): com.telerik.android.primitives.widget.sidedrawer.DrawerTransition;
							public getTouchTargetThreshold(): number;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public getIsOpen(): boolean;
							public getCloseOnBackPress(): boolean;
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public getDrawerCloseThreshold(): number;
							public getDrawerContent(): androidviewView;
							public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							public setDrawerCloseThreshold(param0: number): void;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
							public recomputeViewAttributes(param0: androidviewView): void;
							public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
							public canResolveTextDirection(): boolean;
							public notifyClosed(): void;
							public resolveFadeLayer(): com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public handleOnUp(param0: androidviewMotionEvent): boolean;
							public onStopNestedScroll(param0: androidviewView): void;
							public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
							public handleOnMove(param0: androidviewMotionEvent): boolean;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public clearChildFocus(param0: androidviewView): void;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
							public notifyClosing(): boolean;
							public setDrawerContent(param0: number): void;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
							public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public childDrawableStateChanged(param0: androidviewView): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
							public getIsLocked(): boolean;
							public requestTransparentRegion(param0: androidviewView): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public canResolveTextAlignment(): boolean;
							public getDrawerLocation(): com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public onAttachedToWindow(): void;
							public setFadeLayer(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer): void;
							public setTapOutsideToClose(param0: boolean): void;
							public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public addView(param0: androidviewView, param1: number, param2: number): void;
							public setDrawerLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
							public resolveTransition(): com.telerik.android.primitives.widget.sidedrawer.DrawerTransition;
							public handlePan(param0: androidviewMotionEvent): boolean;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public getFadeLayer(): com.telerik.android.primitives.widget.sidedrawer.DrawerFadeLayer;
							public getLayoutDirection(): number;
							public addView(param0: androidviewView): void;
							public setMainContent(param0: number): void;
							public setIsOpen(param0: boolean, param1: boolean): void;
							public setDrawerContent(param0: androidviewView): void;
							public restoreState(param0: com.telerik.android.primitives.widget.sidedrawer.SideDrawerState): void;
							public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
							public onGesture(param0: androidviewMotionEvent): boolean;
							public getTapOutsideToClose(): boolean;
							public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
							public focusableViewAvailable(param0: androidviewView): void;
							public getTextDirection(): number;
							public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public setMainContent(param0: androidviewView): void;
							public isLayoutRequested(): boolean;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public closeDrawerCore(param0: boolean): void;
							public getDrawerSize(): number;
							public isLayoutDirectionResolved(): boolean;
							public notifyOpening(): boolean;
							public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public onTouchEvent(param0: androidviewMotionEvent): boolean;
							public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
							public removeView(param0: androidviewView): void;
							public getParent(): androidviewViewParent;
							public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
							public canResolveLayoutDirection(): boolean;
							public notifyOpened(): void;
							public setDrawerSize(param0: number): void;
							public handleOnDown(param0: androidviewMotionEvent): boolean;
							public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
							public addView(param0: androidviewView, param1: number): void;
							public setDrawerTransition(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransition): void;
							public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
							public setTouchTargetThreshold(param0: number): void;
							public getMainContent(): androidviewView;
							public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
							public isTextAlignmentResolved(): boolean;
							public setCloseOnBackPress(param0: boolean): void;
							public setIsLocked(param0: boolean): void;
							public bringChildToFront(param0: androidviewView): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public requestFitSystemWindows(): void;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public onRestoreInstanceState(param0: androidosParcelable): void;
							public showContextMenuForChild(param0: androidviewView): boolean;
							public addChangeListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerChangeListener): void;
							public setIsOpen(param0: boolean): void;
							public getTextAlignment(): number;
							public onSaveInstanceState(): androidosParcelable;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public focusSearch(param0: androidviewView, param1: number): androidviewView;
							public focusSearch(param0: number): androidviewView;
							public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
							public createContextMenu(param0: androidviewContextMenu): void;
							public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
							public openDrawerCore(param0: boolean): void;
							public constructor(param0: androidcontentContext);
							public sendAccessibilityEvent(param0: number): void;
							public getParentForAccessibility(): androidviewViewParent;
							public removeChangeListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerChangeListener): void;
							public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
							public onTransitionEnded(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransition): void;
						}
					}
				}
			}
		}
	}
}

import androidcontentresResourcesTheme = android.content.res.Resources.Theme;
import androidviewContextMenuContextMenuInfo = android.view.ContextMenu.ContextMenuInfo;
import androidviewMenu = android.view.Menu;
import androidviewMenuItem = android.view.MenuItem;
import androidviewWindowManagerLayoutParams = android.view.WindowManager.LayoutParams;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.SearchEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class SideDrawerActivity extends androidappActivity {
							public onCreatePanelMenu(param0: number, param1: androidviewMenu): boolean;
							public onMenuItemSelected(param0: number, param1: androidviewMenuItem): boolean;
							public getDrawer(): com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public dispatchKeyShortcutEvent(param0: androidviewKeyEvent): boolean;
							public onSearchRequested(param0: any): boolean;
							public getCloseDrawerOnBackButton(): boolean;
							public onTrimMemory(param0: number): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public onActionModeFinished(param0: androidviewActionMode): void;
							public onCreateView(param0: string, param1: androidcontentContext, param2: androidutilAttributeSet): androidviewView;
							public dispatchGenericMotionEvent(param0: androidviewMotionEvent): boolean;
							public dispatchTrackballEvent(param0: androidviewMotionEvent): boolean;
							public onWindowFocusChanged(param0: boolean): void;
							public onPanelClosed(param0: number, param1: androidviewMenu): void;
							public constructor(param0: androidcontentContext, param1: number);
							public onAttachedToWindow(): void;
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public dispatchTouchEvent(param0: androidviewMotionEvent): boolean;
							public onBackPressed(): void;
							public onWindowStartingActionMode(param0: androidviewActionModeCallback): androidviewActionMode;
							public onSearchRequested(): boolean;
							public constructor();
							public onCreateContextMenu(param0: androidviewContextMenu, param1: androidviewView, param2: androidviewContextMenuContextMenuInfo): void;
							public dispatchKeyEvent(param0: androidviewKeyEvent): boolean;
							public onDetachedFromWindow(): void;
							public onWindowStartingActionMode(param0: androidviewActionModeCallback, param1: number): androidviewActionMode;
							public setDrawer(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public onWindowAttributesChanged(param0: androidviewWindowManagerLayoutParams): void;
							public onCreateView(param0: androidviewView, param1: string, param2: androidcontentContext, param3: androidutilAttributeSet): androidviewView;
							public onMenuOpened(param0: number, param1: androidviewMenu): boolean;
							public setCloseDrawerOnBackButton(param0: boolean): void;
							public onContentChanged(): void;
							public onActionModeStarted(param0: androidviewActionMode): void;
							public constructor(param0: androidcontentContext);
							public constructor(param0: androidcontentContext, param1: androidcontentresResourcesTheme);
							public onPreparePanel(param0: number, param1: androidviewView, param2: androidviewMenu): boolean;
							public onWindowDismissed(): void;
							public dispatchPopulateAccessibilityEvent(param0: androidviewaccessibilityAccessibilityEvent): boolean;
							public onCreatePanelView(param0: number): androidviewView;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransition.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class SideDrawerState extends androidviewViewBaseSavedState {
							public static CREATOR: androidosParcelableCreator<any>;
							public getIsOpen(): boolean;
							public getTapOutsideToClose(): boolean;
							public describeContents(): number;
							public writeToParcel(param0: androidosParcel, param1: number): void;
							public getTouchTargetThreshold(): number;
							public getDrawerLocation(): com.telerik.android.primitives.widget.sidedrawer.DrawerLocation;
							public constructor(param0: androidosParcelable);
							public constructor(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer, param1: androidosParcelable);
							public getIsLocked(): boolean;
							public getTransition(): com.telerik.android.primitives.widget.sidedrawer.DrawerTransition;
							public constructor(param0: androidosParcel);
						}
					}
				}
			}
		}
	}
}

import androidsupportv7widgetToolbar = android.support.v7.widget.Toolbar;
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.support.v7.widget.Toolbar.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export class SideDrawerToggle extends javalangObject implements com.telerik.android.primitives.widget.sidedrawer.DrawerChangeListener {
							public toggleDrawer(): void;
							public setDrawerOpenIcon(param0: number): void;
							public constructor(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer, param1: androidsupportv7widgetToolbar);
							public setDrawerOpenIcon(param0: androidgraphicsdrawableDrawable): void;
							public onDrawerOpened(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
							public setDrawerCloseIcon(param0: androidgraphicsdrawableDrawable): void;
							public onOptionsItemSelected(param0: androidviewMenuItem): boolean;
							public onDrawerClosing(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): boolean;
							public onDrawerClosed(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): void;
							public onDrawerOpening(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer): boolean;
							public constructor(param0: com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer);
						}
					}
				}
			}
		}
	}
}

import androidcontentIntent = android.content.Intent;
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module contents {
							export class CreateIntentCallback extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.android.primitives.widget.sidedrawer.contents.CreateIntentCallback interface with the provided implementation.
								 */
								public constructor(implementation: {
									createIntent(param0: com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem): androidcontentIntent;
								});
								public createIntent(param0: com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem): androidcontentIntent;
							}
						}
					}
				}
			}
		}
	}
}

import androidviewViewOnClickListener = android.view.View.OnClickListener;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.contents.CreateIntentCallback.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItemsAdapter.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module contents {
							export class NavigationDrawerContent extends androidwidgetFrameLayout implements androidviewViewOnClickListener {
								public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
								public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
								public addView(param0: androidviewView): void;
								public focusSearch(param0: androidviewView, param1: number): androidviewView;
								public isLayoutRequested(): boolean;
								public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
								public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
								public getTextDirection(): number;
								public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
								public childDrawableStateChanged(param0: androidviewView): void;
								public constructor(param0: androidcontentContext);
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
								public canResolveLayoutDirection(): boolean;
								public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
								public removeView(param0: androidviewView): void;
								public addView(param0: androidviewView, param1: number, param2: number): void;
								public requestTransparentRegion(param0: androidviewView): void;
								public getParentForAccessibility(): androidviewViewParent;
								public getTextAlignment(): number;
								public createIntentCore(param0: com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem): androidcontentIntent;
								public addView(param0: androidviewView, param1: number): void;
								public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
								public generateViews(): void;
								public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
								public setNavigationItems(param0: javautilList<any>): void;
								public getLayoutDirection(): number;
								public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
								public isTextDirectionResolved(): boolean;
								public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
								public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
								public requestLayout(): void;
								public isTextAlignmentResolved(): boolean;
								public recomputeViewAttributes(param0: androidviewView): void;
								public clearChildFocus(param0: androidviewView): void;
								public setNavigationItemsAdapter(param0: com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItemsAdapter): void;
								public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
								public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
								public getCreateIntentCallback(): com.telerik.android.primitives.widget.sidedrawer.contents.CreateIntentCallback;
								public requestFitSystemWindows(): void;
								public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
								public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
								public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
								public requestDisallowInterceptTouchEvent(param0: boolean): void;
								public getParent(): androidviewViewParent;
								public canResolveTextDirection(): boolean;
								public onClick(param0: androidviewView): void;
								public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
								public onDataInvalidated(): void;
								public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
								public isLayoutDirectionResolved(): boolean;
								public canResolveTextAlignment(): boolean;
								public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
								public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
								public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
								public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
								public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
								public onStopNestedScroll(param0: androidviewView): void;
								public createContextMenu(param0: androidviewContextMenu): void;
								public focusSearch(param0: number): androidviewView;
								public focusableViewAvailable(param0: androidviewView): void;
								public sendAccessibilityEvent(param0: number): void;
								public setCreateIntentCallback(param0: com.telerik.android.primitives.widget.sidedrawer.contents.CreateIntentCallback): void;
								public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
								public showContextMenuForChild(param0: androidviewView): boolean;
								public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
								public bringChildToFront(param0: androidviewView): void;
								public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
								public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
								public onDataChanged(): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module contents {
							export class NavigationItem extends javalangObject {
								public constructor(param0: javalangClass<any>);
								public getText(): string;
								public getActivityClass(): javalangClass<any>;
								public setIntent(param0: androidcontentIntent): void;
								public getIntent(): androidcontentIntent;
								public setText(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module contents {
							export class NavigationItemView extends androidwidgetFrameLayout {
								public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
								public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
								public addView(param0: androidviewView): void;
								public focusSearch(param0: androidviewView, param1: number): androidviewView;
								public isLayoutRequested(): boolean;
								public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
								public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
								public getTextDirection(): number;
								public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
								public childDrawableStateChanged(param0: androidviewView): void;
								public constructor(param0: androidcontentContext);
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
								public canResolveLayoutDirection(): boolean;
								public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
								public removeView(param0: androidviewView): void;
								public addView(param0: androidviewView, param1: number, param2: number): void;
								public requestTransparentRegion(param0: androidviewView): void;
								public getParentForAccessibility(): androidviewViewParent;
								public setNavigationItem(param0: com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem): void;
								public getTextAlignment(): number;
								public addView(param0: androidviewView, param1: number): void;
								public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
								public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
								public getLayoutDirection(): number;
								public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
								public isTextDirectionResolved(): boolean;
								public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
								public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
								public requestLayout(): void;
								public isTextAlignmentResolved(): boolean;
								public recomputeViewAttributes(param0: androidviewView): void;
								public clearChildFocus(param0: androidviewView): void;
								public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
								public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
								public requestFitSystemWindows(): void;
								public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
								public getNavigationItem(): com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem;
								public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
								public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
								public requestDisallowInterceptTouchEvent(param0: boolean): void;
								public getParent(): androidviewViewParent;
								public canResolveTextDirection(): boolean;
								public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
								public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
								public isLayoutDirectionResolved(): boolean;
								public canResolveTextAlignment(): boolean;
								public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
								public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
								public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
								public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
								public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
								public onStopNestedScroll(param0: androidviewView): void;
								public createContextMenu(param0: androidviewContextMenu): void;
								public focusSearch(param0: number): androidviewView;
								public focusableViewAvailable(param0: androidviewView): void;
								public sendAccessibilityEvent(param0: number): void;
								public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
								public showContextMenuForChild(param0: androidviewView): boolean;
								public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
								public bringChildToFront(param0: androidviewView): void;
								public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
								public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItemView.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module contents {
							export class NavigationItemsAdapter extends androidwidgetBaseAdapter {
								public getItems(): javautilList<any>;
								public createNavigationItemView(): com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItemView;
								public constructor(param0: androidcontentContext);
								public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
								public constructor();
								public getItem(param0: number): javalangObject;
								public areAllItemsEnabled(): boolean;
								public getCount(): number;
								public getItemId(param0: number): number;
								public getView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
								public isEnabled(param0: number): boolean;
								public setItems(param0: javautilList<any>): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export abstract class DrawerTransitionBase extends javalangObject implements com.telerik.android.primitives.widget.sidedrawer.DrawerTransition, javalangRunnable {
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public onEnded(): void;
								public getMainContent(): androidviewView;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public getDrawerContent(): androidviewView;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public setDuration(param0: number): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public setDrawerContent(param0: androidviewView): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clear(): void;
								public setFadeLayerOpacity(param0: number): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setFadeLayer(param0: androidviewView): void;
								public setProgress(param0: number): void;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public getFadeLayerOpacity(): number;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class FadeTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class FallDownTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public toString(): string;
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class PushTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public toString(): string;
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class RevealTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public toString(): string;
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class ReverseSlideOutTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public toString(): string;
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class ScaleDownPusherTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public toString(): string;
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setScaleProgress(param0: number, param1: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class ScaleUpTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public toString(): string;
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public setScale(param0: androidviewView): void;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class SlideAlongTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public toString(): string;
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerLocation.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module sidedrawer {
						export module transitions {
							export class SlideInOnTopTransition extends com.telerik.android.primitives.widget.sidedrawer.transitions.DrawerTransitionBase {
								public toString(): string;
								public addTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public animateCloseLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateClose(): void;
								public animateCloseTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgressLeft(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public clearCore(param0: androidviewView, param1: androidviewView): void;
								public animateCloseRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpen(): void;
								public animateOpenLeft(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setDuration(param0: number): void;
								public getProgress(): number;
								public run(): void;
								public restoreInstanceState(param0: androidosParcel): void;
								public getInterpolator(): androidviewanimationInterpolator;
								public getDuration(): number;
								public animateCloseBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public constructor();
								public setLocation(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerLocation): void;
								public removeTransitionEndedListener(param0: com.telerik.android.primitives.widget.sidedrawer.DrawerTransitionEndedListener): void;
								public setDrawerContent(param0: androidviewView): void;
								public setProgressBottom(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressRight(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setProgressTop(param0: number, param1: androidviewView, param2: androidviewView, param3: androidviewView): void;
								public setFadeLayerOpacity(param0: number): void;
								public clear(): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setMainContent(param0: androidviewView): void;
								public animateOpenBottom(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public animateOpenTop(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
								public setProgress(param0: number): void;
								public setFadeLayer(param0: androidviewView): void;
								public getFadeLayerOpacity(): number;
								public saveInstanceState(param0: androidosParcel, param1: number): void;
								public animateOpenRight(param0: androidviewView, param1: androidviewView, param2: androidviewView): void;
							}
						}
					}
				}
			}
		}
	}
}

import androidgraphicsCanvas = android.graphics.Canvas;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.containers.PointerLayout.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export class RadTooltipView extends com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase {
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public constructor(param0: androidcontentContext, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter);
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public constructor(param0: androidcontentContext, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter, param2: number);
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public open(param0: androidgraphicsPoint): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public getPointerSize(): number;
							public constructor(param0: androidcontentContext);
							public sendAccessibilityEvent(param0: number): void;
							public setPointerSize(param0: number): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public notifyDraw(param0: androidgraphicsCanvas): void;
							public pointerLayout(): com.telerik.android.primitives.widget.tooltip.containers.PointerLayout;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module containers {
							export class PointerLayout extends androidwidgetFrameLayout {
								public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
								public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
								public addView(param0: androidviewView): void;
								public focusSearch(param0: androidviewView, param1: number): androidviewView;
								public isLayoutRequested(): boolean;
								public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
								public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
								public getTextDirection(): number;
								public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
								public childDrawableStateChanged(param0: androidviewView): void;
								public constructor(param0: androidcontentContext);
								public setAlignPointerVertically(param0: boolean): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
								public canResolveLayoutDirection(): boolean;
								public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
								public removeView(param0: androidviewView): void;
								public addView(param0: androidviewView, param1: number, param2: number): void;
								public requestTransparentRegion(param0: androidviewView): void;
								public getParentForAccessibility(): androidviewViewParent;
								public getTextAlignment(): number;
								public addView(param0: androidviewView, param1: number): void;
								public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
								public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
								public setPointerSize(param0: number): void;
								public getLayoutDirection(): number;
								public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
								public isTextDirectionResolved(): boolean;
								public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
								public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
								public requestLayout(): void;
								public isTextAlignmentResolved(): boolean;
								public recomputeViewAttributes(param0: androidviewView): void;
								public clearChildFocus(param0: androidviewView): void;
								public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
								public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
								public setTooltipMargin(param0: number): void;
								public updateContainerLocation(param0: androidgraphicsPoint): void;
								public requestFitSystemWindows(): void;
								public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
								public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
								public onDraw(param0: androidgraphicsCanvas): void;
								public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
								public requestDisallowInterceptTouchEvent(param0: boolean): void;
								public getParent(): androidviewViewParent;
								public canResolveTextDirection(): boolean;
								public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
								public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
								public getTooltipMargin(): number;
								public isLayoutDirectionResolved(): boolean;
								public canResolveTextAlignment(): boolean;
								public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
								public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
								public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
								public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
								public setPadding(param0: number, param1: number, param2: number, param3: number): void;
								public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
								public onStopNestedScroll(param0: androidviewView): void;
								public getPointerColor(): number;
								public createContextMenu(param0: androidviewContextMenu): void;
								public focusSearch(param0: number): androidviewView;
								public updateTargetLocation(param0: androidgraphicsPoint): void;
								public focusableViewAvailable(param0: androidviewView): void;
								public getAlignPointerVertically(): boolean;
								public sendAccessibilityEvent(param0: number): void;
								public setPointerColor(param0: number): void;
								public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
								public showContextMenuForChild(param0: androidviewView): boolean;
								public getPointerSize(): number;
								public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
								public bringChildToFront(param0: androidviewView): void;
								public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
								public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module contracts {
							export class DrawListener extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.android.primitives.widget.tooltip.contracts.DrawListener interface with the provided implementation.
								 */
								public constructor(implementation: {
									notifyDraw(param0: androidgraphicsCanvas): void;
								});
								public notifyDraw(param0: androidgraphicsCanvas): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module contracts {
							export class TooltipAdapter extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter interface with the provided implementation.
								 */
								public constructor(implementation: {
									rawOffset(): androidgraphicsPoint;
									availableLayoutSlot(): androidgraphicsRectF;
									alignTooltipVertically(): boolean;
									getTooltipData(param0: javalangObject): native.Array<javalangObject>;
									getPlotAreaClip(): com.telerik.android.common.math.RadRect;
									contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
									setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
								});
								public rawOffset(): androidgraphicsPoint;
								public contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
								public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
								public getTooltipData(param0: javalangObject): native.Array<javalangObject>;
								public alignTooltipVertically(): boolean;
								public availableLayoutSlot(): androidgraphicsRectF;
								public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module contracts {
							export class TooltipContentAdapter extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter interface with the provided implementation.
								 */
								public constructor(implementation: {
									getView(param0: native.Array<javalangObject>): androidviewView;
									getIsApplyDefaultStyles(): boolean;
									setApplyDefaultStyles(param0: boolean): void;
									getValueToStringConverter(): com.telerik.android.common.Function;
									setValueToStringConverter(param0: com.telerik.android.common.Function): void;
									getCategoryToStringConverter(): com.telerik.android.common.Function;
									setCategoryToStringConverter(param0: com.telerik.android.common.Function): void;
								});
								public getCategoryToStringConverter(): com.telerik.android.common.Function;
								public setApplyDefaultStyles(param0: boolean): void;
								public getView(param0: native.Array<javalangObject>): androidviewView;
								public setCategoryToStringConverter(param0: com.telerik.android.common.Function): void;
								public getIsApplyDefaultStyles(): boolean;
								public getValueToStringConverter(): com.telerik.android.common.Function;
								public setValueToStringConverter(param0: com.telerik.android.common.Function): void;
							}
						}
					}
				}
			}
		}
	}
}

import androidwidgetPopupWindow = android.widget.PopupWindow;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.PopupWindow.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module views {
							export abstract class TooltipPresenterBase extends androidviewView implements com.telerik.android.primitives.widget.tooltip.contracts.DrawListener {
								public tooltipContentContainer: androidviewViewGroup;
								public targetContentContainer: androidviewViewGroup;
								public popupWindow: androidwidgetPopupWindow;
								public tooltipAdapter: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter;
								public targetPoint: androidgraphicsPoint;
								public tooltipBounds: androidgraphicsRectF;
								public updateTooltipContent(param0: javalangObject): boolean;
								public constructor(param0: androidcontentContext, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter, param2: number);
								public setTouchable(param0: boolean): void;
								public isOpen(): boolean;
								public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
								public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
								public onDraw(param0: androidgraphicsCanvas): void;
								public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
								public close(): boolean;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
								public open(param0: androidgraphicsPoint): void;
								public constructor(param0: androidcontentContext);
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
								public getTooltipAnimationStyle(): number;
								public openCore(param0: androidgraphicsPoint): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
								public getContentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
								public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
								public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
								public calculateTooltipBounds(param0: androidgraphicsPoint): androidgraphicsRectF;
								public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
								public notifyDraw(param0: androidgraphicsCanvas): void;
								public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
								public sendAccessibilityEvent(param0: number): void;
								public getIsTouchable(): boolean;
								public shouldPreventPointOverlap(): boolean;
								public onDrawCore(param0: androidgraphicsCanvas): void;
								public onAttachedToWindow(): void;
								public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
								public setTooltipAnimationStyle(param0: number): void;
								public adjustPosition(param0: androidgraphicsRectF, param1: androidgraphicsPoint): androidgraphicsRectF;
							}
						}
					}
				}
			}
		}
	}
}

import javalangInteger = java.lang.Integer;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.android.common.Function2Async.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewHolder.d.ts" />
/// <reference path="./java.lang.Integer.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class AutoCompleteAdapter extends com.telerik.widget.list.ListViewAdapter implements com.telerik.widget.autocomplete.AutoCompleteAdapterBase {
					public setFilteredList(param0: javautilArrayList<any>): void;
					public getHighlightingEnabled(): boolean;
					public setHighlightingEnabled(param0: boolean): void;
					public constructor(param0: javautilList<any>);
					public onCreateViewHolder(param0: androidviewViewGroup, param1: number): com.telerik.widget.list.ListViewHolder;
					public setHighlightColor(param0: number): void;
					public filter(param0: string): void;
					public setCompletionMode(param0: com.telerik.android.common.Function2Async): void;
					public onBindViewHolder(param0: com.telerik.widget.list.ListViewHolder, param1: number): void;
					public getHighlightColor(): number;
					public getFilteredList(): javautilList<any>;
					public setInitialListOfItems(param0: javautilList<any>): void;
					public getInitialListOfItems(): javautilList<any>;
					public constructor(param0: androidcontentContext, param1: javautilList<any>, param2: javalangInteger);
					public constructor(param0: androidcontentContext, param1: javautilList<any>, param2: com.telerik.widget.list.ListViewHolder);
					public getCompletionMode(): com.telerik.android.common.Function2Async;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function2Async.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class AutoCompleteAdapterBase extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.autocomplete.AutoCompleteAdapterBase interface with the provided implementation.
					 */
					public constructor(implementation: {
						getCompletionMode(): com.telerik.android.common.Function2Async;
						setCompletionMode(param0: com.telerik.android.common.Function2Async): void;
						getFilteredList(): javautilList<any>;
						filter(param0: string): void;
					});
					public getFilteredList(): javautilList<any>;
					public filter(param0: string): void;
					public setCompletionMode(param0: com.telerik.android.common.Function2Async): void;
					public getCompletionMode(): com.telerik.android.common.Function2Async;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function2Async.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class CompletionMode extends javalangObject {
					public static STARTS_WITH: com.telerik.android.common.Function2Async;
					public static CONTAINS: com.telerik.android.common.Function2Async;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class DisplayMode extends javalangEnum<any> {
					public static PLAIN: com.telerik.widget.autocomplete.DisplayMode;
					public static TOKENS: com.telerik.widget.autocomplete.DisplayMode;
					public static values(): native.Array<com.telerik.widget.autocomplete.DisplayMode>;
					public static valueOf(param0: string): com.telerik.widget.autocomplete.DisplayMode;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class LayoutMode extends javalangEnum<any> {
					public static HORIZONTAL: com.telerik.widget.autocomplete.LayoutMode;
					public static WRAP: com.telerik.widget.autocomplete.LayoutMode;
					public static values(): native.Array<com.telerik.widget.autocomplete.LayoutMode>;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					public static valueOf(param0: string): com.telerik.widget.autocomplete.LayoutMode;
				}
			}
		}
	}
}

import androidwidgetProgressBar = android.widget.ProgressBar;
import androidwidgetEditText = android.widget.EditText;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.EditText.d.ts" />
/// <reference path="./android.widget.PopupWindow.d.ts" />
/// <reference path="./android.widget.ProgressBar.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.AutoCompleteAdapter.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.DisplayMode.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.LayoutMode.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.ShowSuggestionListListener.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.SuggestMode.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenAddedListener.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenDeselectedListener.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenRemovedListener.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenSelectedListener.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenView.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class RadAutoCompleteTextView extends com.telerik.widget.primitives.panels.RadScrollView {
					public setReadOnly(value: boolean): void;
					public resolveAfterFilter(param0: string, param1: boolean): void;
					public getAutocompleteHint(): string;
					public setSuggestionViewAlwaysVisible(param0: boolean): void;
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public bringChildToFront(param0: androidviewView): void;
					public getAppendTextColor(): number;
					public createContextMenu(param0: androidviewContextMenu): void;
					public setSuggestMode(param0: com.telerik.widget.autocomplete.SuggestMode): void;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public setSuggestionViewHeight(param0: number): void;
					public getTextField(): androidwidgetEditText;
					public setAdapter(param0: com.telerik.widget.autocomplete.AutoCompleteAdapter): void;
					public getTokensLayoutMode(): com.telerik.widget.autocomplete.LayoutMode;
					public resolveAfterFilter(param0: string): void;
					public getLayoutDirection(): number;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public getSuggestionView(): com.telerik.widget.list.RadListView;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public setDisplayMode(param0: com.telerik.widget.autocomplete.DisplayMode): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public setAppendTextColor(param0: number): void;
					public isTextAlignmentResolved(): boolean;
					public removeShowSuggestionListListener(param0: com.telerik.widget.autocomplete.ShowSuggestionListListener): void;
					public setMaximumWrapViewHeight(param0: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public setAllowCustomTokens(param0: boolean): void;
					public getMaximumWrapViewHeight(): number;
					public removeTokenRemovedListener(param0: com.telerik.widget.autocomplete.TokenRemovedListener): void;
					public getSuggestMode(): com.telerik.widget.autocomplete.SuggestMode;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public setMinimumCharactersToSearch(param0: number): void;
					public addTokenRemovedListener(param0: com.telerik.widget.autocomplete.TokenRemovedListener): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public setAllowTokenizingWithSymbol(param0: boolean): void;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public getTokenAt(param0: number): com.telerik.widget.autocomplete.TokenView;
					public setTokensLayoutMode(param0: com.telerik.widget.autocomplete.LayoutMode): void;
					public resetAutocomplete(): void;
					public removeToken(param0: com.telerik.widget.autocomplete.TokenView): void;
					public setProgressBar(param0: androidwidgetProgressBar): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public focusSearch(param0: number): androidviewView;
					public getUsingAsyncData(): boolean;
					public addShowSuggestionListListener(param0: com.telerik.widget.autocomplete.ShowSuggestionListListener): void;
					public isLayoutRequested(): boolean;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onAttachedToWindow(): void;
					public getParentForAccessibility(): androidviewViewParent;
					public setCloseButtonView(param0: androidviewView): void;
					public isLayoutDirectionResolved(): boolean;
					public getSuggestionViewAlwaysVisible(): boolean;
					public getMinimumCharactersToSearch(): number;
					public onSaveInstanceState(): androidosParcelable;
					public addTokenSelectedListener(param0: com.telerik.widget.autocomplete.TokenSelectedListener): void;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public getTokens(): javautilList<any>;
					public setAutocompleteHint(param0: string): void;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public getAdapter(): com.telerik.widget.autocomplete.AutoCompleteAdapter;
					public addToken(param0: com.telerik.widget.autocomplete.TokenView): void;
					public addTokenView(param0: com.telerik.widget.autocomplete.TokenModel): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public insertTokenAt(param0: number, param1: com.telerik.widget.autocomplete.TokenView): void;
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public setMaximumTokensCount(param0: number): void;
					public requestFitSystemWindows(): void;
					public getCloseButtonView(): androidviewView;
					public setShowCloseButton(param0: boolean): void;
					public isShowCloseButton(): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public getMaximumTokensCount(): number;
					public removeTokenSelectedListener(param0: com.telerik.widget.autocomplete.TokenSelectedListener): void;
					public setUsingAsyncData(param0: boolean): void;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public addTokenDeselectedListener(param0: com.telerik.widget.autocomplete.TokenDeselectedListener): void;
					public addDidAutoCompleteListener(param0: com.telerik.widget.autocomplete.DidAutoCompleteListener): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public addView(param0: androidviewView, param1: number): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public setAutocompleteIcon(param0: androidgraphicsdrawableDrawable): void;
					public removeAllTokens(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public getPopUp(): androidwidgetPopupWindow;
					public getProgressBar(): androidwidgetProgressBar;
					public removeView(param0: androidviewView): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public canResolveLayoutDirection(): boolean;
					public addTokenAddedListener(param0: com.telerik.widget.autocomplete.TokenAddedListener): void;
					public removeTokenDeselectedListener(param0: com.telerik.widget.autocomplete.TokenDeselectedListener): void;
					public getSuggestionViewHeight(): number;
					public getDisplayMode(): com.telerik.widget.autocomplete.DisplayMode;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public removeTokenAddedListener(param0: com.telerik.widget.autocomplete.TokenAddedListener): void;
					public removeTokenAt(param0: number): void;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public getAllowCustomTokens(): boolean;
					public constructor(param0: androidcontentContext);
					public getAllowTokenizingWitgSymbol(): boolean;
					public addView(param0: androidviewView): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.autocomplete.RadAutoCompleteTextView.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class ShowSuggestionListListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.autocomplete.ShowSuggestionListListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onShowSuggestionList(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: javautilList<any>): void;
					});
					public onShowSuggestionList(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: javautilList<any>): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class SuggestMode extends javalangEnum<any> {
					public static SUGGEST: com.telerik.widget.autocomplete.SuggestMode;
					public static APPEND: com.telerik.widget.autocomplete.SuggestMode;
					public static SUGGEST_APPEND: com.telerik.widget.autocomplete.SuggestMode;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					public static values(): native.Array<com.telerik.widget.autocomplete.SuggestMode>;
					public static valueOf(param0: string): com.telerik.widget.autocomplete.SuggestMode;
				}
			}
		}
	}
}

import androidwidgetImageView = android.widget.ImageView;
import androidwidgetTextView = android.widget.TextView;
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.ImageView.d.ts" />
/// <reference path="./android.widget.TextView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class SuggestionItemViewHolder extends com.telerik.widget.list.ListViewHolder {
					public itemImage: androidwidgetImageView;
					public textView: androidwidgetTextView;
					public constructor(param0: androidviewView);
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenModel.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class TokenAdapter extends javalangObject implements com.telerik.widget.autocomplete.TokenAdapterBase {
					public constructor(param0: androidcontentContext);
					public getViewForTokenObject(param0: com.telerik.widget.autocomplete.TokenModel): com.telerik.widget.autocomplete.TokenView;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.autocomplete.TokenModel.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class TokenAdapterBase extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.autocomplete.TokenAdapterBase interface with the provided implementation.
					 */
					public constructor(implementation: {
						getViewForTokenObject(param0: com.telerik.widget.autocomplete.TokenModel): com.telerik.widget.autocomplete.TokenView;
					});
					public getViewForTokenObject(param0: com.telerik.widget.autocomplete.TokenModel): com.telerik.widget.autocomplete.TokenView;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.autocomplete.RadAutoCompleteTextView.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class TokenAddedListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.autocomplete.TokenAddedListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onTokenAdded(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: com.telerik.widget.autocomplete.TokenModel): void;
					});
					public onTokenAdded(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: com.telerik.widget.autocomplete.TokenModel): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.autocomplete.RadAutoCompleteTextView.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class TokenDeselectedListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.autocomplete.TokenDeselectedListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onTokenDeselected(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: com.telerik.widget.autocomplete.TokenModel): void;
					});
					public onTokenDeselected(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: com.telerik.widget.autocomplete.TokenModel): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.autocomplete.RadAutoCompleteTextView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class DidAutoCompleteListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.autocomplete.DidAutoCompleteListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onDidAutoComplete(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: String): void;
					});
					public onDidAutoComplete(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: String): void;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class TokenModel extends javalangObject implements androidosParcelable {
					public static CREATOR: androidosParcelableCreator<any>;
					public constructor(param0: string, param1: androidgraphicsdrawableDrawable);
					public toString(): string;
					public setText(param0: string): void;
					public getText(): string;
					public constructor(param0: androidosParcel);
					public describeContents(): number;
					public getNsImageName(): string;
					public getImage(): androidgraphicsdrawableDrawable;
					public setNsImageName(param0: string): void;
					public setImage(param0: androidgraphicsdrawableDrawable): void;
					public writeToParcel(param0: androidosParcel, param1: number): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.autocomplete.RadAutoCompleteTextView.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class TokenRemovedListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.autocomplete.TokenRemovedListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onTokenRemoved(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: com.telerik.widget.autocomplete.TokenModel): void;
					});
					public onTokenRemoved(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: com.telerik.widget.autocomplete.TokenModel): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.autocomplete.RadAutoCompleteTextView.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class TokenSelectedListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.autocomplete.TokenSelectedListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onTokenSelected(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: com.telerik.widget.autocomplete.TokenModel): void;
					});
					public onTokenSelected(param0: com.telerik.widget.autocomplete.RadAutoCompleteTextView, param1: com.telerik.widget.autocomplete.TokenModel): void;
				}
			}
		}
	}
}

import androidwidgetLinearLayout = android.widget.LinearLayout;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.widget.autocomplete.TokenModel.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class TokenView extends androidwidgetLinearLayout {
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public focusSearch(param0: number): androidviewView;
					public bringChildToFront(param0: androidviewView): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public isLayoutRequested(): boolean;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public getParentForAccessibility(): androidviewViewParent;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public setSelected(param0: boolean): void;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public getLayoutDirection(): number;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public getModel(): com.telerik.widget.autocomplete.TokenModel;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public requestFitSystemWindows(): void;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public isTextAlignmentResolved(): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public setModel(param0: com.telerik.widget.autocomplete.TokenModel): void;
					public addView(param0: androidviewView, param1: number): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public removeView(param0: androidviewView): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public canResolveLayoutDirection(): boolean;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public constructor(param0: androidcontentContext);
					public addView(param0: androidviewView): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module autocomplete {
				export class XView extends androidviewView {
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public onDraw(param0: androidgraphicsCanvas): void;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public constructor(param0: androidcontentContext);
					public sendAccessibilityEvent(param0: number): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

import androidgraphicsTypeface = android.graphics.Typeface;
import androidutilSparseArray = android.util.SparseArray;
import javalangLong = java.lang.Long;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./android.util.SparseArray.d.ts" />
/// <reference path="./com.telerik.android.common.Procedure.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDayCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDisplayMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarFragment.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarMonthCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarRow.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarStyle.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarTitleCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./java.lang.Long.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarAdapter extends javalangObject {
					public owner: com.telerik.widget.calendar.RadCalendarView;
					public context: androidcontentContext;
					public dateCells: javautilList<any>;
					public weekNumberCells: javautilList<any>;
					public dayNameCells: javautilList<any>;
					public style: com.telerik.widget.calendar.CalendarStyle;
					public workCalendar: javautilCalendar;
					public getDayNameCell(): com.telerik.widget.calendar.CalendarCell;
					public getTitleTypeFace(): androidgraphicsTypeface;
					public setMonthNameTypeFace(param0: androidgraphicsTypeface): void;
					public getDayNameTextColor(): number;
					public setInlineEventTitleTextSize(param0: number): void;
					public getDayNameTextSizeYearMode(): number;
					public setDateTextSizeYearMode(param0: number): void;
					public getTitleBackgroundColor(): number;
					public setTitleTextSize(param0: number): void;
					public setDateCellPaddingVertical(param0: number): void;
					public setWeekNumberTypeFace(param0: androidgraphicsTypeface): void;
					public applyProcedureToDateCells(param0: com.telerik.android.common.Procedure): void;
					public updateDateCell(param0: com.telerik.widget.calendar.CalendarDayCell, param1: javalangLong, param2: javautilList<any>, param3: boolean): void;
					public getDateCell(): com.telerik.widget.calendar.CalendarDayCell;
					public getTodayTextColor(): number;
					public setSelectedCellTypeFace(param0: androidgraphicsTypeface): void;
					public getDayNamePaddingVertical(): number;
					public setDayNameTextColor(param0: number): void;
					public getDayNameTypeFace(): androidgraphicsTypeface;
					public updateWeekNumberCellStyle(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public setWeekNumberTextSize(param0: number): void;
					public setDateTextColorYearMode(param0: number, param1: number): void;
					public getDateTextSizeYearMode(): number;
					public setMonthCellPaddingVertical(param0: number): void;
					public getSelectedCellBackgroundColor(): number;
					public setDayNameTypefaceYearMode(param0: androidgraphicsTypeface): void;
					public generateCalendarRow(): com.telerik.widget.calendar.CalendarRow;
					public getMonthNameCached(param0: number): string;
					public getDayNameTextColorYearModeDisabled(): number;
					public setTodayCellBorderColor(param0: number): void;
					public updateDayNameCellStyle(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public applyProcedureToWeekNumberCells(param0: com.telerik.android.common.Procedure): void;
					public setTodayTextColor(param0: number): void;
					public setTitleTextPosition(param0: number): void;
					public getWeekNumberTextColorDisabled(): number;
					public setMonthNameTextColor(param0: number, param1: number): void;
					public getSelectedCellBorderWidth(): number;
					public setMonthNameTextSize(param0: number): void;
					public getInlineEventTitleTextSize(): number;
					public setDayNameTextPosition(param0: number): void;
					public getTodayCellTypeFace(): androidgraphicsTypeface;
					public getDateTypeFace(): androidgraphicsTypeface;
					public getDayNameCell(param0: number): com.telerik.widget.calendar.CalendarDayCell;
					public getDateCellPaddingVertical(): number;
					public getDayNamePaddingHorizontal(): number;
					public getTitleTextColor(): number;
					public setDayNameTextColorYearMode(param0: number, param1: number): void;
					public setDateTypeFaceYearMode(param0: androidgraphicsTypeface): void;
					public getTodayTypeFace(): androidgraphicsTypeface;
					public updateDateCellStyle(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public applyStyle(param0: com.telerik.widget.calendar.CalendarStyle): void;
					public getDayNameTextPosition(): number;
					public getMonthNameTextPosition(): number;
					public updateWeekNumberCell(param0: com.telerik.widget.calendar.CalendarDayCell, param1: number): void;
					public getTodayCellBorderColor(): number;
					public setTodayCellBackgroundColor(param0: number): void;
					public setDayNameTypeFace(param0: androidgraphicsTypeface): void;
					public setTitleTypeFace(param0: androidgraphicsTypeface): void;
					public reset(): void;
					public setTitleTextColor(param0: number): void;
					public getMonthNameTypeFace(): androidgraphicsTypeface;
					public getPopupEventTimeTextSize(): number;
					public setSelectedCellBorderWidth(param0: number): void;
					public generateCalendarDayCell(): com.telerik.widget.calendar.CalendarDayCell;
					public updateMonthCellStyle(param0: com.telerik.widget.calendar.CalendarMonthCell): void;
					public getDateValues(): androidutilSparseArray<any>;
					public getTitleTextSize(): number;
					public updateDayNameCell(param0: com.telerik.widget.calendar.CalendarDayCell, param1: number): void;
					public setDateTextPosition(param0: number): void;
					public getMonthNameTextSizeCompact(): number;
					public setWeekNumberTextColor(param0: number, param1: number): void;
					public setDateCellPaddingHorizontal(param0: number): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public setTodayCellTypeFace(param0: androidgraphicsTypeface): void;
					public setDateTextColor(param0: number, param1: number): void;
					public getInlineEventsBackgroundColor(): number;
					public setWeekNumberBackgroundColor(param0: number, param1: number): void;
					public setDayNameBackgroundColor(param0: number): void;
					public generateCalendarMonthCell(): com.telerik.widget.calendar.CalendarMonthCell;
					public getDateTextColorEnabled(): number;
					public getTodayCellBorderWidth(): number;
					public setInlineEventTimeStartTextColor(param0: number): void;
					public setSelectedCellTextColor(param0: number): void;
					public setTitleBackgroundColor(param0: number): void;
					public setInlineEventTimeEndTextColor(param0: number): void;
					public setTodayBackgroundColor(param0: number): void;
					public setDateTypeFace(param0: androidgraphicsTypeface): void;
					public getDateTextColorDisabled(): number;
					public setDayNameTextSize(param0: number): void;
					public updateTitleCellStyle(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public getTitleTextPosition(): number;
					public setInlineEventsBackgroundColor(param0: number): void;
					public setTodayCellSelectedTextColor(param0: number): void;
					public getInlineEventTimeEndTextColor(): number;
					public getDateTypeFaceYearMode(): androidgraphicsTypeface;
					public getMonthNameTextSize(): number;
					public applyProcedureToAllCells(param0: com.telerik.android.common.Procedure): void;
					public setPopupEventsWindowBackgroundColor(param0: number): void;
					public setMonthCellPaddingHorizontal(param0: number): void;
					public getWeekNumberCell(): com.telerik.widget.calendar.CalendarDayCell;
					public getWeekNumberTextSize(): number;
					public setMonthNameTextPosition(param0: number): void;
					public getDateTextSize(): number;
					public setPopupEventTimeTextSize(param0: number): void;
					public setTodayTypeFace(param0: androidgraphicsTypeface): void;
					public getDayNameTextColorYearModeEnabled(): number;
					public getPopupEventsWindowBackgroundColor(): number;
					public getMonthNameTextColorEnabled(): number;
					public getDateCellPaddingHorizontal(): number;
					public setStyle(param0: com.telerik.widget.calendar.CalendarStyle): void;
					public getTitleCell(param0: number, param1: com.telerik.widget.calendar.CalendarDisplayMode): com.telerik.widget.calendar.CalendarTitleCell;
					public getWeekNumberTextColorEnabled(): number;
					public getStyle(): com.telerik.widget.calendar.CalendarStyle;
					public setSelectedCellBackgroundColor(param0: number): void;
					public setDateValues(param0: androidutilSparseArray<any>): void;
					public setInlineEventTimeStartTextSize(param0: number): void;
					public updateTitle(param0: com.telerik.widget.calendar.CalendarDayCell, param1: number, param2: com.telerik.widget.calendar.CalendarDisplayMode): void;
					public setWeekNumberTextPosition(param0: number): void;
					public setDayNameTextSizeYearMode(param0: number): void;
					public getDateCellBackgroundColorEnabled(): number;
					public setDateTextSize(param0: number): void;
					public getTodayCellBackgroundColor(): number;
					public generateFragment(): com.telerik.widget.calendar.CalendarFragment;
					public setPopupEventTitleTextSize(param0: number): void;
					public getDateCellBackgroundColorDisabled(): number;
					public getSelectedCellTypeFace(): androidgraphicsTypeface;
					public getInlineEventTimeStartTextSize(): number;
					public getMonthNameTextColorDisabled(): number;
					public getDateTextColorYearModeEnabled(): number;
					public getWeekNumberBackgroundColorEnabled(): number;
					public getTodayBackgroundColor(): number;
					public getMonthCellPaddingHorizontal(): number;
					public getDayNameBackgroundColor(): number;
					public getInlineEventTimeStartTextColor(): number;
					public getDayNameTextSize(): number;
					public getWeekNumberTextPosition(): number;
					public getWeekNumberTypeFace(): androidgraphicsTypeface;
					public updateCalendarMonthCell(param0: com.telerik.widget.calendar.CalendarMonthCell, param1: number): void;
					public getDateTextColorYearModeDisabled(): number;
					public setMonthNameTextSizeCompact(param0: number): void;
					public setDayNamePadding(param0: number, param1: number): void;
					public getDayNameTypefaceYearMode(): androidgraphicsTypeface;
					public getTodayCellSelectedTextColor(): number;
					public getPopupEventTitleTextSize(): number;
					public setDateCellBackgroundColor(param0: number, param1: number): void;
					public getTodayCellTextColor(): number;
					public getWeekNumberBackgroundColorDisabled(): number;
					public getDateTextPosition(): number;
					public setTodayCellTextColor(param0: number): void;
					public setTodayCellBorderWidth(param0: number): void;
					public getMonthCell(): com.telerik.widget.calendar.CalendarMonthCell;
					public getMonthCellPaddingVertical(): number;
					public setInlineEventTimeEndTextSize(param0: number): void;
					public applyProcedureToDayNameCells(param0: com.telerik.android.common.Procedure): void;
					public getSelectedCellTextColor(): number;
					public updateMonthNamesCache(): void;
					public getInlineEventTimeEndTextSize(): number;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarFragment.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarScrollManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarAnimationsManager extends javalangObject {
					public owner: com.telerik.widget.calendar.RadCalendarView;
					public scrollManager: com.telerik.widget.calendar.CalendarScrollManager;
					public flingSpeed: number;
					public snapSpeed: number;
					public currentSnapDistance: number;
					public currentSnapFramesCount: number;
					public currentSnapFrameCount: number;
					public activeDateRefreshRequested: boolean;
					public flingVelocityX: number;
					public flingVelocityY: number;
					public currentSnapOffsetX: number;
					public currentSnapOffsetY: number;
					public minFlingDistance: number;
					public onSnapComplete(): void;
					public reset(): void;
					public getSnapSpeed(): number;
					public setFriction(param0: number): void;
					public animateToNextDate(): void;
					public onFlingComplete(): void;
					public setFlingSpeed(param0: number): void;
					public setMinFlingDistance(param0: number): void;
					public setSnapSpeed(param0: number): void;
					public getFriction(): number;
					public beginAnimation(param0: com.telerik.widget.calendar.CalendarFragment, param1: com.telerik.widget.calendar.CalendarFragment, param2: androidgraphicsRect): void;
					public getFlingSpeed(): number;
					public snapFragments(): void;
					public getMinFlingDistance(): number;
					public onInvalidate(): void;
					public animationInProcess(): boolean;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public setVelocity(param0: number, param1: number): void;
					public animateToPreviousDate(): void;
				}
			}
		}
	}
}

import androidgraphicsPaint = android.graphics.Paint;
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCellType.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarRow.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export abstract class CalendarCell extends com.telerik.widget.calendar.CalendarTextElement {
					public cellType: com.telerik.widget.calendar.CalendarCellType;
					public cellToday: boolean;
					public getDate(): number;
					public getBorderColor(): number;
					public borderPaint(): androidgraphicsPaint;
					public setCellType(param0: com.telerik.widget.calendar.CalendarCellType): void;
					public isToday(): boolean;
					public getRow(): com.telerik.widget.calendar.CalendarRow;
					public postRender(param0: androidgraphicsCanvas): void;
					public setLastCellInRow(param0: boolean): void;
					public isDrawBorderInsideCell(): boolean;
					public isWeekend(): boolean;
					public isLastCellInRow(): boolean;
					public getBorderWidth(): number;
					public getCellType(): com.telerik.widget.calendar.CalendarCellType;
					public setDrawBorderInsideCell(param0: boolean): void;
					public updateBorder(): void;
					public setBorderWidth(param0: number): void;
					public setRow(param0: com.telerik.widget.calendar.CalendarRow): void;
					public setAsToday(param0: boolean): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public setDate(param0: number): void;
					public setBorderColor(param0: number): void;
				}
			}
		}
	}
}

import javalangFloat = java.lang.Float;
/// <reference path="./java.lang.Float.d.ts" />
/// <reference path="./java.lang.Integer.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export abstract class CalendarCellStyle extends javalangObject {
					public getFontName(): string;
					public setBorderWidth(param0: javalangFloat): void;
					public getTextColor(): javalangInteger;
					public getBackgroundColor(): javalangInteger;
					public getTextSize(): javalangFloat;
					public getBorderColor(): javalangInteger;
					public setTextSize(param0: javalangFloat): void;
					public setBorderColor(param0: javalangInteger): void;
					public setBackgroundColor(param0: javalangInteger): void;
					public getFontStyle(): javalangInteger;
					public constructor();
					public setFontStyle(param0: javalangInteger): void;
					public setFontName(param0: string): void;
					public setTextColor(param0: javalangInteger): void;
					public getBorderWidth(): javalangFloat;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarCellType extends javalangEnum<any> {
					public static Date: com.telerik.widget.calendar.CalendarCellType;
					public static WeekNumber: com.telerik.widget.calendar.CalendarCellType;
					public static DayName: com.telerik.widget.calendar.CalendarCellType;
					public static Title: com.telerik.widget.calendar.CalendarCellType;
					public static valueOf(param0: string): com.telerik.widget.calendar.CalendarCellType;
					public static values(): native.Array<com.telerik.widget.calendar.CalendarCellType>;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.widget.calendar.ElementVisibility.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarDayCell extends com.telerik.widget.calendar.CalendarCell {
					public getSecondaryTextColorDisabled(): number;
					public setSecondaryTextSize(param0: number): void;
					public setIsFromCurrentMonth(param0: boolean): void;
					public setSecondaryText(param0: string): void;
					public setSecondaryTextColor(param0: number, param1: number): void;
					public drawEvents(param0: androidgraphicsCanvas): void;
					public getSecondaryText(): string;
					public arrange(param0: number, param1: number, param2: number, param3: number): void;
					public render(param0: androidgraphicsCanvas): void;
					public isSelectable(): boolean;
					public setEvents(param0: javautilList<any>): void;
					public setSelected(param0: boolean): void;
					public getIsFromCurrentMonth(): boolean;
					public getSecondaryTextColorEnabled(): number;
					public updateTextColor(): void;
					public getEvents(): javautilList<any>;
					public onAlphaChanged(): void;
					public secondaryTextPaint(): androidgraphicsPaint;
					public calculateSecondaryTextPosition(): void;
					public setEnabled(param0: boolean): void;
					public getSecondaryTextPosition(): number;
					public getSecondaryTextSize(): number;
					public setSecondaryTextPosition(param0: number): void;
					public updateSecondaryTextColor(): void;
					public setSelectable(param0: boolean): void;
					public setVisibility(param0: com.telerik.widget.calendar.ElementVisibility): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public isSelected(): boolean;
				}
			}
		}
	}
}

import javalangBoolean = java.lang.Boolean;
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCellType.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDisplayMode.d.ts" />
/// <reference path="./java.lang.Boolean.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarDayCellFilter extends javalangObject {
					public setIsFromCurrentMonth(param0: javalangBoolean): void;
					public getCalendarDisplayMode(): com.telerik.widget.calendar.CalendarDisplayMode;
					public setCellType(param0: com.telerik.widget.calendar.CalendarCellType): void;
					public setIsToday(param0: javalangBoolean): void;
					public getIsToday(): javalangBoolean;
					public getIsWeekend(): javalangBoolean;
					public setCalendarDisplayMode(param0: com.telerik.widget.calendar.CalendarDisplayMode): void;
					public getCellType(): com.telerik.widget.calendar.CalendarCellType;
					public setCustom(param0: com.telerik.android.common.Function): void;
					public constructor();
					public getIsFromCurrentMonth(): javalangBoolean;
					public getCustom(): com.telerik.android.common.Function;
					public getIsSelected(): javalangBoolean;
					public setIsSelected(param0: javalangBoolean): void;
					public setIsWeekend(param0: javalangBoolean): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.CalendarDayCellFilter.d.ts" />
/// <reference path="./java.lang.Integer.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarDayCellStyle extends com.telerik.widget.calendar.CalendarCellStyle {
					public getTextPosition(): javalangInteger;
					public setFilter(param0: com.telerik.widget.calendar.CalendarDayCellFilter): void;
					public setPaddingHorizontal(param0: javalangInteger): void;
					public getFilter(): com.telerik.widget.calendar.CalendarDayCellFilter;
					public constructor();
					public setTextPosition(param0: javalangInteger): void;
					public getPaddingHorizontal(): javalangInteger;
					public getPaddingVertical(): javalangInteger;
					public setPaddingVertical(param0: javalangInteger): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarDisplayMode extends javalangEnum<any> {
					public static Month: com.telerik.widget.calendar.CalendarDisplayMode;
					public static Year: com.telerik.widget.calendar.CalendarDisplayMode;
					public static Week: com.telerik.widget.calendar.CalendarDisplayMode;
					public static Day: com.telerik.widget.calendar.CalendarDisplayMode;
					public static values(): native.Array<com.telerik.widget.calendar.CalendarDisplayMode>;
					public static valueOf(param0: string): com.telerik.widget.calendar.CalendarDisplayMode;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Bitmap.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./com.telerik.widget.calendar.ElementVisibility.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export abstract class CalendarElement extends javalangObject {
					public static TOP: number;
					public static LEFT: number;
					public static RIGHT: number;
					public static BOTTOM: number;
					public static CENTER_HORIZONTAL: number;
					public static CENTER_VERTICAL: number;
					public static CENTER: number;
					public virtualOffsetX: number;
					public virtualOffsetY: number;
					public context: androidcontentContext;
					public owner: com.telerik.widget.calendar.RadCalendarView;
					public backgroundPaint: androidgraphicsPaint;
					public parent: com.telerik.widget.calendar.CalendarElement;
					public visibility: com.telerik.widget.calendar.ElementVisibility;
					public enabled: boolean;
					public alpha: number;
					public setPaddingHorizontal(param0: number): void;
					public getBitmapPosition(): number;
					public getBitmap(): androidgraphicsBitmap;
					public getBottom(): number;
					public virtualBottom(): number;
					public arrange(param0: number, param1: number, param2: number, param3: number): void;
					public postRender(param0: androidgraphicsCanvas): void;
					public render(param0: androidgraphicsCanvas): void;
					public virtualTranslate(param0: number, param1: number): void;
					public getPaddingLeft(): number;
					public setPadding(param0: number, param1: number, param2: number, param3: number): void;
					public isEnabled(): boolean;
					public getPaddingTop(): number;
					public onAlphaChanged(): void;
					public setParent(param0: com.telerik.widget.calendar.CalendarElement): void;
					public setEnabled(param0: boolean): void;
					public getAlpha(): number;
					public getPaddingRight(): number;
					public updateBackgroundColor(): void;
					public getRight(): number;
					public getHeight(): number;
					public calcBorderRect(): androidgraphicsRect;
					public virtualRight(): number;
					public getPaddingBottom(): number;
					public setBitmapPosition(param0: number): void;
					public translate(param0: number, param1: number): void;
					public setAlpha(param0: number): void;
					public virtualLeft(): number;
					public getLeft(): number;
					public getVirtualOffsetX(): number;
					public getBackgroundColorDisabled(): number;
					public getBackgroundColorEnabled(): number;
					public setVirtualOffsets(param0: number, param1: number): void;
					public pointIsInsideElement(param0: number, param1: number): boolean;
					public getParent(): com.telerik.widget.calendar.CalendarElement;
					public setBackgroundColorEnabled(param0: number): void;
					public getVirtualOffsetY(): number;
					public setVirtualOffsetX(param0: number): void;
					public getVisibility(): com.telerik.widget.calendar.ElementVisibility;
					public onArrange(): void;
					public getWidth(): number;
					public setBackgroundColorDisabled(param0: number): void;
					public setBitmap(param0: androidgraphicsBitmap): void;
					public setPaddingVertical(param0: number): void;
					public setBackgroundColor(param0: number): void;
					public virtualTop(): number;
					public getTop(): number;
					public setBackgroundColor(param0: number, param1: number): void;
					public setVisibility(param0: com.telerik.widget.calendar.ElementVisibility): void;
					public setVirtualOffsetY(param0: number): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDisplayMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./com.telerik.widget.calendar.decorations.Decorator.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarFragment extends com.telerik.widget.calendar.CalendarElement {
					public owner: com.telerik.widget.calendar.RadCalendarView;
					public id: number;
					public firstFullRowIndex(): number;
					public setVirtualOffsets(param0: number, param1: number): void;
					public updateDecorations(): void;
					public recycle(): void;
					public postRender(param0: androidgraphicsCanvas, param1: boolean): void;
					public postRender(param0: androidgraphicsCanvas): void;
					public getDisplayDate(): number;
					public render(param0: androidgraphicsCanvas): void;
					public setCurrentFragment(param0: boolean): void;
					public rowHeight(): number;
					public rows(): javautilArrayList<any>;
					public drawRows(param0: androidgraphicsCanvas): void;
					public onAlphaChanged(): void;
					public setEnabled(param0: boolean): void;
					public drawGridLines(param0: androidgraphicsCanvas): void;
					public updateBackgroundColor(): void;
					public reset(): void;
					public render(param0: androidgraphicsCanvas, param1: boolean): void;
					public onArrange(): void;
					public isCurrentFragment(): boolean;
					public init(): void;
					public setVirtualXPosition(param0: number): void;
					public setVirtualYPosition(param0: number): void;
					public setDisplayDate(param0: number): void;
					public getCellAtLocation(param0: number, param1: number): com.telerik.widget.calendar.CalendarCell;
					public getVirtualXPosition(): number;
					public getVirtualYPosition(): number;
					public getDisplayMode(): com.telerik.widget.calendar.CalendarDisplayMode;
					public lastRowWithCurrentDateCellsIndex(): number;
					public setDisplayMode(param0: com.telerik.widget.calendar.CalendarDisplayMode): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public updateDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell, param1: com.telerik.widget.calendar.decorations.Decorator): void;
					public trim(): void;
				}
			}
		}
	}
}

import androidviewGestureDetectorOnGestureListener = android.view.GestureDetector.OnGestureListener;
import androidviewGestureDetectorOnDoubleTapListener = android.view.GestureDetector.OnDoubleTapListener;
import androidviewScaleGestureDetectorOnScaleGestureListener = android.view.ScaleGestureDetector.OnScaleGestureListener;
import androidviewScaleGestureDetector = android.view.ScaleGestureDetector;
import androidviewGestureDetector = android.view.GestureDetector;
/// <reference path="./android.view.GestureDetector.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.ScaleGestureDetector.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarAnimationsManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDayCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDisplayMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarScrollManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarSelectionManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./com.telerik.widget.calendar.ScrollMode.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarGestureManager extends javalangObject implements androidviewGestureDetectorOnGestureListener, androidviewGestureDetectorOnDoubleTapListener, androidviewScaleGestureDetectorOnScaleGestureListener {
					public owner: com.telerik.widget.calendar.RadCalendarView;
					public animationsManager: com.telerik.widget.calendar.CalendarAnimationsManager;
					public scrollManager: com.telerik.widget.calendar.CalendarScrollManager;
					public selectionManager: com.telerik.widget.calendar.CalendarSelectionManager;
					public onCellClickListener: com.telerik.widget.calendar.RadCalendarView.OnCellClickListener;
					public displayMode: com.telerik.widget.calendar.CalendarDisplayMode;
					public isScaleInProgress: boolean;
					public currentScaleFactorIsPositive: boolean;
					public gestureDetector: androidviewGestureDetector;
					public scaleGestureDetector: androidviewScaleGestureDetector;
					public scrollMode: com.telerik.widget.calendar.ScrollMode;
					public onPinchClose(): void;
					public setUsingDragToMakeRangeSelection(param0: boolean): void;
					public setOnCellClickListener(param0: com.telerik.widget.calendar.RadCalendarView.OnCellClickListener): void;
					public onPinchOpen(): void;
					public onScale(param0: androidviewScaleGestureDetector): boolean;
					public handleTouch(param0: androidviewMotionEvent): boolean;
					public onDown(param0: androidviewMotionEvent): boolean;
					public isUsingSwipeDownToChangeDisplayMode(): boolean;
					public handleOnSingleTapUp(): boolean;
					public onLongPress(param0: androidviewMotionEvent): void;
					public onSingleTapUp(param0: androidviewMotionEvent): boolean;
					public onDoubleTap(param0: androidviewMotionEvent): boolean;
					public setPinchCloseToChangeDisplayMode(param0: boolean): void;
					public isUsingSwipeUpToChangeDisplayMode(): boolean;
					public isUsingTapToChangeDisplayMode(): boolean;
					public onScroll(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public handleTapGesture(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public getOnCellClickListener(): com.telerik.widget.calendar.RadCalendarView.OnCellClickListener;
					public handleSingleTapConfirmed(param0: androidviewMotionEvent): boolean;
					public setSwipeDownToChangeDisplayMode(param0: boolean): void;
					public handleScroll(param0: number, param1: number, param2: number, param3: number): boolean;
					public isUsingPinchOpenToChangeDisplayMode(): boolean;
					public setDoubleTapToChangeDisplayMode(param0: boolean): void;
					public suspendScroll(): void;
					public isUsingPinchCloseToChangeDisplayMode(): boolean;
					public handleOnScaleEnd(): void;
					public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public onScaleBegin(param0: androidviewScaleGestureDetector): boolean;
					public enableScroll(): void;
					public isUsingDragToMakeRangeSelection(): boolean;
					public onShowPress(param0: androidviewMotionEvent): void;
					public onFingerUp(): void;
					public onSingleTapConfirmed(param0: androidviewMotionEvent): boolean;
					public handleOnScaleBegin(): boolean;
					public onDoubleTapEvent(param0: androidviewMotionEvent): boolean;
					public setSwipeUpToChangeDisplayMode(param0: boolean): void;
					public handleDoubleTap(param0: androidviewMotionEvent): boolean;
					public handleFling(param0: number, param1: number): boolean;
					public handleOnScale(param0: androidviewScaleGestureDetector): boolean;
					public onScaleEnd(param0: androidviewScaleGestureDetector): void;
					public setPinchOpenToChangeDisplayMode(param0: boolean): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public handleOnDown(): boolean;
					public isUsingDoubleTapToChangeDisplayMode(): boolean;
					public setTapToChangeDisplayMode(param0: boolean): void;
				}
				export module CalendarGestureManager {
					export class OnTransitionCallback extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.calendar.CalendarGestureManager$OnTransitionCallback interface with the provided implementation.
						 */
						public constructor(implementation: {
							onTransitionComplete(): void;
						});
						public onTransitionComplete(): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./android.util.SparseArray.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarMonthCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarMonthCell extends com.telerik.widget.calendar.CalendarCell {
					public static todayPaint: androidgraphicsPaint;
					public monthNameBounds: androidgraphicsRect;
					public monthNameBoundsCompact: androidgraphicsRect;
					public dayBounds: androidgraphicsRect;
					public dateBoundsOneSymbol: androidgraphicsRect;
					public dateBoundsTwoSymbols: androidgraphicsRect;
					public monthAvailableSpace: androidgraphicsRect;
					public monthNamePaint: androidgraphicsPaint;
					public datePaint: androidgraphicsPaint;
					public dayNamesPaint: androidgraphicsPaint;
					public typefaceLight: androidgraphicsTypeface;
					public daysOfWeek: androidutilSparseArray<any>;
					public dateValues: androidutilSparseArray<any>;
					public offsetLeft: number;
					public offsetTop: number;
					public offsetRight: number;
					public offsetBottom: number;
					public horizontalSlot: number;
					public verticalSlot: number;
					public monthNameTextSize: number;
					public monthNameTextSizeCompact: number;
					public monthNamePosition: number;
					public monthNameTextColorEnabled: number;
					public monthNameTextColorDisabled: number;
					public monthNameTypeFace: androidgraphicsTypeface;
					public dayNameTextSize: number;
					public dayNameTextColorEnabled: number;
					public dayNameTextColorDisabled: number;
					public dayNameTypeFace: androidgraphicsTypeface;
					public dateTextSize: number;
					public dateTextColorEnabled: number;
					public dateTextColorDisabled: number;
					public dateTypeFace: androidgraphicsTypeface;
					public monthName: string;
					public monthNamePositionX: number;
					public monthNamePositionY: number;
					public updateMonthNamePosition(): void;
					public getDateTextColorEnabled(): number;
					public setMonthNameTypeFace(param0: androidgraphicsTypeface): void;
					public getDayNameTextColorDisabled(): number;
					public render(param0: androidgraphicsCanvas): void;
					public setDayNameTextColorEnabled(param0: number): void;
					public setDateTypeFace(param0: androidgraphicsTypeface): void;
					public getDateTextColorDisabled(): number;
					public setDayNameTextSize(param0: number): void;
					public updateTextColors(): void;
					public onAlphaChanged(): void;
					public setMonthNameColor(param0: number, param1: number): void;
					public updateValuesCache(): void;
					public updateAvailableSpace(): void;
					public setEnabled(param0: boolean): void;
					public updateTypeFace(): void;
					public getDayNameTypeFace(): androidgraphicsTypeface;
					public renderTitle(param0: com.telerik.widget.calendar.CalendarMonthCell.MonthCellElement, param1: androidgraphicsCanvas): void;
					public updateMonthNameColor(): void;
					public setMonthNameTextColorEnabled(param0: number): void;
					public getMonthNameTextSize(): number;
					public setOffsetTop(param0: number): void;
					public updateElementsColors(): void;
					public isDrawingToday(param0: number): boolean;
					public setMonthNameTextPosition(param0: number): void;
					public getDateTextSize(): number;
					public renderDayName(param0: com.telerik.widget.calendar.CalendarMonthCell.MonthCellElement, param1: androidgraphicsCanvas): void;
					public getMonthNameTextColorEnabled(): number;
					public updateDateTextColor(): void;
					public setMonthNameTextSize(param0: number): void;
					public updateElements(): void;
					public setMonthNameTextColorDisabled(param0: number): void;
					public getDateTypeFace(): androidgraphicsTypeface;
					public renderDates(param0: androidgraphicsCanvas): void;
					public setOffsetLeft(param0: number): void;
					public updateTextBounds(): void;
					public renderMonthName(param0: androidgraphicsCanvas): void;
					public setDateTextSize(param0: number): void;
					public updatePositions(): void;
					public getMonthNameTextColorDisabled(): number;
					public renderDayNames(param0: androidgraphicsCanvas): void;
					public getOffsetLeft(): number;
					public getMonthNamePosition(): number;
					public drawElementBackground(param0: androidgraphicsCanvas, param1: com.telerik.widget.calendar.CalendarMonthCell.MonthCellDateElement, param2: number, param3: androidgraphicsRect): void;
					public getDayNameTextSize(): number;
					public getDayNameTextColorEnabled(): number;
					public renderElementBackground(param0: com.telerik.widget.calendar.CalendarMonthCell.MonthCellDateElement, param1: androidgraphicsCanvas): void;
					public setDayNamesColor(param0: number, param1: number): void;
					public setMonthName(param0: string): void;
					public setDateTextColorEnabled(param0: number): void;
					public getOffsetBottom(): number;
					public setMonthNameTextSizeCompact(param0: number): void;
					public setDayNameTypeFace(param0: androidgraphicsTypeface): void;
					public getOffsetTop(): number;
					public renderDate(param0: com.telerik.widget.calendar.CalendarMonthCell.MonthCellDateElement, param1: androidgraphicsCanvas): void;
					public getMonthNameTypeFace(): androidgraphicsTypeface;
					public onArrange(): void;
					public setDayNameTextColorDisabled(param0: number): void;
					public numberOfDays(): number;
					public getMonthNameTextSizeCompact(): number;
					public getOffsetRight(): number;
					public setOffsetBottom(param0: number): void;
					public setDateTextColorDisabled(param0: number): void;
					public updateDayNameBounds(): void;
					public setOffsetRight(param0: number): void;
					public updateDayNamesColor(): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public getMonthName(): string;
					public setDate(param0: number): void;
					public setDateTextColor(param0: number, param1: number): void;
				}
				export module CalendarMonthCell {
					export class MonthCellDateElement extends com.telerik.widget.calendar.CalendarMonthCell.MonthCellElement {
						public dayOfMonth: number;
						public time: number;
						public isToday: boolean;
						public isWeekend: boolean;
						public constructor(param0: com.telerik.widget.calendar.CalendarMonthCell);
						public reset(): void;
					}
					export class MonthCellDayNameElement extends com.telerik.widget.calendar.CalendarMonthCell.MonthCellElement {
						public time: number;
						public isWeekend: boolean;
						public constructor(param0: com.telerik.widget.calendar.CalendarMonthCell);
						public reset(): void;
					}
					export class MonthCellElement extends javalangObject {
						public x: number;
						public y: number;
						public text: string;
						public color: number;
						public textSize: number;
						public typeface: androidgraphicsTypeface;
						public backgroundColor: number;
						public constructor(param0: com.telerik.widget.calendar.CalendarMonthCell);
						public reset(): void;
					}
					export class MonthCellTitleElement extends com.telerik.widget.calendar.CalendarMonthCell.MonthCellElement {
						public constructor(param0: com.telerik.widget.calendar.CalendarMonthCell);
						public reset(): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./java.lang.Boolean.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarMonthCellFilter extends javalangObject {
					public getTextIsToday(): javalangBoolean;
					public setTextIsMonthName(param0: javalangBoolean): void;
					public getTextIsDayName(): javalangBoolean;
					public getMonthIsCurrent(): javalangBoolean;
					public getTextIsWeekend(): javalangBoolean;
					public setTextIsToday(param0: javalangBoolean): void;
					public setMonthIsCurrent(param0: javalangBoolean): void;
					public setTextIsDayName(param0: javalangBoolean): void;
					public setTextIsDate(param0: javalangBoolean): void;
					public getTextIsCustomDate(): com.telerik.android.common.Function;
					public setTextIsWeekend(param0: javalangBoolean): void;
					public constructor();
					public getMonthIsCustomDate(): com.telerik.android.common.Function;
					public getTextIsDate(): javalangBoolean;
					public setMonthIsCustomDate(param0: com.telerik.android.common.Function): void;
					public setTextIsCustomDate(param0: com.telerik.android.common.Function): void;
					public getTextIsMonthName(): javalangBoolean;
					public getMonthIsCompact(): javalangBoolean;
					public setMonthIsCompact(param0: javalangBoolean): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.CalendarMonthCellFilter.d.ts" />
/// <reference path="./java.lang.Integer.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarMonthCellStyle extends com.telerik.widget.calendar.CalendarCellStyle {
					public getFilter(): com.telerik.widget.calendar.CalendarMonthCellFilter;
					public setFilter(param0: com.telerik.widget.calendar.CalendarMonthCellFilter): void;
					public constructor();
					public getTextBackgroundColor(): javalangInteger;
					public setTextBackgroundColor(param0: javalangInteger): void;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarRow extends com.telerik.widget.calendar.CalendarElement {
					public static WEEK_NUMBER_CELL_INDEX: number;
					public cells: javautilArrayList<any>;
					public getCell(param0: number): com.telerik.widget.calendar.CalendarCell;
					public setVirtualOffsets(param0: number, param1: number): void;
					public onArrange(): void;
					public addCell(param0: com.telerik.widget.calendar.CalendarCell): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public postRender(param0: androidgraphicsCanvas): void;
					public onAlphaChanged(): void;
					public render(param0: androidgraphicsCanvas): void;
					public cellsCount(): number;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarFragment.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarScrollManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./com.telerik.widget.calendar.ScrollMode.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarScrollManager extends com.telerik.widget.calendar.CalendarElement {
					public scrollMode: com.telerik.widget.calendar.ScrollMode;
					public activeDate: number;
					public arrangePassed: boolean;
					public currentDragFragmentHolder: com.telerik.widget.calendar.CalendarScrollManager.FragmentHolder;
					public previousFragmentHolder: com.telerik.widget.calendar.CalendarScrollManager.FragmentHolder;
					public currentFragmentHolder: com.telerik.widget.calendar.CalendarScrollManager.FragmentHolder;
					public nextFragmentHolder: com.telerik.widget.calendar.CalendarScrollManager.FragmentHolder;
					public decorationsLayer: com.telerik.widget.calendar.CalendarScrollManager.DecorationsLayer;
					public onSnapComplete(): void;
					public shiftFragmentsBackward(): void;
					public fragmentIsVisible(param0: com.telerik.widget.calendar.CalendarFragment): boolean;
					public updateDecorations(): void;
					public previousFragment(): com.telerik.widget.calendar.CalendarFragment;
					public arrange(param0: number, param1: number, param2: number, param3: number): void;
					public shiftFragmentsForward(): void;
					public postRender(param0: androidgraphicsCanvas): void;
					public handleScrollWithOverlap(param0: number, param1: number): void;
					public handleVerticalOverlappingScroll(param0: number): void;
					public render(param0: androidgraphicsCanvas): void;
					public getActiveDate(): number;
					public attemptCurrentFragmentUpdate(param0: number, param1: number): void;
					public getFragmentExposure(param0: com.telerik.widget.calendar.CalendarScrollManager.FragmentHolder): number;
					public getMaxScrollOffset(): number;
					public currentSnapOffsetY(): number;
					public scrollShouldBeHorizontal(): boolean;
					public setMaxScrollOffset(param0: number): void;
					public updateEventsForFragments(): void;
					public onAlphaChanged(): void;
					public reset(): void;
					public getCellsAtLocation(param0: number, param1: number): javautilList<any>;
					public currentSnapOffsetX(): number;
					public onArrange(): void;
					public reset(param0: boolean): void;
					public requestFragmentsSwitch(param0: boolean): void;
					public handleScrollWithoutOverlap(param0: number, param1: number): void;
					public nextFragment(): com.telerik.widget.calendar.CalendarFragment;
					public scroll(param0: number, param1: number): boolean;
					public snapFragments(): void;
					public currentFragment(): com.telerik.widget.calendar.CalendarFragment;
					public updateActiveFragment(): void;
					public handleHorizontalOverlappingScroll(param0: number): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public onDateChanged(): void;
					public setActiveDate(param0: number): void;
				}
				export module CalendarScrollManager {
					export class DecorationsLayer extends androidviewView {
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public onTouchEvent(param0: androidviewMotionEvent): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public constructor(param0: com.telerik.widget.calendar.CalendarScrollManager, param1: androidcontentContext);
						public onDraw(param0: androidgraphicsCanvas): void;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public constructor(param0: androidcontentContext);
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					}
					export class FragmentHolder extends androidviewViewGroup {
						public isLayoutRequested(): boolean;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public focusableViewAvailable(param0: androidviewView): void;
						public canResolveLayoutDirection(): boolean;
						public showContextMenuForChild(param0: androidviewView): boolean;
						public onTouchEvent(param0: androidviewMotionEvent): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public childDrawableStateChanged(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public requestTransparentRegion(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public getParent(): androidviewViewParent;
						public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
						public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
						public isTextAlignmentResolved(): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
						public recomputeViewAttributes(param0: androidviewView): void;
						public getTextDirection(): number;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
						public invalidateLayers(): void;
						public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
						public clearChildFocus(param0: androidviewView): void;
						public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
						public getParentForAccessibility(): androidviewViewParent;
						public setFragment(param0: com.telerik.widget.calendar.CalendarFragment): void;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public isLayoutDirectionResolved(): boolean;
						public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
						public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public requestLayout(): void;
						public constructor(param0: androidcontentContext);
						public isTextDirectionResolved(): boolean;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public focusSearch(param0: number): androidviewView;
						public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
						public fragment(): com.telerik.widget.calendar.CalendarFragment;
						public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
						public addView(param0: androidviewView, param1: number): void;
						public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
						public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
						public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
						public constructor(param0: com.telerik.widget.calendar.CalendarScrollManager, param1: androidcontentContext);
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public postInvalidateLayers(): void;
						public createContextMenu(param0: androidviewContextMenu): void;
						public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
						public removeView(param0: androidviewView): void;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public requestFitSystemWindows(): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
						public onStopNestedScroll(param0: androidviewView): void;
						public bringChildToFront(param0: androidviewView): void;
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public focusSearch(param0: androidviewView, param1: number): androidviewView;
						public addView(param0: androidviewView): void;
						public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
						public getTextAlignment(): number;
						public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
						public addView(param0: androidviewView, param1: number, param2: number): void;
						public translate(param0: number, param1: number): void;
						public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
					export module FragmentHolder {
						export class LayerView extends androidviewView {
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public constructor(param0: androidcontentContext);
							public sendAccessibilityEvent(param0: number): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public onTouchEvent(param0: androidviewMotionEvent): boolean;
							public onDraw(param0: androidgraphicsCanvas): void;
							public constructor(param0: com.telerik.widget.calendar.CalendarScrollManager.FragmentHolder, param1: androidcontentContext);
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.CalendarDayCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarSelectionMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.DateRange.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarSelectionManager extends javalangObject {
					public owner: com.telerik.widget.calendar.RadCalendarView;
					public selectionMode: com.telerik.widget.calendar.CalendarSelectionMode;
					public onSelectedDatesChangedListener: com.telerik.widget.calendar.RadCalendarView.OnSelectedDatesChangedListener;
					public selectedDates: javautilList<any>;
					public selectedRange: com.telerik.widget.calendar.DateRange;
					public handleTapGesture(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public handleTouchForMultipleSelection(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public selectedCells(): javautilList<any>;
					public setOnSelectedDatesChangedListener(param0: com.telerik.widget.calendar.RadCalendarView.OnSelectedDatesChangedListener): void;
					public setSelection(param0: javautilList<any>): void;
					public setSelection(param0: javautilList<any>, param1: com.telerik.widget.calendar.RadCalendarView.SelectionContext): void;
					public syncSelectedCellsWithDates(): void;
					public setSelectedRange(param0: com.telerik.widget.calendar.DateRange): void;
					public setSelectedDates(param0: javautilList<any>): void;
					public handleTouchForSingleSelection(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public getDateRangeList(param0: number, param1: number): javautilList<any>;
					public getSelectedDates(): javautilList<any>;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public getSelectedRange(): com.telerik.widget.calendar.DateRange;
					public getOnSelectedDatesChangedListener(): com.telerik.widget.calendar.RadCalendarView.OnSelectedDatesChangedListener;
					public handleTouchForRangeSelection(param0: com.telerik.widget.calendar.CalendarDayCell): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarSelectionMode extends javalangEnum<any> {
					public static None: com.telerik.widget.calendar.CalendarSelectionMode;
					public static Single: com.telerik.widget.calendar.CalendarSelectionMode;
					public static Range: com.telerik.widget.calendar.CalendarSelectionMode;
					public static Multiple: com.telerik.widget.calendar.CalendarSelectionMode;
					public static values(): native.Array<com.telerik.widget.calendar.CalendarSelectionMode>;
					public static valueOf(param0: string): com.telerik.widget.calendar.CalendarSelectionMode;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Typeface.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarStyle extends javalangObject {
					public dateTextSize: number;
					public dayNameTextColor: number;
					public weekNumberTextColorEnabled: number;
					public weekNumberTextColorDisabled: number;
					public dateTextColorEnabled: number;
					public dateTextColorDisabled: number;
					public dateCellBackgroundColorEnabled: number;
					public dateCellBackgroundColorDisabled: number;
					public weekNumberBackgroundColorEnabled: number;
					public weekNumberBackgroundColorDisabled: number;
					public dayNameBackgroundColor: number;
					public monthNameTextColorEnabled: number;
					public monthNameTextColorDisabled: number;
					public dateTextPosition: number;
					public dayNameTextPosition: number;
					public weekNumberTextPosition: number;
					public weekNumberTextSize: number;
					public dateTypeFace: androidgraphicsTypeface;
					public dayNameTypeFace: androidgraphicsTypeface;
					public weekNumberTypeFace: androidgraphicsTypeface;
					public monthNameTypeFace: androidgraphicsTypeface;
					public monthNameTextSize: number;
					public monthNameTextPosition: number;
					public monthNameTextSizeCompact: number;
					public dayNameTextColorYearModeEnabled: number;
					public dayNameTextColorYearModeDisabled: number;
					public dayNameTextSize: number;
					public dayNameTextSizeYearMode: number;
					public dayNameTypefaceYearMode: androidgraphicsTypeface;
					public dateTextColorYearModeEnabled: number;
					public dateTextColorYearModeDisabled: number;
					public dateTextSizeYearMode: number;
					public dateTypeFaceYearMode: androidgraphicsTypeface;
					public titleTextSize: number;
					public titleTypeFace: androidgraphicsTypeface;
					public titleTextColor: number;
					public titleTextPosition: number;
					public titleBackgroundColor: number;
					public gridLinesColor: number;
					public selectedCellBackgroundColor: number;
					public todayCellBackgroundColor: number;
					public todayBackgroundColor: number;
					public todayTextColor: number;
					public todayCellTextColor: number;
					public todayTypeFace: androidgraphicsTypeface;
					public todayCellTypeFace: androidgraphicsTypeface;
					public dateCellPaddingHorizontal: number;
					public dateCellPaddingVertical: number;
					public monthCellPaddingVertical: number;
					public monthCellPaddingHorizontal: number;
					public decorationsColor: number;
					public decorationsStrokeWidth: number;
					public dayNamePaddingHorizontal: number;
					public dayNamePaddingVertical: number;
					public todayBorderColor: number;
					public todayBorderWidth: number;
					public selectedCellTextColor: number;
					public selectedCellTypeFace: androidgraphicsTypeface;
					public todayCellSelectedTextColor: number;
					public popupEventsWindowBackgroundColor: number;
					public inlineEventsBackgroundColor: number;
					public popupEventTitleTextSize: number;
					public popupEventTimeTextSize: number;
					public inlineEventTitleTextSize: number;
					public inlineEventTimeStartTextSize: number;
					public inlineEventTimeEndTextSize: number;
					public inlineEventTimeStartTextColor: number;
					public inlineEventTimeEndTextColor: number;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarStyle.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarStyles extends javalangObject {
					public static light(param0: androidcontentContext): com.telerik.widget.calendar.CalendarStyle;
					public constructor();
					public static materialLight(param0: androidcontentContext): com.telerik.widget.calendar.CalendarStyle;
					public static dark(param0: androidcontentContext): com.telerik.widget.calendar.CalendarStyle;
					public static materialDark(param0: androidcontentContext): com.telerik.widget.calendar.CalendarStyle;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarTextElement extends com.telerik.widget.calendar.CalendarElement {
					public text: string;
					public textPaint: androidgraphicsPaint;
					public textColorEnabled: number;
					public textColorDisabled: number;
					public textPosition: number;
					public textPositionY(): number;
					public arrange(param0: number, param1: number, param2: number, param3: number): void;
					public setTextSize(param0: number): void;
					public setTypeface(param0: androidgraphicsTypeface): void;
					public render(param0: androidgraphicsCanvas): void;
					public getTextColorDisabled(): number;
					public setText(param0: string): void;
					public updateTextColor(): void;
					public calculateTextPosition(): void;
					public getTextColorEnabled(): number;
					public getTextPaint(): androidgraphicsPaint;
					public setTextColorEnabled(param0: number): void;
					public getTextSize(): number;
					public setTextColorDisabled(param0: number): void;
					public textPositionX(): number;
					public setPadding(param0: number, param1: number, param2: number, param3: number): void;
					public onAlphaChanged(): void;
					public setEnabled(param0: boolean): void;
					public updateTypeFace(): void;
					public setTextColor(param0: number): void;
					public getText(): string;
					public setTextColor(param0: number, param1: number): void;
					public getTypeface(): androidgraphicsTypeface;
					public setTextPosition(param0: number): void;
					public getTextPosition(): number;
					public getTextColor(): number;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public setTextPaint(param0: androidgraphicsPaint): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.CalendarDisplayMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarTitleCell extends com.telerik.widget.calendar.CalendarDayCell {
					public setCalendarDisplayMode(param0: com.telerik.widget.calendar.CalendarDisplayMode): void;
					public getCalendarDisplayMode(): com.telerik.widget.calendar.CalendarDisplayMode;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.CalendarDisplayMode.d.ts" />
/// <reference path="./java.lang.Long.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CalendarTools extends javalangObject {
					public static getDateStart(param0: number): number;
					public static isWeekend(param0: number): boolean;
					public static getLastDateInYear(param0: number): number;
					public static getFirstDateInMonth(param0: number): number;
					public static getFirstDateInYear(param0: number): number;
					public static getLastDateInWeek(param0: number): number;
					public constructor();
					public static getDateEnd(param0: number): number;
					public static getFirstMonthInYear(param0: number): number;
					public static getLastMonthInYear(param0: number): number;
					public static getFirstDateInWeek(param0: number): number;
					public static calculateNewValue(param0: boolean, param1: number, param2: com.telerik.widget.calendar.CalendarDisplayMode): number;
					public static getShortDayName(param0: number): string;
					public static getLastDateInMonth(param0: number): number;
					public static getFirstDisplayDate(param0: javalangLong): number;
					public static getFirstDateOfWeekWith(param0: javalangLong): number;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class CellDecorationsLayer extends com.telerik.widget.calendar.decorations.SegmentDecorator {
					public addDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell): void;
					public addDecorationForCell(param0: number, param1: number, param2: number, param3: number, param4: number): void;
					public removeDecorationForCell(param0: number, param1: number, param2: number, param3: number, param4: number): void;
					public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
					public addDecorationForCell(param0: number, param1: com.telerik.widget.calendar.CalendarCell): void;
					public addDecorationForCell(param0: number, param1: number, param2: number, param3: number): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class DateRange extends javalangObject {
					public equals(param0: javalangObject): boolean;
					public getEnd(): number;
					public setStart(param0: number): void;
					public setEnd(param0: number): void;
					public hashCode(): number;
					public getStart(): number;
					public constructor(param0: number, param1: number);
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class ElementVisibility extends javalangEnum<any> {
					public static Visible: com.telerik.widget.calendar.ElementVisibility;
					public static Invisible: com.telerik.widget.calendar.ElementVisibility;
					public static Gone: com.telerik.widget.calendar.ElementVisibility;
					public static valueOf(param0: string): com.telerik.widget.calendar.ElementVisibility;
					public static values(): native.Array<com.telerik.widget.calendar.ElementVisibility>;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

import androidwidgetArrayAdapter = android.widget.ArrayAdapter;
import androidwidgetFilter = android.widget.Filter;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.Filter.d.ts" />
/// <reference path="./com.telerik.widget.calendar.EventsInlineManager.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class EventsInlineManager extends com.telerik.widget.calendar.EventsManager {
				}
				export module EventsInlineManager {
					export class EventInlineAdapter extends androidwidgetArrayAdapter<any> {
						public isEnabled(param0: number): boolean;
						public areAllItemsEnabled(): boolean;
						public constructor();
						public getFilter(): androidwidgetFilter;
						public constructor(param0: androidcontentContext, param1: number);
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: javautilList<any>);
						public getView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
						public constructor(param0: androidcontentContext, param1: number, param2: javautilList<any>);
						public setDropDownViewTheme(param0: androidcontentresResourcesTheme): void;
						public getDropDownViewTheme(): androidcontentresResourcesTheme;
						public constructor(param0: com.telerik.widget.calendar.EventsInlineManager, param1: androidcontentContext, param2: number, param3: native.Array<com.telerik.widget.calendar.EventsManager.EventInfo>);
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: native.Array<javalangObject>);
						public constructor(param0: androidcontentContext, param1: number, param2: number);
						public constructor(param0: androidcontentContext, param1: number, param2: native.Array<javalangObject>);
						public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					}
				}
			}
		}
	}
}

import androidwidgetAdapterViewOnItemLongClickListener = android.widget.AdapterView.OnItemLongClickListener;
import androidwidgetListView = android.widget.ListView;
import androidtextEditable = android.text.Editable;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.ArrayAdapter.d.ts" />
/// <reference path="./com.telerik.widget.calendar.EventsManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.Event.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export abstract class EventsManager extends javalangObject {
					public owner: com.telerik.widget.calendar.RadCalendarView;
					public calendar: javautilCalendar;
					public eventInfos: native.Array<com.telerik.widget.calendar.EventsManager.EventInfo>;
					public listView: com.telerik.widget.calendar.EventsManager.EventsListView;
					public setOnItemClickListener(param0: androidwidgetAdapterViewOnItemClickListener): void;
					public prepareEventsInfo(param0: javautilList<any>): void;
					public setOnItemLongClickListener(param0: androidwidgetAdapterViewOnItemLongClickListener): void;
					public setAdapter(param0: androidwidgetArrayAdapter<any>): void;
					public getAdapter(): androidwidgetArrayAdapter<any>;
					public eventsForDateVisible(date: number): boolean;
					public toggleEventsVisibilityForDate(date: number);
					public eventsForCellVisible(cell: com.telerik.widget.calendar.CalendarDayCell): boolean;
					public toggleEventsVisibilityForCell(cell: com.telerik.widget.calendar.CalendarDayCell): void;
					public closeEvents(): void;
				}
				export module EventsManager {
					export class EventInfo extends javalangObject {
						public endTime(): number;
						public startTimeFormatted(): string;
						public title(): string;
						public endTimeFormatted(): string;
						public originalEvent(): com.telerik.widget.calendar.events.Event;
						public startTime(): number;
						public constructor(param0: com.telerik.widget.calendar.EventsManager);
						public toString(): string;
					}
					export class EventsListView extends androidwidgetListView {
						public isLayoutRequested(): boolean;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public focusableViewAvailable(param0: androidviewView): void;
						public canResolveLayoutDirection(): boolean;
						public constructor(param0: com.telerik.widget.calendar.EventsManager, param1: androidcontentContext);
						public showContextMenuForChild(param0: androidviewView): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public childDrawableStateChanged(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public requestTransparentRegion(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public getParent(): androidviewViewParent;
						public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public onDraw(param0: androidgraphicsCanvas): void;
						public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
						public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
						public isTextAlignmentResolved(): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
						public recomputeViewAttributes(param0: androidviewView): void;
						public getTextDirection(): number;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
						public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
						public clearChildFocus(param0: androidviewView): void;
						public onFilterComplete(param0: number): void;
						public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
						public getParentForAccessibility(): androidviewViewParent;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public isLayoutDirectionResolved(): boolean;
						public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
						public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public afterTextChanged(param0: androidtextEditable): void;
						public requestLayout(): void;
						public onGlobalLayout(): void;
						public constructor(param0: androidcontentContext);
						public deferNotifyDataSetChanged(): void;
						public onTouchModeChanged(param0: boolean): void;
						public isTextDirectionResolved(): boolean;
						public onRemoteAdapterDisconnected(): void;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public focusSearch(param0: number): androidviewView;
						public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
						public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
						public addView(param0: androidviewView, param1: number): void;
						public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
						public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
						public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public createContextMenu(param0: androidviewContextMenu): void;
						public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
						public removeView(param0: androidviewView): void;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public requestFitSystemWindows(): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
						public onRemoteAdapterConnected(): boolean;
						public onStopNestedScroll(param0: androidviewView): void;
						public bringChildToFront(param0: androidviewView): void;
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public focusSearch(param0: androidviewView, param1: number): androidviewView;
						public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						public addView(param0: androidviewView): void;
						public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
						public getTextAlignment(): number;
						public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
						public addView(param0: androidviewView, param1: number, param2: number): void;
						public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.Filter.d.ts" />
/// <reference path="./com.telerik.widget.calendar.EventsPopupManager.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class EventsPopupManager extends com.telerik.widget.calendar.EventsManager {
				}
				export module EventsPopupManager {
					export class EventPopupAdapter extends androidwidgetArrayAdapter<any> {
						public isEnabled(param0: number): boolean;
						public areAllItemsEnabled(): boolean;
						public constructor();
						public getFilter(): androidwidgetFilter;
						public constructor(param0: androidcontentContext, param1: number);
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: javautilList<any>);
						public getView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
						public constructor(param0: androidcontentContext, param1: number, param2: javautilList<any>);
						public setDropDownViewTheme(param0: androidcontentresResourcesTheme): void;
						public getDropDownViewTheme(): androidcontentresResourcesTheme;
						public constructor(param0: com.telerik.widget.calendar.EventsPopupManager, param1: androidcontentContext, param2: number, param3: native.Array<com.telerik.widget.calendar.EventsManager.EventInfo>);
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: native.Array<javalangObject>);
						public constructor(param0: androidcontentContext, param1: number, param2: number);
						public constructor(param0: androidcontentContext, param1: number, param2: native.Array<javalangObject>);
						public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class GridLinesLayer extends javalangObject {
					public paint: androidgraphicsPaint;
					public drawLine(param0: number, param1: number, param2: number, param3: number, param4: androidgraphicsCanvas, param5: number): void;
					public setColor(param0: number): void;
					public drawLine(param0: number, param1: number, param2: number, param3: number, param4: androidgraphicsCanvas): void;
					public getColor(): number;
					public constructor();
					public setWidth(param0: number): void;
					public getWidth(): number;
					public getPaint(): androidgraphicsPaint;
					public setPaint(param0: androidgraphicsPaint): void;
				}
			}
		}
	}
}

import javautilHashtable = java.util.Hashtable;
import javautilLocale = java.util.Locale;
import androidviewanimationAnimationAnimationListener = android.view.animation.Animation.AnimationListener;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.ScaleGestureDetector.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.Procedure.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarAdapter.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarAnimationsManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDayCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDayCellStyle.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDisplayMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarFragment.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarGestureManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarMonthCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarMonthCellStyle.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarRow.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarScrollManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarSelectionManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarSelectionMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarTextElement.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CellDecorationsLayer.d.ts" />
/// <reference path="./com.telerik.widget.calendar.DateRange.d.ts" />
/// <reference path="./com.telerik.widget.calendar.EventsManager.d.ts" />
/// <reference path="./com.telerik.widget.calendar.GridLinesLayer.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./com.telerik.widget.calendar.ScrollMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.WeekNumbersDisplayMode.d.ts" />
/// <reference path="./com.telerik.widget.calendar.decorations.Decorator.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.EventAdapter.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.EventsDisplayMode.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
/// <reference path="./java.util.Hashtable.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.Locale.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class RadCalendarView extends androidviewViewGroup {
					public initialRowHeight: number;
					public selectionMode: com.telerik.widget.calendar.CalendarSelectionMode;
					public suspendDisplayModeChange: boolean;
					public getTitleHeight(): number;
					public recomputeViewAttributes(param0: androidviewView): void;
					public bringChildToFront(param0: androidviewView): void;
					public setCustomizationRule(param0: com.telerik.android.common.Procedure): void;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public getDisplayDate(): number;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public animateToPrevious(): void;
					public setGridLinesLayer(param0: com.telerik.widget.calendar.GridLinesLayer): void;
					public isYearModeCompact(): boolean;
					public addMonthCellStyle(param0: com.telerik.widget.calendar.CalendarMonthCellStyle): void;
					public isAnimationEnabled(): boolean;
					public invalidate(param0: androidgraphicsRect): void;
					public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public addDayCellStyle(param0: com.telerik.widget.calendar.CalendarDayCellStyle): void;
					public invalidate(param0: number, param1: number, param2: number, param3: number): void;
					public invalidateArrange(): void;
					public childDrawableStateChanged(param0: androidviewView): void;
					public getLocale(): javautilLocale;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public setAdapter(param0: com.telerik.widget.calendar.CalendarAdapter): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public getCellDecorator(): com.telerik.widget.calendar.decorations.Decorator;
					public onScale(param0: androidviewScaleGestureDetector): boolean;
					public getShowCellDecorations(): boolean;
					public onDraw(param0: androidgraphicsCanvas): void;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public setInOriginalSizeForAllModes(param0: boolean): void;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public getCalendar(): javautilCalendar;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public onSingleTapUp(param0: androidviewMotionEvent): boolean;
					public getShowDayNames(): boolean;
					public setOnSelectedDatesChangedListener(param0: com.telerik.widget.calendar.RadCalendarView.OnSelectedDatesChangedListener): void;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public setOnDisplayDateChangedListener(param0: com.telerik.widget.calendar.RadCalendarView.OnDisplayDateChangedListener): void;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public onDoubleTap(param0: androidviewMotionEvent): boolean;
					public setDateToColor(param0: com.telerik.android.common.Function): void;
					public isDrawingHorizontalGridLines(): boolean;
					public changeDisplayMode(param0: com.telerik.widget.calendar.CalendarDisplayMode, param1: boolean): void;
					public beginUpdate(): void;
					public getSelectedDates(): javautilList<any>;
					public endUpdate(): void;
					public getSelectedRange(): com.telerik.widget.calendar.DateRange;
					public sendAccessibilityEvent(param0: number): void;
					public getShowTitle(): boolean;
					public onDetachedFromWindow(): void;
					public isDrawingAllCells(): boolean;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public setYearModeCompact(param0: boolean): void;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public onScaleBegin(param0: androidviewScaleGestureDetector): boolean;
					public setAnimationEnabled(param0: boolean): void;
					public dayNames(): com.telerik.widget.calendar.CalendarRow;
					public getMaxDate(): number;
					public onScaleEnd(param0: androidviewScaleGestureDetector): void;
					public beginUpdate(param0: boolean): void;
					public getAnimationsManager(): com.telerik.widget.calendar.CalendarAnimationsManager;
					public onDown(param0: androidviewMotionEvent): boolean;
					public focusSearch(param0: number): androidviewView;
					public isLayoutRequested(): boolean;
					public setCellDecorator(param0: com.telerik.widget.calendar.decorations.Decorator): void;
					public getCustomizationRule(): com.telerik.android.common.Procedure;
					public getParentForAccessibility(): androidviewViewParent;
					public isLayoutDirectionResolved(): boolean;
					public onSaveInstanceState(): androidosParcelable;
					public getBackgroundColor(): number;
					public endUpdate(param0: boolean): void;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public setDisplayDate(param0: number): void;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public getDayNameToColor(): com.telerik.android.common.Function;
					public changeDisplayMode(param0: com.telerik.widget.calendar.CalendarDisplayMode): void;
					public canShiftToNextDate(): boolean;
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public setDisplayMode(param0: com.telerik.widget.calendar.CalendarDisplayMode): void;
					public requestFitSystemWindows(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public canResolveTextDirection(): boolean;
					public getDateToColor(): com.telerik.android.common.Function;
					public addView(param0: androidviewView, param1: number): void;
					public setCellDecorationsLayer(param0: com.telerik.widget.calendar.CellDecorationsLayer): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public setCalendar(param0: javautilCalendar): void;
					public setDrawingVerticalGridLines(param0: boolean): void;
					public setDrawingHorizontalGridLines(param0: boolean): void;
					public removeView(param0: androidviewView): void;
					public setShowCellDecorations(param0: boolean): void;
					public canShiftToPreviousDate(): boolean;
					public canResolveLayoutDirection(): boolean;
					public dateToCell(): javautilHashtable<any, any>;
					public isHorizontalScroll(): boolean;
					public animateMonthView(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: androidviewanimationAnimationAnimationListener): void;
					public getEventsDisplayMode(): com.telerik.widget.calendar.events.EventsDisplayMode;
					public animateToNext(): void;
					public setBackgroundColor(param0: number): void;
					public onShowPress(param0: androidviewMotionEvent): void;
					public rebuildCalendar(): void;
					public setMaxDate(param0: number): void;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public title(): com.telerik.widget.calendar.CalendarTextElement;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public constructor(param0: androidcontentContext);
					public addView(param0: androidviewView): void;
					public onTouchEvent(param0: androidviewMotionEvent): boolean;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public setHorizontalScroll(param0: boolean): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public setEventsDisplayMode(param0: com.telerik.widget.calendar.events.EventsDisplayMode): void;
					public setScrollManager(param0: com.telerik.widget.calendar.CalendarScrollManager): void;
					public getSelectionManager(): com.telerik.widget.calendar.CalendarSelectionManager;
					public setSelectionMode(param0: com.telerik.widget.calendar.CalendarSelectionMode): void;
					public isTextDirectionResolved(): boolean;
					public setScrollMode(param0: com.telerik.widget.calendar.ScrollMode): void;
					public updateFragmentWeekMode(param0: com.telerik.widget.calendar.CalendarFragment, param1: number, param2: boolean): void;
					public getScrollManager(): com.telerik.widget.calendar.CalendarScrollManager;
					public updateFragmentMonthMode(param0: com.telerik.widget.calendar.CalendarFragment, param1: number, param2: boolean): void;
					public updateCalendar(): void;
					public getLayoutDirection(): number;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public getCellDecorationsLayer(): com.telerik.widget.calendar.decorations.Decorator;
					public setDayNamesHeight(param0: number): void;
					public setSelectionManager(param0: com.telerik.widget.calendar.CalendarSelectionManager): void;
					public isDrawingVerticalGridLines(): boolean;
					public getOnSelectedDatesChangedListener(): com.telerik.widget.calendar.RadCalendarView.OnSelectedDatesChangedListener;
					public eventsManager(): com.telerik.widget.calendar.EventsManager;
					public setEventAdapter(param0: com.telerik.widget.calendar.events.EventAdapter): void;
					public setGestureManager(param0: com.telerik.widget.calendar.CalendarGestureManager): void;
					public setShowDayNames(param0: boolean): void;
					public invalidate(): void;
					public isTextAlignmentResolved(): boolean;
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public setWeekNumbersDisplayMode(param0: com.telerik.widget.calendar.WeekNumbersDisplayMode): void;
					public canResolveTextAlignment(): boolean;
					public getWeekNumbersDisplayMode(): com.telerik.widget.calendar.WeekNumbersDisplayMode;
					public setShowGridLines(param0: boolean): void;
					public requestLayout(): void;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public setLocale(param0: javautilLocale): void;
					public updateFragments(param0: boolean): void;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public applyMonthCellStyles(param0: com.telerik.widget.calendar.CalendarMonthCell): void;
					public removeDayCellStyle(param0: com.telerik.widget.calendar.CalendarDayCellStyle): void;
					public getGestureManager(): com.telerik.widget.calendar.CalendarGestureManager;
					public updateFragmentYearMode(param0: com.telerik.widget.calendar.CalendarFragment, param1: number, param2: boolean): void;
					public onDoubleTapEvent(param0: androidviewMotionEvent): boolean;
					public setShowTitle(param0: boolean): void;
					public setOnCellClickListener(param0: com.telerik.widget.calendar.RadCalendarView.OnCellClickListener): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public getMinDate(): number;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onAttachedToWindow(): void;
					public isInOriginalSizeForAllModes(): boolean;
					public notifyDataChanged(): void;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public setDayNameToColor(param0: com.telerik.android.common.Function): void;
					public setMinDate(param0: number): void;
					public getShowGridLines(): boolean;
					public shiftDate(param0: boolean): void;
					public getScrollMode(): com.telerik.widget.calendar.ScrollMode;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public removeMonthCellStyle(param0: com.telerik.widget.calendar.CalendarMonthCellStyle): void;
					public setDrawingAllCells(param0: boolean): void;
					public setSelectedDates(param0: javautilList<any>): void;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public onLongPress(param0: androidviewMotionEvent): void;
					public getParent(): androidviewViewParent;
					public getDayNamesHeight(): number;
					public getSelectionMode(): com.telerik.widget.calendar.CalendarSelectionMode;
					public updateFragments(): void;
					public getGridLinesLayer(): com.telerik.widget.calendar.GridLinesLayer;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public setTitleHeight(param0: number): void;
					public applyDayCellStyles(param0: com.telerik.widget.calendar.CalendarDayCell): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public onScroll(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public setAnimationsManager(param0: com.telerik.widget.calendar.CalendarAnimationsManager): void;
					public getAdapter(): com.telerik.widget.calendar.CalendarAdapter;
					public setDisplayDateSilent(param0: number): void;
					public createImageFromView(param0: androidviewView): androidgraphicsdrawableDrawable;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public getEventAdapter(): com.telerik.widget.calendar.events.EventAdapter;
					public getDisplayMode(): com.telerik.widget.calendar.CalendarDisplayMode;
					public onSingleTapConfirmed(param0: androidviewMotionEvent): boolean;
					public setSelectedRange(param0: com.telerik.widget.calendar.DateRange): void;
					public setOnDisplayModeChangedListener(param0: com.telerik.widget.calendar.RadCalendarView.OnDisplayModeChangedListener): void;
					public drawDayNames(param0: androidgraphicsCanvas): void;
					public getDayView(): com.telerik.widget.calendar.dayview.CalendarDayView;
				}
				export module RadCalendarView {
					export class CalendarTask extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.calendar.RadCalendarView$CalendarTask interface with the provided implementation.
						 */
						public constructor(implementation: {
							displayMode(): com.telerik.widget.calendar.CalendarDisplayMode;
							execute(): void;
						});
						public displayMode(): com.telerik.widget.calendar.CalendarDisplayMode;
						public execute(): void;
					}
					export class DatesHolderView extends androidviewViewGroup {
						public isLayoutRequested(): boolean;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public focusableViewAvailable(param0: androidviewView): void;
						public canResolveLayoutDirection(): boolean;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: androidcontentContext, param2: androidutilAttributeSet);
						public showContextMenuForChild(param0: androidviewView): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public childDrawableStateChanged(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public requestTransparentRegion(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public getParent(): androidviewViewParent;
						public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
						public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
						public isTextAlignmentResolved(): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
						public recomputeViewAttributes(param0: androidviewView): void;
						public getTextDirection(): number;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: androidcontentContext, param2: androidutilAttributeSet, param3: number);
						public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
						public clearChildFocus(param0: androidviewView): void;
						public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
						public getParentForAccessibility(): androidviewViewParent;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public isLayoutDirectionResolved(): boolean;
						public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
						public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public requestLayout(): void;
						public constructor(param0: androidcontentContext);
						public isTextDirectionResolved(): boolean;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public focusSearch(param0: number): androidviewView;
						public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
						public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
						public addView(param0: androidviewView, param1: number): void;
						public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: androidcontentContext);
						public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
						public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public createContextMenu(param0: androidviewContextMenu): void;
						public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
						public removeView(param0: androidviewView): void;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public requestFitSystemWindows(): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
						public onStopNestedScroll(param0: androidviewView): void;
						public bringChildToFront(param0: androidviewView): void;
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public focusSearch(param0: androidviewView, param1: number): androidviewView;
						public addView(param0: androidviewView): void;
						public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
						public getTextAlignment(): number;
						public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
						public addView(param0: androidviewView, param1: number, param2: number): void;
						public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
					export class FragmentHolderView extends androidviewView {
						public arrangePassed: boolean;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public sendAccessibilityEvent(param0: number): void;
						public setActive(param0: boolean): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: androidcontentContext);
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public onDraw(param0: androidgraphicsCanvas): void;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: androidcontentContext, param2: com.telerik.widget.calendar.CalendarFragment);
						public constructor(param0: androidcontentContext);
						public isActive(): boolean;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					}
					export class HeadWrapperView extends androidviewView {
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public sendAccessibilityEvent(param0: number): void;
						public invalidate(param0: number, param1: number, param2: number, param3: number): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: androidcontentContext);
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public bringToFront(): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public onDraw(param0: androidgraphicsCanvas): void;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public invalidate(): void;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public constructor(param0: androidcontentContext);
						public invalidate(param0: androidgraphicsRect): void;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					}
					export class OnCellClickListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.calendar.RadCalendarView$OnCellClickListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onCellClick(param0: com.telerik.widget.calendar.CalendarCell): void;
						});
						public onCellClick(param0: com.telerik.widget.calendar.CalendarCell): void;
					}
					export class OnDisplayDateChangedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.calendar.RadCalendarView$OnDisplayDateChangedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onDisplayDateChanged(param0: number, param1: number): void;
						});
						public onDisplayDateChanged(param0: number, param1: number): void;
					}
					export class OnDisplayModeChangedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.calendar.RadCalendarView$OnDisplayModeChangedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onDisplayModeChanged(param0: com.telerik.widget.calendar.CalendarDisplayMode, param1: com.telerik.widget.calendar.CalendarDisplayMode): void;
						});
						public onDisplayModeChanged(param0: com.telerik.widget.calendar.CalendarDisplayMode, param1: com.telerik.widget.calendar.CalendarDisplayMode): void;
					}
					export class OnSelectedDatesChangedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.calendar.RadCalendarView$OnSelectedDatesChangedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onSelectedDatesChanged(param0: com.telerik.widget.calendar.RadCalendarView.SelectionContext): void;
						});
						public onSelectedDatesChanged(param0: com.telerik.widget.calendar.RadCalendarView.SelectionContext): void;
					}
					export class SelectionContext extends javalangObject {
						public constructor();
						public newSelection(): javautilList<any>;
						public datesRemoved(): javautilList<any>;
						public oldSelection(): javautilList<any>;
						public datesAdded(): javautilList<any>;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class ScrollMode extends javalangEnum<any> {
					public static None: com.telerik.widget.calendar.ScrollMode;
					public static Plain: com.telerik.widget.calendar.ScrollMode;
					public static Sticky: com.telerik.widget.calendar.ScrollMode;
					public static Free: com.telerik.widget.calendar.ScrollMode;
					public static Combo: com.telerik.widget.calendar.ScrollMode;
					public static Overlap: com.telerik.widget.calendar.ScrollMode;
					public static Stack: com.telerik.widget.calendar.ScrollMode;
					public static valueOf(param0: string): com.telerik.widget.calendar.ScrollMode;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					public static values(): native.Array<com.telerik.widget.calendar.ScrollMode>;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export class WeekNumbersDisplayMode extends javalangEnum<any> {
					public static None: com.telerik.widget.calendar.WeekNumbersDisplayMode;
					public static Inline: com.telerik.widget.calendar.WeekNumbersDisplayMode;
					public static Block: com.telerik.widget.calendar.WeekNumbersDisplayMode;
					public static valueOf(param0: string): com.telerik.widget.calendar.WeekNumbersDisplayMode;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					public static values(): native.Array<com.telerik.widget.calendar.WeekNumbersDisplayMode>;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./java.util.Hashtable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export abstract class CellDecorator extends com.telerik.widget.calendar.decorations.Decorator {
						public stroked: boolean;
						public scale: number;
						public cellsForDecoration: javautilHashtable<any, any>;
						public toggleDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell, param1: number): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public getScale(): number;
						public clearDecorations(): void;
						public setStroked(param0: boolean): void;
						public setScale(param0: number): void;
						public isStroked(): boolean;
						public renderLayer(param0: number, param1: androidgraphicsCanvas): void;
						public renderDecorationForCell(param0: androidgraphicsCanvas, param1: com.telerik.widget.calendar.CalendarCell): void;
						public toggleDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell): void;
					}
				}
			}
		}
	}
}

import javatextSimpleDateFormat = java.text.SimpleDateFormat;
/// <reference path="./java.text.SimpleDateFormat.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module dayview {
					export class DayEventsViewStyle {
						public setBackgroundColor(param0: number): void;
						public setTimeLabelFormat(param0: javatextSimpleDateFormat): void;
						public setTimeLabelColor(param0: number): void;
						public setTimeLabelTextSize(param0: number): void;
						public setTimeLinesWidth(param0: number): void;
						public setTimeLinesColor(param0: number): void;
					}
					export class AllDayEventsViewStyle {
						public setBackgroundColor(param0: number): void;
						public setAllDayText(param0: string): void;
						public setAllDayTextIsVisible(param0: boolean): void;
						public setAllDayTextSize(param0: number): void;
						public setAllDayTextColor(param0: number): void;
					}
					export class CalendarDayView extends android.widget.LinearLayout {
						public getDayEventsViewStyle(): DayEventsViewStyle;
						public getAllDayEventsViewStyle(): AllDayEventsViewStyle;
					}
					export module CalendarDayView {
						export class EventViewTapListener extends javalangObject {
							public constructor(implementation: {
								onEventViewTap(event: com.telerik.widget.calendar.events.Event): void;
							});
							public onEventViewTap(event: com.telerik.widget.calendar.events.Event): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export class CircularCellDecorator extends com.telerik.widget.calendar.decorations.CellDecorator {
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: number);
						public setRadius(radius: number);
						public getRadius(): number;
						public renderDecorationForCell(param0: androidgraphicsCanvas, param1: com.telerik.widget.calendar.CalendarCell): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export class CircularRangeDecorator extends com.telerik.widget.calendar.decorations.RangeDecorator {
						public renderIndicator(param0: androidgraphicsCanvas, param1: number, param2: number): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public renderShape(param0: androidgraphicsCanvas, param1: androidgraphicsRectF): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export abstract class Decorator extends javalangObject {
						public paint: androidgraphicsPaint;
						public strokeWidth: number;
						public color: number;
						public owner: com.telerik.widget.calendar.RadCalendarView;
						public getColor(): number;
						public getStrokeWidth(): number;
						public setStrokeWidth(param0: number): void;
						public render(param0: androidgraphicsCanvas): void;
						public toggleDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell, param1: number): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public clearDecorations(): void;
						public setColor(param0: number): void;
						public renderLayer(param0: number, param1: androidgraphicsCanvas): void;
						public toggleDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export abstract class RangeDecorator extends com.telerik.widget.calendar.decorations.CellDecorator {
						public firstDateForDecoration: number;
						public lastDateForDecoration: number;
						public shapeScale: number;
						public shapeColor: number;
						public shapeBounds: androidgraphicsRectF;
						public shapeSize: number;
						public indicatorSize: number;
						public renderIndicator(param0: androidgraphicsCanvas, param1: number, param2: number): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public clearDecorations(): void;
						public openShape(param0: number, param1: number, param2: number, param3: number): void;
						public renderLayer(param0: number, param1: androidgraphicsCanvas): void;
						public getShapeColor(): number;
						public toggleDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell, param1: number): void;
						public setShapeScale(param0: number): void;
						public getShapeScale(): number;
						public renderCell(param0: androidgraphicsCanvas, param1: com.telerik.widget.calendar.CalendarCell): void;
						public closeShape(param0: number, param1: number): void;
						public setShapeColor(param0: number): void;
						public renderShape(param0: androidgraphicsCanvas, param1: androidgraphicsRectF): void;
						public toggleDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export class RectangularCellDecorator extends com.telerik.widget.calendar.decorations.CellDecorator {
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: number);
						public renderDecorationForCell(param0: androidgraphicsCanvas, param1: com.telerik.widget.calendar.CalendarCell): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export class SegmentDecorator extends com.telerik.widget.calendar.decorations.Decorator {
						public halfStrokeWidth: number;
						public setStrokeWidth(param0: number): void;
						public toggleDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell, param1: number): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public clearDecorations(): void;
						public toggleDecorationForCell(param0: number, param1: number, param2: number, param3: number): void;
						public toggleDecorationForCell(param0: number, param1: number, param2: number, param3: number, param4: number): void;
						public renderLayer(param0: number, param1: androidgraphicsCanvas): void;
						public toggleDecorationForCell(param0: com.telerik.widget.calendar.CalendarCell): void;
					}
					export module SegmentDecorator {
						export class LineSegment extends javalangObject {
							public hashCode(): number;
							public equals(param0: javalangObject): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export class SquareCellDecorator extends com.telerik.widget.calendar.decorations.CellDecorator {
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: number);
						public setSize(size: number);
						public getSize(): number;
						public renderDecorationForCell(param0: androidgraphicsCanvas, param1: com.telerik.widget.calendar.CalendarCell): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module decorations {
					export class SquareRangeDecorator extends com.telerik.widget.calendar.decorations.RangeDecorator {
						public renderIndicator(param0: androidgraphicsCanvas, param1: number, param2: number): void;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public renderShape(param0: androidgraphicsCanvas, param1: androidgraphicsRectF): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export class Event extends javalangObject {
						public setStartDate(param0: number): void;
						public setCalendarId(param0: number): void;
						public getEndDate(): number;
						public getStartDate(): number;
						public isAllDay(): boolean;
						public getCalendarId(): number;
						public getTitle(): string;
						public setEventColor(param0: number): void;
						public getEventColor(): number;
						public setTitle(param0: string): void;
						public constructor(param0: string, param1: number, param2: number);
						public setEndDate(param0: number): void;
						public setAllDay(param0: boolean): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.Event.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.EventRenderer.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.read.GenericResultCallback.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export class EventAdapter extends javalangObject {
						public owner: com.telerik.widget.calendar.RadCalendarView;
						public calendar: javautilCalendar;
						public setRenderer(param0: com.telerik.widget.calendar.events.EventRenderer): void;
						public eventShouldBeVisible(param0: com.telerik.widget.calendar.events.Event, param1: number, param2: number): boolean;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
						public requestEventsForDates(param0: javautilList<any>, param1: com.telerik.widget.calendar.events.read.GenericResultCallback): void;
						public getEventsForDate(param0: number): javautilList<any>;
						public addEvent(param0: com.telerik.widget.calendar.events.Event): void;
						public setEvents(param0: javautilList<any>): void;
						public getRenderer(): com.telerik.widget.calendar.events.EventRenderer;
						public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: javautilList<any>);
						public getEvents(): javautilList<any>;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export class EventRenderMode extends javalangEnum<any> {
						public static Shape: com.telerik.widget.calendar.events.EventRenderMode;
						public static Text: com.telerik.widget.calendar.events.EventRenderMode;
						public static Shape_And_Text: com.telerik.widget.calendar.events.EventRenderMode;
						public static None: com.telerik.widget.calendar.events.EventRenderMode;
						public static values(): native.Array<com.telerik.widget.calendar.events.EventRenderMode>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						public static valueOf(param0: string): com.telerik.widget.calendar.events.EventRenderMode;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.calendar.CalendarDayCell.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.EventRenderMode.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export class EventRenderer extends javalangObject {
						public setEventTextSize(param0: number): void;
						public getEventRenderMode(): com.telerik.widget.calendar.events.EventRenderMode;
						public getEventTextSize(): number;
						public constructor(param0: androidcontentContext);
						public renderEvents(param0: androidgraphicsCanvas, param1: com.telerik.widget.calendar.CalendarDayCell): void;
						public setEventRenderMode(param0: com.telerik.widget.calendar.events.EventRenderMode): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export class EventsDisplayMode extends javalangEnum<any> {
						public static Normal: com.telerik.widget.calendar.events.EventsDisplayMode;
						public static Inline: com.telerik.widget.calendar.events.EventsDisplayMode;
						public static Popup: com.telerik.widget.calendar.events.EventsDisplayMode;
						public static valueOf(param0: string): com.telerik.widget.calendar.events.EventsDisplayMode;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						public static values(): native.Array<com.telerik.widget.calendar.events.EventsDisplayMode>;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.read.EventAsyncAdapter.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.read.GenericResultCallback.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.read.RecurringEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.lang.Void.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export module read {
						export abstract class EventAsyncAdapter extends com.telerik.widget.calendar.events.EventAdapter {
							public static WORK_CALENDAR_ONE: javautilCalendar;
							public static WORK_CALENDAR_TWO: javautilCalendar;
							public baseDates: javautilHashMap<any, any>;
							public eventLoadTask: com.telerik.widget.calendar.events.read.EventAsyncAdapter.LoadEventTask;
							public eventLoadTaskRunning: boolean;
							public requestedDates: javautilList<any>;
							public eventsRed: javautilList<any>;
							public eventShouldRecur(param0: com.telerik.widget.calendar.events.read.RecurringEvent, param1: number): boolean;
							public onEventsResult(param0: javautilList<any>): void;
							public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: javautilList<any>);
							public readEventsAsync(): void;
							public requestEventsForDates(param0: javautilList<any>, param1: com.telerik.widget.calendar.events.read.GenericResultCallback): void;
							public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
							public loadEventsAsync(param0: javautilList<any>): void;
						}
						export module EventAsyncAdapter {
							export class LoadEventTask extends androidosAsyncTask<any, any, any> {
								public onPostExecute(param0: javautilHashMap<any, any>): void;
								public onCancelled(param0: javautilHashMap<any, any>): void;
								public onCancelled(param0: javalangObject): void;
								public constructor(param0: com.telerik.widget.calendar.events.read.EventAsyncAdapter, param1: com.telerik.widget.calendar.events.read.GenericResultCallback, param2: javalangRunnable, param3: javautilList<any>, param4: javautilList<any>);
								public onCancelled(): void;
								public constructor();
								public onPostExecute(param0: javalangObject): void;
								public doInBackground(param0: native.Array<javalangVoid>): javautilHashMap<any, any>;
								public doInBackground(param0: native.Array<javalangObject>): javalangObject;
							}
							export class RequestTask extends androidosAsyncTask<any, any, any> {
								public onPostExecute(param0: javalangVoid): void;
								public doInBackground(param0: native.Array<javalangVoid>): javalangVoid;
								public constructor();
								public onPostExecute(param0: javalangObject): void;
								public constructor(param0: com.telerik.widget.calendar.events.read.EventAsyncAdapter, param1: javautilList<any>);
								public doInBackground(param0: native.Array<javalangObject>): javalangObject;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export module read {
						export class EventQueryToken extends javalangObject {
							public static CALENDAR_ID_SELECTION: string;
							public static CALENDAR_OWNER_SELECTION: string;
							public selection: string;
							public selectionArgs: native.Array<string>;
							public static getCalendarsByOwner(param0: string): com.telerik.widget.calendar.events.read.EventQueryToken;
							public getMinDate(): number;
							public buildSelection(): string;
							public getMaxDate(): number;
							public setMaxDate(param0: number): void;
							public static getDefaultCalendar(): com.telerik.widget.calendar.events.read.EventQueryToken;
							public static getCalendarsByOwners(param0: native.Array<string>): com.telerik.widget.calendar.events.read.EventQueryToken;
							public constructor(param0: string, param1: native.Array<string>);
							public setRange(param0: number, param1: number): void;
							public static getCalendarById(param0: string): com.telerik.widget.calendar.events.read.EventQueryToken;
							public static getCalendarsById(param0: native.Array<string>): com.telerik.widget.calendar.events.read.EventQueryToken;
							public setMinDate(param0: number): void;
						}
					}
				}
			}
		}
	}
}

import androidnetUri = android.net.Uri;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.net.Uri.d.ts" />
/// <reference path="./com.telerik.widget.calendar.RadCalendarView.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.read.EventQueryToken.d.ts" />
/// <reference path="./com.telerik.widget.calendar.events.read.GenericResultCallback.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export module read {
						export class EventReadAdapter extends com.telerik.widget.calendar.events.read.EventAsyncAdapter {
							public getEventsQueryToken(): com.telerik.widget.calendar.events.read.EventQueryToken;
							public setEventsQueryToken(param0: com.telerik.widget.calendar.events.read.EventQueryToken): void;
							public static getCurrentUser(param0: androidcontentContext): string;
							public static getCurrentUserAsync(param0: androidcontentContext, param1: com.telerik.widget.calendar.events.read.GenericResultCallback): void;
							public constructor(param0: com.telerik.widget.calendar.RadCalendarView, param1: javautilList<any>);
							public setEventsUri(param0: androidnetUri): void;
							public readEventsAsync(): void;
							public static getAllCalendars(param0: androidcontentContext): native.Array<com.telerik.widget.calendar.events.read.EventReadAdapter.CalendarInfo>;
							public getEventsUri(): androidnetUri;
							public static getAllCalendarsAsync(param0: androidcontentContext, param1: com.telerik.widget.calendar.events.read.GenericResultCallback): void;
							public constructor(param0: com.telerik.widget.calendar.RadCalendarView);
							public loadEventsAsync(param0: javautilList<any>): void;
						}
						export module EventReadAdapter {
							export class CalendarInfo extends javalangObject {
								public id: string;
								public ownerAccount: string;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export module read {
						export class Frequency extends javalangEnum<any> {
							public static Secondly: com.telerik.widget.calendar.events.read.Frequency;
							public static Minutely: com.telerik.widget.calendar.events.read.Frequency;
							public static Hourly: com.telerik.widget.calendar.events.read.Frequency;
							public static Daily: com.telerik.widget.calendar.events.read.Frequency;
							public static Weekly: com.telerik.widget.calendar.events.read.Frequency;
							public static Monthly: com.telerik.widget.calendar.events.read.Frequency;
							public static Yearly: com.telerik.widget.calendar.events.read.Frequency;
							public static values(): native.Array<com.telerik.widget.calendar.events.read.Frequency>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static valueOf(param0: string): com.telerik.widget.calendar.events.read.Frequency;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export module read {
						export class GenericResultCallback extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.calendar.events.read.GenericResultCallback interface with the provided implementation.
							 */
							public constructor(implementation: {
								onResult(param0: javalangObject): void;
							});
							public onResult(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.calendar.events.read.Frequency.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module calendar {
				export module events {
					export module read {
						export class RecurringEvent extends com.telerik.widget.calendar.events.Event {
							public extractUntilDate(param0: string): void;
							public byDayModifier(param0: number): number;
							public constructor(param0: string, param1: number, param2: string, param3: string);
							public byYearDay(): native.Array<number>;
							public buildRecurrenceRules(param0: string): void;
							public byHour(): native.Array<number>;
							public byWeekNo(): native.Array<number>;
							public repeatUntilDate(): number;
							public extractByDay(param0: string): void;
							public extractByMonth(param0: string): void;
							public constructor(param0: string, param1: number, param2: number);
							public byDay(param0: number): boolean;
							public frequency(): com.telerik.widget.calendar.events.read.Frequency;
							public isByWeekNo(): boolean;
							public isByYearDay(): boolean;
							public isBySetPos(): boolean;
							public isModified(): boolean;
							public extractByMonthDay(param0: string): void;
							public constructor(param0: string, param1: number, param2: number, param3: string);
							public extractByYearDay(param0: string): void;
							public weekStartDay(): number;
							public interval(): number;
							public extractByWeekNo(param0: string): void;
							public isBySecond(): boolean;
							public rrule(): string;
							public isByMinute(): boolean;
							public extractFrequency(param0: string): void;
							public bySetPos(): native.Array<number>;
							public isByDay(): boolean;
							public extractWeekStart(param0: string): void;
							public count(): number;
							public extractBySecond(param0: string): void;
							public byMinute(): native.Array<number>;
							public byMonthDay(): native.Array<number>;
							public extractByMinute(param0: string): void;
							public isByHour(): boolean;
							public isByDayModified(): boolean;
							public isByMonthDay(): boolean;
							public extractBySetPos(param0: string): void;
							public extractTokens(param0: string): native.Array<string>;
							public extractTokenValue(param0: string): string;
							public byMonth(param0: number): boolean;
							public isByMonth(): boolean;
							public extractByHour(param0: string): void;
							public extractCount(param0: string): void;
							public bySecond(): native.Array<number>;
							public extractInterval(param0: string): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisLabelLayoutMode extends javalangEnum<any> {
							public static OUTER: com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public static INNER: com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public static values(): native.Array<com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.LabelSizeInfo.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisLabelModel extends com.telerik.widget.chart.engine.elementTree.ContentNode {
							public constructor();
							public update(param0: com.telerik.widget.chart.visualization.common.LabelSizeInfo): void;
							public getLabelSizeInfo(): com.telerik.widget.chart.visualization.common.LabelSizeInfo;
							public normalizedPosition(): number;
							public untransformedDesiredSize(): com.telerik.android.common.math.RadSize;
							public constructor(param0: number, param1: com.telerik.android.common.math.RadPoint, param2: com.telerik.android.common.math.RadSize);
							public transformOffset(): com.telerik.android.common.math.RadPoint;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.RadThickness.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisTickModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisTitleModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisUpdateContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ElementCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export abstract class AxisModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public static PLOT_ORIGIN_PROPERTY_KEY: number;
							public static PLOT_DIRECTION_PROPERTY_KEY: number;
							public resetState(): void;
							public buildTicksAndLabels(param0: com.telerik.android.common.math.RadSize): boolean;
							public setLabelFormat(param0: string): void;
							public getShowLabels(): boolean;
							public setVerticalLocation(param0: com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation): void;
							public getNormalizedLabelRotationAngle(): number;
							public getLabelFormat(): string;
							public setShowLabels(param0: boolean): void;
							public getMajorTicks(): javalangIterable<any>;
							public setMajorTickLength(param0: number): void;
							public generateLastLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
							public getLabelInterval(): number;
							public update(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): javalangObject;
							public getVerticalLocation(): com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public applyLayoutRounding(): void;
							public setLabelInterval(param0: number): void;
							public getCombineGroupKey(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): javalangObject;
							public measure(param0: com.telerik.android.common.math.RadSize): boolean;
							public getLastTick(): com.telerik.widget.chart.engine.axes.AxisTickModel;
							public plot(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							public getLabelLayoutMode(): com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public setIsPrimary(param0: boolean): void;
							public majorTickCount(): number;
							public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							public getHorizontalLocation(): com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
							public getMajorTickOffset(): number;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public getIsPrimary(): boolean;
							public title(): com.telerik.widget.chart.engine.axes.AxisTitleModel;
							public createLayoutStrategy(): com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy;
							public getMajorTickLength(): number;
							public isUpdated(): boolean;
							public setWidth(param0: number): void;
							public ticks(): com.telerik.widget.chart.engine.elementTree.ElementCollection;
							public getWidth(): number;
							public onPanOffsetChanged(): void;
							public setLabelOffset(param0: number): void;
							public updateTicksVisibility(param0: com.telerik.android.common.math.RadRect): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getDesiredSize(): com.telerik.android.common.math.RadSize;
							public createPlotInfo(param0: javalangObject): com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
							public getLayoutStrategy(): com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy;
							public setNormalizedLabelRotationAngle(param0: number): void;
							public onZoomChanged(): void;
							public setTickThickness(param0: number): void;
							public setLineThickness(param0: number): void;
							public convertPhysicalUnitsToData(param0: number): javalangObject;
							public getStackValue(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.engine.axes.AxisModel.StackValue;
							public getLabelContent(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): javalangObject;
							public getLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
							public setLastLabelVisibility(param0: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility): void;
							public plotCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							public setLabelMargin(param0: number): void;
							public getType(): com.telerik.widget.chart.engine.axes.AxisType;
							public setType(param0: com.telerik.widget.chart.engine.axes.AxisType): void;
							public constructor();
							public getLabelOffset(): number;
							public setHorizontalLocation(param0: com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation): void;
							public getActualPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public getLabelFitMode(): com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
							public getLabelMargin(): number;
							public generateTicks(param0: com.telerik.widget.chart.engine.axes.continuous.ValueRange): javalangIterable<any>;
							public getFirstTick(): com.telerik.widget.chart.engine.axes.AxisTickModel;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function;
							public desiredMargin(): com.telerik.android.common.RadThickness;
							public getLineThickness(): number;
							public getTickThickness(): number;
							public generateLabels(): javalangIterable<any>;
							public isPlotValid(): boolean;
							public getLabels(): com.telerik.widget.chart.engine.elementTree.ElementCollection;
							public setMajorTickOffset(param0: number): void;
							public setLabelLayoutMode(param0: com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode): void;
							public setLabelFitMode(param0: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode): void;
							public isDataReady(): boolean;
						}
						export module AxisModel {
							export class StackValue extends javalangObject {
								public value: number;
								public positive: boolean;
								public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel);
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.TickPosition.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.TickType.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export abstract class AxisTickModel extends com.telerik.widget.chart.engine.elementTree.ChartNode {
							public next: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public previous: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public constructor();
							public constructor(param0: number, param1: number, param2: number);
							public virtualIndex(): number;
							public associatedLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
							public getType(): com.telerik.widget.chart.engine.axes.TickType;
							public position(): com.telerik.widget.chart.engine.axes.TickPosition;
							public getNormalizedForwardLength(): number;
							public normalizedValue(): number;
							public getNextMajorTick(): com.telerik.widget.chart.engine.axes.AxisTickModel;
							public getNormalizedBackwardLength(): number;
							public value(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisTitleModel extends com.telerik.widget.chart.engine.elementTree.ContentNode {
							public constructor();
							public unloadCore(): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisType extends javalangEnum<any> {
							public static FIRST: com.telerik.widget.chart.engine.axes.AxisType;
							public static SECOND: com.telerik.widget.chart.engine.axes.AxisType;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.AxisType;
							public static values(): native.Array<com.telerik.widget.chart.engine.axes.AxisType>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisUpdateContext extends javalangObject {
							public isStacked(): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: javautilArrayList<any>, param2: javalangIterable<any>);
							public isStacked100(): boolean;
							public combinedSeries(): javalangIterable<any>;
							public nonCombinedSeries(): javalangIterable<any>;
							public series(): javalangIterable<any>;
							public maximumStackSum(): number;
							public getMinimumStackSum(): number;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.TickType.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class MajorTickModel extends com.telerik.widget.chart.engine.axes.AxisTickModel {
							public constructor();
							public constructor(param0: number, param1: number, param2: number);
							public getType(): com.telerik.widget.chart.engine.axes.TickType;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.TickType.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class MinorTickModel extends com.telerik.widget.chart.engine.axes.AxisTickModel {
							public constructor();
							public constructor(param0: number, param1: number, param2: number);
							public getType(): com.telerik.widget.chart.engine.axes.TickType;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class TickPosition extends javalangEnum<any> {
							public static FIRST: com.telerik.widget.chart.engine.axes.TickPosition;
							public static INNER: com.telerik.widget.chart.engine.axes.TickPosition;
							public static LAST: com.telerik.widget.chart.engine.axes.TickPosition;
							public static values(): native.Array<com.telerik.widget.chart.engine.axes.TickPosition>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.TickPosition;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class TickType extends javalangEnum<any> {
							public static MAJOR: com.telerik.widget.chart.engine.axes.TickType;
							public static MINOR: com.telerik.widget.chart.engine.axes.TickType;
							public static values(): native.Array<com.telerik.widget.chart.engine.axes.TickType>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.TickType;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class AxisCategory extends javalangObject {
								public key: javalangObject;
								public keySource: javalangObject;
								public points: javautilArrayList<any>;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class AxisSupportsCombinedSeriesPlot extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.axes.categorical.AxisSupportsCombinedSeriesPlot interface with the provided implementation.
								 */
								public constructor(implementation: {
								});
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisTickModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisUpdateContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class CategoricalAxisModel extends com.telerik.widget.chart.engine.axes.AxisModel implements com.telerik.widget.chart.engine.axes.categorical.AxisSupportsCombinedSeriesPlot {
								public categories: javautilArrayList<any>;
								public getPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getMajorTickInterval(): number;
								public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
								public createPlotInfo(param0: javalangObject): com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
								public constructor();
								public setMajorTickInterval(param0: number): void;
								public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public generateLastLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
								public setPlotMode(param0: com.telerik.widget.chart.engine.axes.common.AxisPlotMode): void;
								public getGapLength(): number;
								public convertPhysicalUnitsToData(param0: number): javalangObject;
								public majorTickCount(): number;
								public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): javalangObject;
								public generateTicks(param0: com.telerik.widget.chart.engine.axes.continuous.ValueRange): javalangIterable<any>;
								public calculateRelativeStep(param0: number): number;
								public plotCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getActualPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getCombineGroupKey(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): javalangObject;
								public setGapLength(param0: number): void;
								public isDataReady(): boolean;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class CategoricalAxisPlotInfo extends com.telerik.widget.chart.engine.axes.common.AxisPlotInfo {
								public position: number;
								public length: number;
								public rangeLength: number;
								public rangePosition: number;
								public categoryKey: javalangObject;
								public centerX(param0: com.telerik.android.common.math.RadRect): number;
								public centerY(param0: com.telerik.android.common.math.RadRect): number;
								public static create(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: number, param2: number): com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisPlotInfo;
							}
						}
					}
				}
			}
		}
	}
}

import javautilComparator = java.util.Comparator;
import javatextDateFormat = java.text.DateFormat;
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisTickModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisUpdateContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.categorical.AxisCategory.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.DateTimeComponent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.text.DateFormat.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class DateTimeCategoricalAxisModel extends com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisModel implements javautilComparator<any> {
								public static defaultDateFormat: javatextDateFormat;
								public getDateTimeComponent(): com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public equals(param0: javalangObject): boolean;
								public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): javalangObject;
								public setDateFormat(param0: javatextDateFormat): void;
								public compare(param0: javalangObject, param1: javalangObject): number;
								public setDateTimeComponent(param0: com.telerik.widget.chart.engine.axes.common.DateTimeComponent): void;
								public compare(param0: com.telerik.widget.chart.engine.axes.categorical.AxisCategory, param1: com.telerik.widget.chart.engine.axes.categorical.AxisCategory): number;
								public constructor();
								public getDateFormat(): javatextDateFormat;
								public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisHorizontalLocation extends javalangEnum<any> {
								public static LEFT: com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
								public static RIGHT: com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation>;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisLabelFitMode extends javalangEnum<any> {
								public static NONE: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
								public static MULTI_LINE: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
								public static ROTATE: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode>;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisLastLabelVisibility extends javalangEnum<any> {
								public static VISIBLE: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
								public static HIDDEN: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
								public static CLIP: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility>;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisPlotDirection extends javalangEnum<any> {
								public static VERTICAL: com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
								public static HORIZONTAL: com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisPlotDirection>;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export abstract class AxisPlotInfo extends javalangObject {
								public axis: com.telerik.widget.chart.engine.axes.AxisModel;
								public centerX(param0: com.telerik.android.common.math.RadRect): number;
								public getAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public centerY(param0: com.telerik.android.common.math.RadRect): number;
								public constructor();
								public getSnapTickIndex(): number;
								public setSnapTickIndex(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisPlotMode extends javalangEnum<any> {
								public static BETWEEN_TICKS: com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public static ON_TICKS: com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public static ON_TICKS_PADDED: com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisPlotMode>;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisVerticalLocation extends javalangEnum<any> {
								public static BOTTOM: com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
								public static TOP: com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class DateTimeComponent extends javalangEnum<any> {
								public static YEAR: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static QUARTER: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static MONTH: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static WEEK: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static HOUR: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static MINUTE: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static SECOND: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static MILLISECOND: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static DATE: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static TIME_OF_DAY: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static DAY: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static DAY_OF_WEEK: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static DAY_OF_YEAR: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static TIME_IN_MILLIS: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.DateTimeComponent>;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.propertyStore.ValueExtractor.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export abstract class DateTimeHelper extends javalangObject {
								public constructor();
								public static tryGetDateTime(param0: javalangObject, param1: com.telerik.widget.chart.engine.propertyStore.ValueExtractor): boolean;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class SeriesModelWithAxes extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.axes.common.SeriesModelWithAxes interface with the provided implementation.
								 */
								public constructor(implementation: {
									getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
									getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
									attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
									detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								});
								public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
								public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class TimeInterval extends javalangEnum<any> {
								public static YEAR: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static QUARTER: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static MONTH: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static WEEK: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static WEEK_OF_YEAR: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static DAY: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static DAY_OF_WEEK: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static DAY_OF_WEEK_IN_MONTH: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static DAY_OF_YEAR: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static HOUR: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static MINUTE: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static SECOND: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static MILLISECOND: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static TIME_IN_MILLIS: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.TimeInterval>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.TimeInterval;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.RadThickness.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export module layout {
								export abstract class AxisModelLayoutStrategy extends javalangObject {
									public maxLabelHeight: number;
									public maxLabelWidth: number;
									public totalLabelWidthToAvailableWidth: number;
									public updateTicksVisibility(param0: com.telerik.android.common.math.RadRect): void;
									public getDesiredSize(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.math.RadSize;
									public getZoom(): number;
									public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel);
									public owner(): com.telerik.widget.chart.engine.axes.AxisModel;
									public getDesiredMargin(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.RadThickness;
									public applyLayoutRounding(): void;
									public getDefaultLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
									public getVisibleRange(param0: com.telerik.android.common.math.RadSize): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
									public arrange(param0: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelNone(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelMultiline(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.RadThickness.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export module layout {
								export class HorizontalAxisLayoutStrategy extends com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy {
									public updateTicksVisibility(param0: com.telerik.android.common.math.RadRect): void;
									public getDesiredSize(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.math.RadSize;
									public getZoom(): number;
									public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel);
									public getDesiredMargin(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.RadThickness;
									public applyLayoutRounding(): void;
									public arrangeLabelRotate(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
									public getDefaultLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
									public getVisibleRange(param0: com.telerik.android.common.math.RadSize): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
									public arrange(param0: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelNone(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelMultiline(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.RadThickness.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export module layout {
								export class VerticalAxisLayoutStrategy extends com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy {
									public updateTicksVisibility(param0: com.telerik.android.common.math.RadRect): void;
									public getDesiredSize(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.math.RadSize;
									public getZoom(): number;
									public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel);
									public getDesiredMargin(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.RadThickness;
									public applyLayoutRounding(): void;
									public getDefaultLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
									public getVisibleRange(param0: com.telerik.android.common.math.RadSize): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
									public arrange(param0: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelNone(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelMultiline(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class ContinuousAxisModel extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.axes.continuous.ContinuousAxisModel interface with the provided implementation.
								 */
								public constructor(implementation: {
								});
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisTickModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisUpdateContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.TimeInterval.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.text.DateFormat.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class DateTimeContinuousAxisModel extends com.telerik.widget.chart.engine.axes.AxisModel implements com.telerik.widget.chart.engine.axes.continuous.ContinuousAxisModel, com.telerik.widget.chart.engine.axes.categorical.AxisSupportsCombinedSeriesPlot {
								public getMajorStepUnit(): com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public setSourceDateFormat(param0: javatextDateFormat): void;
								public setMaximum(param0: javautilCalendar): void;
								public setMajorStepUnit(param0: com.telerik.widget.chart.engine.axes.common.TimeInterval): void;
								public generateLastLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
								public getGapLength(): number;
								public setPlotMode(param0: com.telerik.widget.chart.engine.axes.common.AxisPlotMode): void;
								public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): javalangObject;
								public generateTicks(param0: com.telerik.widget.chart.engine.axes.continuous.ValueRange): javalangIterable<any>;
								public setDateFormat(param0: javatextDateFormat): void;
								public resetState(): void;
								public getMaximum(): javautilCalendar;
								public getActualPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getCombineGroupKey(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): javalangObject;
								public getDateFormat(): javatextDateFormat;
								public setGapLength(param0: number): void;
								public getActualRange(): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
								public getPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public setMaximumTicks(param0: number): void;
								public createPlotInfo(param0: javalangObject): com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
								public setMajorStep(param0: number): void;
								public getMaximumTicks(): number;
								public constructor();
								public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getSourceDateFormat(): javatextDateFormat;
								public convertPhysicalUnitsToData(param0: number): javalangObject;
								public majorTickCount(): number;
								public setMinimum(param0: javautilCalendar): void;
								public getMinimum(): javautilCalendar;
								public plotCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getMajorStep(): number;
								public onZoomChanged(): void;
							}
							export module DateTimeContinuousAxisModel {
								export class DateTimePoint extends javalangObject {
									public date: javautilCalendar;
									public point: com.telerik.widget.chart.engine.dataPoints.DataPoint;
									public slot: com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel.TimeSlot;
									public compareTo(param0: com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel.DateTimePoint): number;
								}
								export class PlotInfo extends javalangObject {
									public min: number;
									public max: number;
									public extend: number;
								}
								export class TimeSlot extends javalangObject {
									public startTicks: number;
									public ticks: number;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class LinearAxisModel extends com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel {
								public generateLastLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
								public majorTickCount(): number;
								public generateTicks(param0: com.telerik.widget.chart.engine.axes.continuous.ValueRange): javalangIterable<any>;
								public constructor();
								public calculateTickStep(): number;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class LogarithmicAxisModel extends com.telerik.widget.chart.engine.axes.continuous.LinearAxisModel {
								public setLogarithmBase(param0: number): void;
								public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
								public constructor();
								public getLogarithmBase(): number;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisTickModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisUpdateContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export abstract class NumericalAxisModel extends com.telerik.widget.chart.engine.axes.AxisModel implements com.telerik.widget.chart.engine.axes.continuous.ContinuousAxisModel {
								public actualRange: com.telerik.widget.chart.engine.axes.continuous.ValueRange;
								public pointMinMax: com.telerik.widget.chart.engine.axes.continuous.ValueRange;
								public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
								public getDesiredTickCount(): number;
								public createPlotInfo(param0: javalangObject): com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
								public setMajorStep(param0: number): void;
								public setRangeExtendDirection(param0: number): void;
								public constructor();
								public getMinimum(): number;
								public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getMaximum(): number;
								public setMinimum(param0: number): void;
								public convertPhysicalUnitsToData(param0: number): javalangObject;
								public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): javalangObject;
								public getRangeExtendDirection(): number;
								public getStackValue(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.engine.axes.AxisModel.StackValue;
								public setDesiredTickCount(param0: number): void;
								public plotCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getMajorStep(): number;
								public setMaximum(param0: number): void;
								public onZoomChanged(): void;
								public getActualRange(): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
							}
							export module NumericalAxisModel {
								export class RangeCalculator extends javalangObject {
									public minimum: number;
									public maximum: number;
									public constructor(param0: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel, param1: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel, param2: boolean, param3: boolean);
									public roundToMajorStep(param0: number): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
									public extend(): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class NumericalAxisOhlcPlotInfo extends com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase {
								public normalizedHigh: number;
								public normalizedLow: number;
								public normalizedOpen: number;
								public normalizedClose: number;
								public physicalOpen: number;
								public physicalClose: number;
								public snapBaseTickIndex: number;
								public snapOpenTickIndex: number;
								public snapCloseTickIndex: number;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class NumericalAxisPlotInfo extends com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase {
								public normalizedValue: number;
								public centerX(param0: com.telerik.android.common.math.RadRect): number;
								public centerY(param0: com.telerik.android.common.math.RadRect): number;
								public static create(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: number, param2: number, param3: number): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo;
								public convertToAngle(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export abstract class NumericalAxisPlotInfoBase extends com.telerik.widget.chart.engine.axes.common.AxisPlotInfo {
								public plotOriginOffset: number;
								public normalizedOrigin: number;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class NumericalAxisRangeExtendDirection extends javalangObject {
								public static NONE: number;
								public static POSITIVE: number;
								public static NEGATIVE: number;
								public static BOTH: number;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class NumericalAxisRangePlotInfo extends com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase {
								public normalizedHigh: number;
								public normalizedLow: number;
								public snapBaseTickIndex: number;
							}
						}
					}
				}
			}
		}
	}
}

import javalangComparable = java.lang.Comparable;
/// <reference path="./java.lang.Comparable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class ValueRange extends javalangObject {
								public clone(): javalangObject;
								public equals(param0: javalangObject): boolean;
								public setMaximum(param0: javalangComparable<any>): void;
								public setMinimum(param0: javalangComparable<any>): void;
								public getMaximum(): javalangComparable<any>;
								public clone(): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
								public constructor(param0: javalangComparable<any>, param1: javalangComparable<any>);
								public constructor();
								public isInRangeExclusive(param0: javalangComparable<any>): boolean;
								public isInRangeInclusive(param0: javalangComparable<any>): boolean;
								public getMinimum(): javalangComparable<any>;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class AngleRange extends javalangObject {
							public getSweepAngle(): number;
							public constructor(param0: number, param1: number);
							public static getDefault(): com.telerik.widget.chart.engine.chartAreas.AngleRange;
							public getStartAngle(): number;
							public equals(param0: javalangObject): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.DataTuple.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.CartesianChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.CartesianChartGridModel.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class CartesianChartAreaModel extends com.telerik.widget.chart.engine.chartAreas.ChartAreaModelWithAxes {
							public constructor();
							public convertPointToData(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.widget.chart.engine.axes.AxisModel, param2: com.telerik.widget.chart.engine.axes.AxisModel): com.telerik.android.common.DataTuple;
							public getNotLoadedReasons(): javalangIterable<any>;
							public applyLayoutRounding(): void;
							public getGrid(): com.telerik.widget.chart.engine.decorations.CartesianChartGridModel;
							public arrangeAxes(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
						}
						export module CartesianChartAreaModel {
							export class AxisStack extends javalangObject {
								public constructor(param0: com.telerik.widget.chart.engine.chartAreas.CartesianChartAreaModel, param1: javautilList<any>);
								public getIsEmpty(): boolean;
								public measure(param0: com.telerik.android.common.math.RadSize): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartPlotAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartMessage.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ElementCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.MessageDispatcher.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.view.ChartView.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class ChartAreaModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public constructor();
							public getPlotArea(): com.telerik.widget.chart.engine.chartAreas.ChartPlotAreaModel;
							public previewMessage(param0: com.telerik.widget.chart.engine.elementTree.ChartMessage): void;
							public onPanOffsetChanged(): void;
							public invalidate(param0: number): void;
							public processZoomChanged(): void;
							public beginUpdate(): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public endUpdate(param0: boolean): void;
							public getView(): com.telerik.widget.chart.engine.view.ChartView;
							public onZoomChanged(): void;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public isSuspended(): boolean;
							public getDispatcher(): com.telerik.widget.chart.engine.elementTree.MessageDispatcher;
							public getNotLoadedReasons(): javalangIterable<any>;
							public invalidate(): void;
							public invalidateNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public isTreeLoaded(): boolean;
							public loadElementTree(param0: com.telerik.widget.chart.engine.view.ChartView): void;
							public processPanOffsetChanged(): void;
							public getSeries(): com.telerik.widget.chart.engine.elementTree.ElementCollection;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.ChartGridModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
/// <reference path="./java.util.Hashtable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export abstract class ChartAreaModelWithAxes extends com.telerik.widget.chart.engine.chartAreas.ChartAreaModel {
							public firstAxes: javautilArrayList<any>;
							public secondAxes: javautilArrayList<any>;
							public seriesCombineStrategies: javautilHashtable<any, any>;
							public annotations: javautilArrayList<any>;
							public primaryFirstAxis: com.telerik.widget.chart.engine.axes.AxisModel;
							public primarySecondAxis: com.telerik.widget.chart.engine.axes.AxisModel;
							public constructor();
							public processZoomChanged(): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public setGrid(param0: com.telerik.widget.chart.engine.decorations.ChartGridModel): void;
							public removeAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public removeAnnotation(param0: com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel): void;
							public addAnnotation(param0: com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel): void;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public setAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public arrangeAxes(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public isTreeLoaded(): boolean;
							public processPanOffsetChanged(): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ElementCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class ChartPlotAreaModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public onChildRemoved(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public arrange(param0: com.telerik.android.common.math.RadRect, param1: boolean): com.telerik.android.common.math.RadRect;
							public arrange(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public onChildInserted(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getSeries(): com.telerik.widget.chart.engine.elementTree.ElementCollection;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class LoadContext extends javalangObject {
							public getChartArea(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class CategoricalBubbleDataPoint extends com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint {
							public constructor();
							public getSize(): number;
							public setSize(param0: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class CategoricalDataPoint extends com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase {
							public static VALUE_PROPERTY_KEY: number;
							public constructor();
							public setValue(param0: number, param1: javalangObject): boolean;
							public getCenterY(): number;
							public getCenterX(): number;
							public getValue(param0: number): javalangObject;
							public getTooltipTokens(): native.Array<javalangObject>;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setValue(param0: number): void;
							public getValue(): number;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: javalangObject): void;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): javalangObject;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisPlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export abstract class CategoricalDataPointBase extends com.telerik.widget.chart.engine.dataPoints.DataPoint {
							public numericalPlot: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase;
							public categoricalPlot: com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisPlotInfo;
							public constructor();
							public getCategory(): javalangObject;
							public setCategory(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export abstract class DataPoint extends com.telerik.widget.chart.engine.elementTree.ChartNode {
							public static IS_SELECTED_PROPERTY_KEY: number;
							public static LABEL_PROPERTY_KEY: number;
							public isPositive: boolean;
							public isEmpty: boolean;
							public desiredSize: com.telerik.android.common.math.RadSize;
							public label: javalangObject;
							public dataItem: javalangObject;
							public constructor();
							public getLabel(): javalangObject;
							public getTooltipTokens(): native.Array<javalangObject>;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public getCenter(): androidgraphicsPoint;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: javalangObject): void;
							public getDataItem(): javalangObject;
							public static checkIsEmpty(param0: javalangObject): boolean;
							public getCenterY(): number;
							public getCenterX(): number;
							public setDataItem(param0: javalangObject): void;
							public setLabel(param0: javalangObject): void;
							public setIsSelected(param0: boolean): void;
							public unloadCore(): void;
							public getIsSelected(): boolean;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): javalangObject;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class DataPointCollection extends com.telerik.widget.chart.engine.elementTree.ElementCollection implements javautilList<any> {
							public size(): number;
							public remove(param0: number): com.telerik.widget.chart.engine.elementTree.ChartNode;
							public add(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public hashCode(): number;
							public add(param0: number, param1: javalangObject): void;
							public indexOf(param0: javalangObject): number;
							public iterator(): javautilIterator<any>;
							public remove(param0: javalangObject): boolean;
							public constructor(param0: javautilCollection<any>);
							public listIterator(): javautilListIterator<any>;
							public equals(param0: javalangObject): boolean;
							public addAll(param0: javautilCollection<any>): boolean;
							public containsAll(param0: javautilCollection<any>): boolean;
							public retainAll(param0: javautilCollection<any>): boolean;
							public constructor();
							public add(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): boolean;
							public clear(): void;
							public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
							public set(param0: number, param1: javalangObject): javalangObject;
							public lastIndexOf(param0: javalangObject): number;
							public constructor(param0: number);
							public get(param0: number): javalangObject;
							public addAll(param0: number, param1: javautilCollection<any>): boolean;
							public removeAll(param0: javautilCollection<any>): boolean;
							public contains(param0: javalangObject): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.elementTree.ChartElement);
							public subList(param0: number, param1: number): javautilList<any>;
							public remove(param0: number): javalangObject;
							public add(param0: javalangObject): boolean;
							public isEmpty(): boolean;
							public listIterator(param0: number): javautilListIterator<any>;
							public toArray(): native.Array<javalangObject>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.NumericalAxisOhlcPlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class OhlcDataPoint extends com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase {
							public constructor();
							public setLow(param0: number): void;
							public getOpen(): number;
							public getTooltipTokens(): native.Array<javalangObject>;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setOpen(param0: number): void;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: javalangObject): void;
							public isFalling(): boolean;
							public getClose(): number;
							public setClose(param0: number): void;
							public setHigh(param0: number): void;
							public isRising(): boolean;
							public getLow(): number;
							public getHigh(): number;
							public getNumericalPlot(): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisOhlcPlotInfo;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): javalangObject;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class PieDataPoint extends com.telerik.widget.chart.engine.dataPoints.SingleValueDataPoint implements com.telerik.widget.primitives.legend.LegendSelectable {
							public constructor();
							public startAngle(): number;
							public percent(): number;
							public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
							public setRelativeOffsetFromCenter(param0: number): void;
							public setName(param0: string): void;
							public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
							public update(param0: number, param1: number, param2: number): void;
							public getName(): string;
							public getRelativeOffsetFromCenter(): number;
							public normalizedValue(): number;
							public sweepAngle(): number;
							public setIsSelected(param0: boolean): void;
							public getIsSelected(): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.NumericalAxisRangePlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class RangeDataPoint extends com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase {
							public constructor();
							public setLow(param0: number): void;
							public setHigh(param0: number): void;
							//public numericalPlot(): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisRangePlotInfo;
							public getTooltipTokens(): native.Array<javalangObject>;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public getLow(): number;
							public getHigh(): number;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): javalangObject;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class ScatterBubbleDataPoint extends com.telerik.widget.chart.engine.dataPoints.ScatterDataPoint {
							public constructor();
							public getSize(): number;
							public setSize(param0: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class ScatterDataPoint extends com.telerik.widget.chart.engine.dataPoints.DataPoint {
							public constructor();
							public getYPlot(): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo;
							public setYValue(param0: number): void;
							public getTooltipTokens(): native.Array<javalangObject>;
							public getYValue(): number;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: javalangObject): void;
							public setyPlot(param0: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo): void;
							public setXValue(param0: number): void;
							public setxPlot(param0: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo): void;
							public getXValue(): number;
							public getXPlot(): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): javalangObject;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export abstract class SingleValueDataPoint extends com.telerik.widget.chart.engine.dataPoints.DataPoint {
							public constructor();
							public setValue(param0: number, param1: javalangObject): boolean;
							public getValue(param0: number): javalangObject;
							public getTooltipTokens(): native.Array<javalangObject>;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setValue(param0: number): void;
							public getValue(): number;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): javalangObject;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export abstract class DataPointBinding extends javalangObject {
							public constructor();
							public getValue(param0: javalangObject): javalangObject;
							public onPropertyChanged(param0: string): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export class DataPointBindingEntry extends javalangObject {
							public getDataItem(): javalangObject;
							public constructor(param0: javalangObject, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint);
							public getDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export class FieldNameDataPointBinding extends com.telerik.widget.chart.engine.databinding.ReflectiveDataPointBinding {
							public constructor();
							public setFieldName(param0: string): void;
							public constructor(param0: string);
							public getMemberValue(param0: javalangObject): javalangObject;
							public getFieldName(): string;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export class GenericDataPointBinding extends com.telerik.widget.chart.engine.databinding.DataPointBinding {
							public constructor();
							public constructor(param0: com.telerik.android.common.Function);
							public getValue(param0: javalangObject): javalangObject;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export class PropertyNameDataPointBinding extends com.telerik.widget.chart.engine.databinding.ReflectiveDataPointBinding {
							public constructor();
							public setPropertyName(param0: string): void;
							public constructor(param0: string);
							public getMemberValue(param0: javalangObject): javalangObject;
							public getPropertyName(): string;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export abstract class ReflectiveDataPointBinding extends com.telerik.widget.chart.engine.databinding.DataPointBinding {
							public constructor();
							public setName(param0: string): boolean;
							public constructor(param0: string);
							public getName(): string;
							public getValue(param0: javalangObject): javalangObject;
							public getMemberValue(param0: javalangObject): javalangObject;
						}
					}
				}
			}
		}
	}
}

import javabeansPropertyChangeEvent = java.beans.PropertyChangeEvent;
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class CategoricalBubbleSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSource {
								public getBubbleSizeBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public setBubbleSizeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class CategoricalSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSourceBase {
								public valueBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsPoint): void;
								public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export abstract class CategoricalSeriesDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource {
								public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public setCategoryBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public getCategoryBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

import javabeansPropertyChangeListener = java.beans.PropertyChangeListener;
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export abstract class ChartSeriesDataSource extends javalangObject implements javabeansPropertyChangeListener, com.telerik.android.common.CollectionChangeListener {
								public itemsSource: javalangIterable<any>;
								public owner: com.telerik.widget.chart.engine.series.ChartSeriesModel;
								public bindings: javautilArrayList<any>;
								public dataChangeScheduled: boolean;
								public addBoundItemPropertyChangedListener(param0: com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener): void;
								public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public getOwner(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
								public getItemsSource(): javalangIterable<any>;
								public getBindings(): javautilArrayList<any>;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public removeBoundItemPropertyChangedListener(param0: com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener): void;
								public unbind(): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public bindCore(): void;
								public rebind(param0: boolean, param1: javalangIterable<any>): void;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsPoint): void;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
								public setItemsSource(param0: javalangIterable<any>): void;
								public generateDataPoint(param0: javalangObject, param1: number): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class DataBindingListener extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener interface with the provided implementation.
								 */
								public constructor(implementation: {
									onDataBindingComplete(): void;
									onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
								});
								public onDataBindingComplete(): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class OhlcSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSourceBase {
								public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public getOpenBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsPoint): void;
								public getCloseBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public setCloseBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
								public setOpenBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.PieSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class PieSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.SingleValuePointDataSource {
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public setNameBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.PieSeriesModel);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
								public getNameBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class RangeSeriesDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSourceBase {
								public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsPoint): void;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class ScatterBubbleSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.ScatterSeriesDataSource {
								public getBubbleSizeBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public setBubbleSizeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class ScatterSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource {
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public getYValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public getXValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public setXValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsPoint): void;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public setYValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export abstract class SingleValuePointDataSource extends com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource {
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsPoint): void;
								public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class AdaptiveMovingAverageKaufmanIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public getSlowPeriod(): number;
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public setFastPeriod(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public getFastPeriod(): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
									public setSlowPeriod(param0: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class AverageTrueRangeIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowClosePeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class BollingerBandsIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public unbind(): void;
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public getStandardDeviations(): number;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
									public setStandardDeviations(param0: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class CommodityChannelIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowClosePeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class ExponentialMovingAverageIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public static calculateCurrentValue(param0: boolean, param1: number, param2: number, param3: number): number;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public setModified(param0: boolean): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
									public isModified(): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class HighLowCloseIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowIndicatorDataSourceBase {
									public closeBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public getCloseBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setCloseBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class HighLowClosePeriodIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowCloseIndicatorDataSourceBase {
									public getPeriod(): number;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public setPeriod(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class HighLowIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSource {
									public highBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public lowBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class MacdIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ShortLongPeriodIndicatorDataSourceBase {
									public static calculateSignal(param0: number, param1: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param2: number, param3: number, param4: number): number;
									public getSignalPeriod(): number;
									public unbind(): void;
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public calculateMacdValue(param0: number, param1: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param2: number, param3: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param4: number, param5: javalangObject): number;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public generateDataPoints(param0: number, param1: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param2: number, param3: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param4: number, param5: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue): void;
									public setSignalPeriod(param0: number): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class ModifiedMovingAverageIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class MomentumIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public calculateValue(param0: number, param1: number): number;
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class MovingAverageIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static calculateCurrentValue(param0: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue): number;
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class OscillatorIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ShortLongPeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class RateOfChangeIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.MomentumIndicatorDataSource {
									public calculateValue(param0: number, param1: number): number;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class RaviIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ShortLongPeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class RelativeMomentumIndexIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public getMomentumPeriod(): number;
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public setMomentumPeriod(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class RelativeStrengthIndexIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export abstract class ShortLongPeriodIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValueIndicatorDataSourceBase {
									public getShortPeriod(): number;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public setShortPeriod(param0: number): void;
									public setLongPeriod(param0: number): void;
									public getLongPeriod(): number;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

import javautilArrayDeque = java.util.ArrayDeque;
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class SizedQueue extends javautilArrayDeque<any> {
									public runningSum: number;
									public currentItemsCount: number;
									public max(): number;
									public offerFirst(param0: javalangObject): boolean;
									public peekLast(): javalangObject;
									public pop(): javalangObject;
									public offerLast(param0: javalangObject): boolean;
									public peekFirst(): javalangObject;
									public enqueueItem(param0: number): number;
									public addLast(param0: javalangObject): void;
									public removeAll(param0: javautilCollection<any>): boolean;
									public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
									public peek(): javalangObject;
									public remove(param0: javalangObject): boolean;
									public constructor(param0: javautilCollection<any>);
									public removeFirstOccurrence(param0: javalangObject): boolean;
									public min(): number;
									public removeLast(): javalangObject;
									public equals(param0: javalangObject): boolean;
									public isEmpty(): boolean;
									public constructor();
									public containsAll(param0: javautilCollection<any>): boolean;
									public hashCode(): number;
									public removeFirst(): javalangObject;
									public pollFirst(): javalangObject;
									public size(): number;
									public iterator(): javautilIterator<any>;
									public contains(param0: javalangObject): boolean;
									public remove(): javalangObject;
									public offer(param0: javalangObject): boolean;
									public element(): javalangObject;
									public add(param0: javalangObject): boolean;
									public poll(): javalangObject;
									public constructor(param0: number);
									public clear(): void;
									public pollLast(): javalangObject;
									public addAll(param0: javautilCollection<any>): boolean;
									public push(param0: javalangObject): void;
									public descendingIterator(): javautilIterator<any>;
									public dequeueItem(): number;
									public retainAll(param0: javautilCollection<any>): boolean;
									public addFirst(param0: javalangObject): void;
									public toArray(): native.Array<javalangObject>;
									public getFirst(): javalangObject;
									public getLast(): javalangObject;
									public removeLastOccurrence(param0: javalangObject): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class StochasticFastIndicatorDataSource extends com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticIndicatorDataSourceBase {
									public unbind(): void;
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class StochasticSlowIndicatorDataSource extends com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticIndicatorDataSourceBase {
									public bindCore(): void;
									public setSlowingPeriod(param0: number): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public getSlowingPeriod(): number;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class TrixIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class TrueRangeIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowCloseIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
									public static calculateValue(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: com.telerik.widget.chart.engine.databinding.DataPointBinding, param3: javalangObject, param4: javalangObject): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class UltimateOscillatorIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowClosePeriodIndicatorDataSourceBase {
									public static calculateCurrentValue(param0: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue): number;
									public bindCore(): void;
									public setPeriod3(param0: number): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public getPeriod2(): number;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public getPeriod3(): number;
									public setPeriod2(param0: number): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export abstract class ValueIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSource {
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class ValuePeriodIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValueIndicatorDataSourceBase {
									public getPeriod(): number;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public setPeriod(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class WeightedMovingAverageIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public bindCore(): void;
									public propertyChange(param0: javabeansPropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.view.ChartView.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export class CartesianChartGridContext extends javalangObject {
							public availableRect(): com.telerik.android.common.math.RadRect;
							public constructor(param0: com.telerik.android.common.math.RadRect, param1: com.telerik.widget.chart.engine.view.ChartView, param2: com.telerik.widget.chart.engine.axes.AxisModel);
							public tickThickness(): number;
							public view(): com.telerik.widget.chart.engine.view.ChartView;
							public majorTicksCount(): number;
							public majorTicks(): javalangIterable<any>;
							public axis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export class CartesianChartGridModel extends com.telerik.widget.chart.engine.decorations.ChartGridModel {
							public xStripes: javautilArrayList<any>;
							public yStripes: javautilArrayList<any>;
							public xLines: javautilArrayList<any>;
							public yLines: javautilArrayList<any>;
							public constructor();
							public getPrimaryAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public setPrimaryAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public setSecondaryAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondaryAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export abstract class ChartGridModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisTickModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export class GridLine extends javalangObject {
							public axisTickModel: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public point1: com.telerik.android.common.math.RadPoint;
							public point2: com.telerik.android.common.math.RadPoint;
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisTickModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export class GridStripe extends javalangObject {
							public fillRect: com.telerik.android.common.math.RadRect;
							public startTick: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public endTick: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.propertyStore.ValueExtractor.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export abstract class ChartAnnotationModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
								public arrangeCore(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								public static tryCreatePlotInfo(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: javalangObject, param2: com.telerik.widget.chart.engine.propertyStore.ValueExtractor): boolean;
								public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								public resetState(): void;
								public update(): void;
								public constructor();
								public isUpdated(): boolean;
								public updateCore(): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export abstract class MultipleAxesAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel {
								public onFirstAxisChanged(): void;
								public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
								public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public setSecondAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public constructor();
								public setFirstAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public onSecondAxisChanged(): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export abstract class SingleAxisAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel {
								public getAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public constructor();
								public isUpdated(): boolean;
								public setAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module custom {
								export class CartesianCustomAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationModel {
									public constructor();
									public arrangeCore(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module custom {
								export abstract class CustomAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.MultipleAxesAnnotationModel {
									public desiredSize: com.telerik.android.common.math.RadSize;
									public constructor();
									public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
									public setFirstValue(param0: javalangObject): void;
									public updateCore(): void;
									public onFirstAxisChanged(): void;
									public onSecondAxisChanged(): void;
									public isUpdated(): boolean;
									public getFirstValue(): javalangObject;
									public getSecondValue(): javalangObject;
									public setSecondValue(param0: javalangObject): void;
									public resetState(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module custom {
								export class CustomAnnotationRenderer extends javalangObject {
									/**
									 * Constructs a new instance of the com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationRenderer interface with the provided implementation.
									 */
									public constructor(implementation: {
										measureContent(param0: javalangObject): com.telerik.android.common.math.RadSize;
										render(param0: javalangObject, param1: com.telerik.android.common.math.RadRect, param2: androidgraphicsCanvas, param3: androidgraphicsPaint): void;
									});
									public render(param0: javalangObject, param1: com.telerik.android.common.math.RadRect, param2: androidgraphicsCanvas, param3: androidgraphicsPaint): void;
									public measureContent(param0: javalangObject): com.telerik.android.common.math.RadSize;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module line {
								export class CartesianGridLineAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.line.GridLineAnnotationModel {
									public constructor();
									public arrangeCore(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module line {
								export abstract class GridLineAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.SingleAxisAnnotationModel {
									public static VALUE_PROPERTY_KEY: number;
									public constructor();
									public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
									public updateCore(): void;
									public setValue(param0: number, param1: javalangObject): boolean;
									public setValue(param0: javalangObject): void;
									public getValue(param0: number): javalangObject;
									public getValue(): javalangObject;
									public resetState(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module plotBand {
								export class CartesianPlotBandAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.plotBand.PlotBandAnnotationModel {
									public constructor();
									public arrangeCore(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module plotBand {
								export abstract class PlotBandAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.SingleAxisAnnotationModel {
									public firstPlotInfo: com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
									public secondPlotInfo: com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
									public constructor();
									public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
									public updateCore(): void;
									public setTo(param0: javalangObject): void;
									public isUpdated(): boolean;
									public setFrom(param0: javalangObject): void;
									public getFrom(): javalangObject;
									public getTo(): javalangObject;
									public resetState(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class ChartAreaInvalidateFlags extends javalangObject {
							public static NONE: number;
							public static RESET_AXES: number;
							public static INVALIDATE_AXES: number;
							public static INVALIDATE_SERIES: number;
							public static INVALIDATE_GRID: number;
							public static RESET_ANNOTATIONS: number;
							public static INVALIDATE_ANNOTATIONS: number;
							public static INVALIDATE_AXES_AND_GRID: number;
							public static INVALIDATE_ALL: number;
							public static ALL: number;
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.LoadContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.NodeCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.TreeTraversalMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.view.ChartElementPresenter.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export abstract class ChartElement extends com.telerik.widget.chart.engine.elementTree.ChartNode {
							public children: com.telerik.widget.chart.engine.elementTree.NodeCollection;
							public constructor();
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public findAncestor(param0: javalangClass<any>): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public isAncestorOf(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): boolean;
							public onChildInserted(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public loadCore(param0: com.telerik.widget.chart.engine.chartAreas.LoadContext): void;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public onChildRemoved(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public findDescendant(param0: com.telerik.widget.chart.engine.elementTree.ChartElement.Predicate): com.telerik.widget.chart.engine.elementTree.ChartNode;
							public setPresenter(param0: com.telerik.widget.chart.engine.view.ChartElementPresenter): void;
							public enumDescendants(param0: com.telerik.widget.chart.engine.elementTree.ChartElement.Predicate, param1: com.telerik.widget.chart.engine.elementTree.TreeTraversalMode): javalangIterable<any>;
							public enumDescendants(param0: com.telerik.widget.chart.engine.elementTree.TreeTraversalMode): javalangIterable<any>;
							public getPresenter(): com.telerik.widget.chart.engine.view.ChartElementPresenter;
							public enumDescendants(): javalangIterable<any>;
							public canRemoveChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public unloadCore(): void;
						}
						export module ChartElement {
							export class Predicate extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.elementTree.ChartElement$Predicate interface with the provided implementation.
								 */
								public constructor(implementation: {
									apply(param0: javalangObject): boolean;
								});
								public apply(param0: javalangObject): boolean;
							}
						}
					}
				}
			}
		}
	}
}

import javautilEnumSet = java.util.EnumSet;
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.MessageDispatchMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.EnumSet.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class ChartMessage extends javalangObject {
							public handled: boolean;
							public stopDispatch: boolean;
							public dispatchPhase: com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase;
							public dispatchMode: javautilEnumSet<any>;
							public previousReceiver: com.telerik.widget.chart.engine.elementTree.ChartNode;
							public data: javalangObject;
							public constructor(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: number, param2: javalangObject, param3: com.telerik.widget.chart.engine.elementTree.MessageDispatchMode);
							public getId(): number;
							public getSender(): com.telerik.widget.chart.engine.elementTree.ChartNode;
							public static register(): number;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.LoadContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartMessage.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.MessageDispatchMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.NodeState.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.view.ChartElementPresenter.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export abstract class ChartNode extends com.telerik.widget.chart.engine.propertyStore.PropertyBagObject {
							public static PROPERTY_CHANGING_MESSAGE: number;
							public static PROPERTY_CHANGED_MESSAGE: number;
							public invalidateScheduled: boolean;
							public trackPropertyChanging: boolean;
							public trackPropertyChanged: boolean;
							public parent: com.telerik.widget.chart.engine.elementTree.ChartElement;
							public processMessage(param0: com.telerik.widget.chart.engine.elementTree.ChartMessage): void;
							public onPropertyChanging(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public getMessageDispatchMode(param0: number): com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public index(): number;
							public raisePropertyChanged(param0: string, param1: number): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public collectionIndex(): number;
							public arrange(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public clearValue(param0: number): boolean;
							public loadCore(param0: com.telerik.widget.chart.engine.chartAreas.LoadContext): void;
							public chartArea(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public getParent(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public invalidate(): void;
							public applyLayoutRounding(): void;
							public unloadCore(): void;
							public constructor();
							public setIsVisible(param0: boolean): void;
							public getLayoutSlot(): com.telerik.android.common.math.RadRect;
							public isVisible(): boolean;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setParent(param0: com.telerik.widget.chart.engine.elementTree.ChartElement): void;
							public onParentChanged(param0: com.telerik.widget.chart.engine.elementTree.ChartElement): void;
							public setValue(param0: number, param1: javalangObject): boolean;
							public arrange(param0: com.telerik.android.common.math.RadRect, param1: boolean): com.telerik.android.common.math.RadRect;
							public getNodeState(): com.telerik.widget.chart.engine.elementTree.NodeState;
							public getPresenter(): com.telerik.widget.chart.engine.view.ChartElementPresenter;
							public isTreeLoaded(): boolean;
							public load(param0: com.telerik.widget.chart.engine.chartAreas.LoadContext): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export abstract class ContentNode extends com.telerik.widget.chart.engine.elementTree.ChartNode {
							public desiredSize: com.telerik.android.common.math.RadSize;
							public constructor();
							public getContent(): javalangObject;
							public setContent(param0: javalangObject): void;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class ElementCollection extends javautilArrayList<any> {
							public size(): number;
							public remove(param0: number): com.telerik.widget.chart.engine.elementTree.ChartNode;
							public add(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public hashCode(): number;
							public add(param0: number, param1: javalangObject): void;
							public indexOf(param0: javalangObject): number;
							public iterator(): javautilIterator<any>;
							public clearItems(): void;
							public remove(param0: javalangObject): boolean;
							public constructor(param0: javautilCollection<any>);
							public listIterator(): javautilListIterator<any>;
							public insertItem(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public equals(param0: javalangObject): boolean;
							public addAll(param0: javautilCollection<any>): boolean;
							public containsAll(param0: javautilCollection<any>): boolean;
							public retainAll(param0: javautilCollection<any>): boolean;
							public constructor();
							public add(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): boolean;
							public clear(): void;
							public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
							public set(param0: number, param1: javalangObject): javalangObject;
							public lastIndexOf(param0: javalangObject): number;
							public constructor(param0: number);
							public get(param0: number): javalangObject;
							public addAll(param0: number, param1: javautilCollection<any>): boolean;
							public removeAll(param0: javautilCollection<any>): boolean;
							public contains(param0: javalangObject): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.elementTree.ChartElement);
							public subList(param0: number, param1: number): javautilList<any>;
							public remove(param0: number): javalangObject;
							public add(param0: javalangObject): boolean;
							public isEmpty(): boolean;
							public listIterator(param0: number): javautilListIterator<any>;
							public toArray(): native.Array<javalangObject>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class MessageDispatchMode extends javalangEnum<any> {
							public static BUBBLE: com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public static TUNNEL: com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public static BUBBLE_AND_TUNNEL: com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.MessageDispatchMode>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class MessageDispatchPhase extends javalangEnum<any> {
							public static BUBBLE: com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase;
							public static TUNNEL: com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartMessage.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class MessageDispatcher extends javalangObject {
							public dispatchMessage(param0: com.telerik.widget.chart.engine.elementTree.ChartMessage): void;
							public isEnabled(): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class ModifyChildrenResult extends javalangEnum<any> {
							public static ACCEPT: com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public static CANCEL: com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public static REFUSE: com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class NodeCollection extends javautilArrayList<any> {
							public size(): number;
							public remove(param0: number): com.telerik.widget.chart.engine.elementTree.ChartNode;
							public hashCode(): number;
							public add(param0: number, param1: javalangObject): void;
							public indexOf(param0: javalangObject): number;
							public iterator(): javautilIterator<any>;
							public getOwner(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public remove(param0: javalangObject): boolean;
							public constructor(param0: javautilCollection<any>);
							public listIterator(): javautilListIterator<any>;
							public equals(param0: javalangObject): boolean;
							public addAll(param0: javautilCollection<any>): boolean;
							public containsAll(param0: javautilCollection<any>): boolean;
							public retainAll(param0: javautilCollection<any>): boolean;
							public constructor();
							public add(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): boolean;
							public clear(): void;
							public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
							public set(param0: number, param1: javalangObject): javalangObject;
							public lastIndexOf(param0: javalangObject): number;
							public constructor(param0: number);
							public get(param0: number): javalangObject;
							public addAll(param0: number, param1: javautilCollection<any>): boolean;
							public remove(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public removeAll(param0: javautilCollection<any>): boolean;
							public contains(param0: javalangObject): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.elementTree.ChartElement);
							public subList(param0: number, param1: number): javautilList<any>;
							public remove(param0: number): javalangObject;
							public add(param0: javalangObject): boolean;
							public isEmpty(): boolean;
							public listIterator(param0: number): javautilListIterator<any>;
							public toArray(): native.Array<javalangObject>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class NodeState extends javalangEnum<any> {
							public static INITIAL: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static LOADING: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static LOADED: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static UNLOADING: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static UNLOADED: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.NodeState;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.NodeState>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class TreeTraversalMode extends javalangEnum<any> {
							public static DEPTH_FIRST: com.telerik.widget.chart.engine.elementTree.TreeTraversalMode;
							public static BREADTH_FIRST: com.telerik.widget.chart.engine.elementTree.TreeTraversalMode;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.TreeTraversalMode>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.TreeTraversalMode;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export module events {
							export class RadPropertyEventArgs extends javalangObject {
								public Cancel: boolean;
								public newValue(): javalangObject;
								public getKey(): number;
								public getPropertyName(): string;
								public constructor(param0: string, param1: javalangObject, param2: javalangObject);
								public constructor(param0: number, param1: javalangObject, param2: javalangObject);
								public oldValue(): javalangObject;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class FastPropertyStore extends javalangObject {
							public constructor();
							public containsEntry(param0: number): boolean;
							public getEntry(param0: number): javalangObject;
							public clear(): void;
							public removeEntry(param0: number): void;
							public setEntry(param0: number, param1: javalangObject): void;
						}
						export module FastPropertyStore {
							export class Entry extends javalangObject {
								public getVal(param0: number): javalangObject;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.propertyStore.FastPropertyStore.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export abstract class PropertyBagObject extends javalangObject {
							public propertyStore: com.telerik.widget.chart.engine.propertyStore.FastPropertyStore;
							public constructor();
							public setValue(param0: number, param1: javalangObject): boolean;
							public getTypedValue(param0: number, param1: javalangObject): javalangObject;
							public isLocalValue(param0: number): boolean;
							public getValue(param0: number): javalangObject;
							public clearValue(param0: number): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class PropertyKeyValue extends javalangObject {
							public EntryKey: number;
							public Element: number;
							public constructor(param0: number, param1: number);
						}
					}
				}
			}
		}
	}
}

import javalangreflectType = java.lang.reflect.Type;
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.lang.reflect.Type.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class PropertyKeys extends javalangObject {
							public static getNameByKey(param0: javalangreflectType, param1: number): string;
							public static register(param0: javalangreflectType, param1: string): number;
							public static register(param0: javalangreflectType, param1: string, param2: number): number;
							public static getPropertyFlags(param0: number): number;
						}
					}
				}
			}
		}
	}
}

import javautilMap = java.util.Map;
/// <reference path="./android.util.SparseArray.d.ts" />
/// <reference path="./java.util.Map.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class PropertyLookup extends javalangObject {
							public namesByKey: androidutilSparseArray<any>;
							public keysByName: javautilMap<any, any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class ValueExtractor extends javalangObject {
							public value: javalangObject;
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class BarSeriesModel extends com.telerik.widget.chart.engine.series.CategoricalSeriesModel {
							public constructor();
							public getMaxBarWidth(): number;
							public getMinBarWidth(): number;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getCombinedPlotStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public setMaxBarWidth(param0: number): void;
							public setMinBarWidth(param0: number): void;
							public getCombinedRoundLayoutStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public getStackGroupKey(): javalangObject;
							public applyLayoutRounding(): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export abstract class CategoricalSeriesModel extends com.telerik.widget.chart.engine.series.SeriesModelWithAxes implements com.telerik.widget.chart.engine.series.combination.SupportCombineMode {
							public static COMBINE_MODE_PROPERTY_KEY: number;
							public static STACK_GROUP_KEY_PROPERTY_KEY: number;
							public constructor();
							public setCombineMode(param0: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode): void;
							public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getStackGroupKey(): javalangObject;
							public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
							public setStackGroupKey(param0: javalangObject): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotDirection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.CategoricalSeriesModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class CategoricalSeriesRoundLayoutContext extends javalangObject {
							public plotDirection(): com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
							public plotArea(): com.telerik.android.common.math.RadRect;
							public snapPointToGridLine(param0: com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase): void;
							public plotOrigin(): number;
							public plotLine(): number;
							public constructor(param0: com.telerik.widget.chart.engine.series.CategoricalSeriesModel);
							public snapPointToPlotLine(param0: com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPointCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export abstract class ChartSeriesModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public static DATA_POINTS_MODIFIED_MESSAGE_KEY: number;
							public constructor();
							public visibleDataPoints(): javautilList<any>;
							public dataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection;
							public getCombinedPlotStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy;
							public getCombinedRoundLayoutStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy;
							public getDataPointsChangedListener(): com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener;
							public onChildInserted(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public onChildRemoved(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public setDataPointsChangedListener(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener): void;
							public updateVisibleDataPoints(): void;
							public static selectPlotMode(param0: javalangIterable<any>): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public getZoomedRect(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
						}
						export module ChartSeriesModel {
							export class DataPointsChangedListener extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.series.ChartSeriesModel$DataPointsChangedListener interface with the provided implementation.
								 */
								public constructor(implementation: {
									onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								});
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPointCollection.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export abstract class DataPointSeriesModel extends com.telerik.widget.chart.engine.series.ChartSeriesModel {
							public constructor();
							public getVirtualizationEnabled(): boolean;
							public visibleDataPoints(): javautilList<any>;
							public dataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection;
							public updateVisibleDataPoints(): void;
							public updateVisibleDataPointsCore(): void;
							public setVirtualizationEnabled(param0: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class Ohlc extends javalangObject {
							public constructor();
							public open(): number;
							public close(): number;
							public high(): number;
							public low(): number;
							public constructor(param0: number, param1: number, param2: number, param3: number);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class OhlcSeriesModel extends com.telerik.widget.chart.engine.series.SeriesModelWithAxes {
							public constructor();
							public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.AngleRange.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartMessage.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class PieSeriesModel extends com.telerik.widget.chart.engine.series.DataPointSeriesModel {
							public static DEFAULT_LABEL_FORMAT: string;
							public constructor();
							public processMessage(param0: com.telerik.widget.chart.engine.elementTree.ChartMessage): void;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public setLabelFormat(param0: string): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public setRange(param0: com.telerik.widget.chart.engine.chartAreas.AngleRange): void;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public getLabelFormat(): string;
							public maxRelativeOffsetFromCenter(): number;
							public getDisplayPercentage(): boolean;
							public setDisplayPercentage(value: boolean): void;
							public getRange(): com.telerik.widget.chart.engine.chartAreas.AngleRange;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class PointSeriesModel extends com.telerik.widget.chart.engine.series.CategoricalSeriesModel {
							public constructor();
							public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getStackGroupKey(): javalangObject;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class ScatterSeriesModel extends com.telerik.widget.chart.engine.series.SeriesModelWithAxes {
							public constructor();
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export abstract class SeriesModelWithAxes extends com.telerik.widget.chart.engine.series.DataPointSeriesModel implements com.telerik.widget.chart.engine.axes.common.SeriesModelWithAxes {
							public constructor();
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public updateVisibleDataPointsCore(): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class ChartSeriesCombineMode extends javalangEnum<any> {
								public static NONE: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public static CLUSTER: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public static STACK: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public static STACK_100: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static values(): native.Array<com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
/// <reference path="./java.util.Hashtable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class ChartSeriesCombineStrategy extends javalangObject {
								public combinedSeries: javautilArrayList<any>;
								public nonCombinedSeries: javautilArrayList<any>;
								public hasCombination: boolean;
								public maximumStackSums: javautilHashtable<any, any>;
								public minimumStackSums: javautilHashtable<any, any>;
								public stackAxis: com.telerik.widget.chart.engine.axes.AxisModel;
								public stackValueAxes: javautilArrayList<any>;
								public isUpdated: boolean;
								public update(param0: javalangIterable<any>, param1: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public plot(): void;
								public reset(): void;
								public constructor();
								public applyLayoutRounding(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombineStack.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.SupportCombineMode.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class CombineGroup extends javalangObject {
								public stacks(): javautilArrayList<any>;
								public constructor();
								public getStack(param0: com.telerik.widget.chart.engine.series.combination.SupportCombineMode): com.telerik.widget.chart.engine.series.combination.CombineStack;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class CombineStack extends javalangObject {
								public key: javalangObject;
								public positiveSum: number;
								public negativeSum: number;
								public points(): javautilArrayList<any>;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.d.ts" />
/// <reference path="./java.lang.reflect.Type.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class CombinedSeries extends javalangObject {
								public series(): javautilArrayList<any>;
								public groups(): javautilArrayList<any>;
								public stackValueAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public constructor(param0: javalangreflectType, param1: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode, param2: number, param3: com.telerik.widget.chart.engine.axes.AxisModel, param4: com.telerik.widget.chart.engine.axes.AxisModel);
								public seriesType(): javalangreflectType;
								public stackAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public combineIndex(): number;
								public combineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export abstract class CombinedSeriesPlotStrategy extends javalangObject {
								public constructor();
								public plot(param0: com.telerik.widget.chart.engine.series.combination.CombinedSeries, param1: number): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export abstract class CombinedSeriesRoundLayoutStrategy extends javalangObject {
								public constructor();
								public applyLayoutRounding(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel, param1: com.telerik.widget.chart.engine.series.combination.CombinedSeries): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class SupportCombineMode extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.series.combination.SupportCombineMode interface with the provided implementation.
								 */
								public constructor(implementation: {
									getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
									getStackGroupKey(): javalangObject;
								});
								public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public getStackGroupKey(): javalangObject;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export module barSeries {
								export class CombinedBarSeriesPlotStrategy extends com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy {
									public constructor();
									public plot(param0: com.telerik.widget.chart.engine.series.combination.CombinedSeries, param1: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export module barSeries {
								export class CombinedBarSeriesRoundLayoutStrategy extends com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy {
									public constructor();
									public applyLayoutRounding(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel, param1: com.telerik.widget.chart.engine.series.combination.CombinedSeries): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class CombinedRangeBarSeriesRoundLayoutStrategy extends com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy {
								public constructor();
								public applyLayoutRounding(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel, param1: com.telerik.widget.chart.engine.series.combination.CombinedSeries): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class Range extends javalangObject {
								public low(): number;
								public constructor(param0: number, param1: number);
								public constructor();
								public high(): number;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class RangeBarSeriesModel extends com.telerik.widget.chart.engine.series.rangeSeries.RangeSeriesBaseModel implements com.telerik.widget.chart.engine.series.combination.SupportCombineMode {
								public getCombinedPlotStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy;
								public setCombineMode(param0: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode): void;
								public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
								public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getShouldRoundLayout(): boolean;
								public constructor();
								public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getCombinedRoundLayoutStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy;
								public getStackGroupKey(): javalangObject;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class RangeSeriesBaseModel extends com.telerik.widget.chart.engine.series.CategoricalSeriesModel {
								public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
								public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getShouldRoundLayout(): boolean;
								public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
								public constructor();
								public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getStackGroupKey(): javalangObject;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotDirection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.RangeDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.rangeSeries.RangeSeriesBaseModel.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class RangeSeriesBaseRoundLayoutContext extends javalangObject {
								public plotLine: number;
								public plotOrigin: number;
								public plotDirection: com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
								public plotArea: com.telerik.android.common.math.RadRect;
								public constructor(param0: com.telerik.widget.chart.engine.series.rangeSeries.RangeSeriesBaseModel);
								public snapPointToGridLine(param0: com.telerik.widget.chart.engine.dataPoints.RangeDataPoint): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module view {
						export class ChartElementPresenter extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.engine.view.ChartElementPresenter interface with the provided implementation.
							 */
							public constructor(implementation: {
								refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								invalidatePalette(): void;
								getCollectionIndex(): number;
							});
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module view {
						export class ChartSeries extends javalangObject implements com.telerik.widget.chart.engine.view.ChartElementPresenter {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.engine.view.ChartSeries interface with the provided implementation.
							 */
							public constructor(implementation: {
								onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								invalidatePalette(): void;
								getCollectionIndex(): number;
							});
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module view {
						export class ChartView extends javalangObject implements com.telerik.widget.chart.engine.view.ChartElementPresenter {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.engine.view.ChartView interface with the provided implementation.
							 */
							public constructor(implementation: {
								getViewportWidth(): number;
								getViewportHeight(): number;
								getZoomWidth(): number;
								getZoomHeight(): number;
								getPanOffsetX(): number;
								getPanOffsetY(): number;
								getPlotAreaClip(): com.telerik.android.common.math.RadRect;
								refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								invalidatePalette(): void;
								getCollectionIndex(): number;
							});
							public invalidatePalette(): void;
							public getZoomWidth(): number;
							public getCollectionIndex(): number;
							public getPanOffsetY(): number;
							public getZoomHeight(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public getViewportHeight(): number;
							public getPanOffsetX(): number;
							public getViewportWidth(): number;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export abstract class ChartAnnotation extends com.telerik.widget.chart.visualization.common.ChartElementPresenter {
							public static ANNOTATION_Z_INDEX: number;
							public constructor();
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public onAttached(): void;
							public getModel(): com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public render(param0: androidgraphicsCanvas): void;
							public processPaletteEntry(param0: com.telerik.widget.palettes.PaletteEntry): void;
							public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public updatePresenters(): void;
							public drawCore(param0: androidgraphicsCanvas): void;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public setClipToPlotArea(param0: boolean): void;
							public getClipToPlotArea(): boolean;
							public getDefaultZIndex(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export class ChartAnnotationLabelLocation extends javalangEnum<any> {
							public static LEFT: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static TOP: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static RIGHT: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static BOTTOM: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static INSIDE: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static values(): native.Array<com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export class ChartAnnotationLabelUpdateContext extends javalangObject {
							public location: com.telerik.android.common.math.RadPoint;
							public layoutSlot: com.telerik.android.common.math.RadRect;
							public constructor(param0: com.telerik.android.common.math.RadPoint);
							public constructor(param0: com.telerik.android.common.math.RadRect);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.annotations.HorizontalAlignment.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.annotations.VerticalAlignment.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export abstract class ChartLabelAnnotation extends com.telerik.widget.chart.visualization.annotations.ChartAnnotation {
							public static LABEL_FORMAT_PROPERTY_KEY: number;
							public static LABEL_LOCATION_PROPERTY_KEY: number;
							public static HORIZONTAL_ALIGNMENT_PROPERTY_KEY: number;
							public static VERTICAL_ALIGNMENT_PROPERTY_KEY: number;
							public static HORIZONTAL_OFFSET_PROPERTY_KEY: number;
							public static VERTICAL_OFFSET_PROPERTY_KEY: number;
							public getLabelLocation(): com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public setLabelLocation(param0: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation): void;
							public setLabelFormat(param0: string): void;
							public processPaletteEntry(param0: com.telerik.widget.palettes.PaletteEntry): void;
							public getLabel(): string;
							public getLabelFormat(): string;
							public getLabelHorizontalAlignment(): com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public getLabelSize(): number;
							public invalidatePalette(): void;
							public getLabelHorizontalOffset(): number;
							public updatePresenters(): void;
							public getLabelVerticalOffset(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public setLabelVerticalOffset(param0: number): void;
							public setLabelHorizontalAlignment(param0: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment): void;
							public constructor();
							public getLabelVerticalAlignment(): com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLabelVerticalAlignment(param0: com.telerik.widget.chart.visualization.annotations.VerticalAlignment): void;
							public getCollectionIndex(): number;
							public drawCore(param0: androidgraphicsCanvas): void;
							public setLabel(param0: string): void;
							public setLabelSize(param0: number): void;
							public setLabelHorizontalOffset(param0: number): void;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export class HorizontalAlignment extends javalangEnum<any> {
							public static LEFT: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public static CENTER: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public static RIGHT: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public static values(): native.Array<com.telerik.widget.chart.visualization.annotations.HorizontalAlignment>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export class VerticalAlignment extends javalangEnum<any> {
							public static TOP: com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public static BOTTOM: com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public static CENTER: com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public static values(): native.Array<com.telerik.widget.chart.visualization.annotations.VerticalAlignment>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.CartesianAxis.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export abstract class CartesianChartAnnotation extends com.telerik.widget.chart.visualization.annotations.ChartLabelAnnotation {
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public setAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public getAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getCollectionIndex(): number;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.annotations.HorizontalAlignment.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.annotations.VerticalAlignment.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.CartesianAxis.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export class CartesianCustomAnnotation extends com.telerik.widget.chart.visualization.annotations.cartesian.CartesianChartAnnotation {
								public getHorizontalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public drawCore(param0: androidgraphicsCanvas): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getHorizontalOffset(): number;
								public getModel(): com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getCollectionIndex(): number;
								public getContent(): javalangObject;
								public setVerticalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public setHorizontalValue(param0: javalangObject): void;
								public setVerticalValue(param0: javalangObject): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis, param1: com.telerik.widget.chart.visualization.common.CartesianAxis, param2: javalangObject, param3: javalangObject, param4: javalangObject);
								public measureNodeOverride(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public getHorizontalAlignment(): com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
								public setVerticalOffset(param0: number): void;
								public getVerticalAlignment(): com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
								public defaultPaletteFamily(): string;
								public setContentRenderer(param0: com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationRenderer): void;
								public invalidatePalette(): void;
								public constructor();
								public onAttached(): void;
								public getVerticalOffset(): number;
								public getVerticalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public getContentRenderer(): com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationRenderer;
								public setVerticalAlignment(param0: com.telerik.widget.chart.visualization.annotations.VerticalAlignment): void;
								public getVerticalValue(): javalangObject;
								public getHorizontalValue(): javalangObject;
								public setHorizontalOffset(param0: number): void;
								public setContent(param0: javalangObject): void;
								public setHorizontalAlignment(param0: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment): void;
								public setHorizontalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.CartesianAxis.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export class CartesianGridLineAnnotation extends com.telerik.widget.chart.visualization.annotations.cartesian.CartesianStrokedAnnotation {
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public setValue(param0: number, param1: javalangObject): void;
								public getValue(param0: number): javalangObject;
								public getValue(): javalangObject;
								public drawCore(param0: androidgraphicsCanvas): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public defaultPaletteFamily(): string;
								public getModel(): com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel;
								public invalidatePalette(): void;
								public constructor();
								public setValue(param0: number, param1: number, param2: javalangObject): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getCollectionIndex(): number;
								public setValue(param0: javalangObject): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis, param1: javalangObject);
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.CartesianAxis.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export class CartesianPlotBandAnnotation extends com.telerik.widget.chart.visualization.annotations.cartesian.CartesianStrokedAnnotation {
								public static FILL_COLOR_PROPERTY_KEY: number;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public drawCore(param0: androidgraphicsCanvas): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public defaultPaletteFamily(): string;
								public getModel(): com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setFrom(param0: javalangObject): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis, param1: javalangObject, param2: javalangObject);
								public getFrom(): javalangObject;
								public setTo(param0: javalangObject): void;
								public getCollectionIndex(): number;
								public processPaletteEntry(param0: com.telerik.widget.palettes.PaletteEntry): void;
								public isStrokeInset(): boolean;
								public getTo(): javalangObject;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public setFillColor(param0: number): void;
								public getFillColor(): number;
							}
						}
					}
				}
			}
		}
	}
}

import androidgraphicsPathEffect = android.graphics.PathEffect;
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.PathEffect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.CartesianAxis.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export abstract class CartesianStrokedAnnotation extends com.telerik.widget.chart.visualization.annotations.cartesian.CartesianChartAnnotation {
								public static STROKE_COLOR_PROPERTY_KEY: number;
								public static STROKE_WIDTH_PROPERTY_KEY: number;
								public strokePaint: androidgraphicsPaint;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public getStrokeEffect(): androidgraphicsPathEffect;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public defaultPaletteFamily(): string;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setStrokeColor(param0: number): void;
								public getStrokeColor(): number;
								public getCollectionIndex(): number;
								public processPaletteEntry(param0: com.telerik.widget.palettes.PaletteEntry): void;
								public setStrokeWidth(param0: number): void;
								public isStrokeInset(): boolean;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public setStrokeEffect(param0: androidgraphicsPathEffect): void;
								public getStrokeWidth(): number;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangeAction.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartBehavior.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class BehaviorCollectionChangedInfo extends javalangObject {
							public getRemovedBehavior(): com.telerik.widget.chart.visualization.behaviors.ChartBehavior;
							public constructor(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior, param1: com.telerik.widget.chart.visualization.behaviors.ChartBehavior, param2: com.telerik.android.common.CollectionChangeAction);
							public setAddedBehavior(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public setRemovedBehavior(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public getAddedBehavior(): com.telerik.widget.chart.visualization.behaviors.ChartBehavior;
							public setAction(param0: com.telerik.android.common.CollectionChangeAction): void;
							public getAction(): com.telerik.android.common.CollectionChangeAction;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartAnimationPanel extends androidwidgetFrameLayout implements com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener, com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener, com.telerik.widget.chart.visualization.common.PropertyChangedListener {
							public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
							public focusableViewAvailable(param0: androidviewView): void;
							public getTextDirection(): number;
							public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public onAnimationFinished(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, param1: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
							public isLayoutRequested(): boolean;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public requestLayout(): void;
							public isTextDirectionResolved(): boolean;
							public onMeasure(param0: number, param1: number): void;
							public isLayoutDirectionResolved(): boolean;
							public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
							public removeAnimation(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation): boolean;
							public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
							public removeView(param0: androidviewView): void;
							public recomputeViewAttributes(param0: androidviewView): void;
							public getParent(): androidviewViewParent;
							public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
							public canResolveTextDirection(): boolean;
							public addAnimation(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation): void;
							public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public canResolveLayoutDirection(): boolean;
							public onStopNestedScroll(param0: androidviewView): void;
							public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
							public addView(param0: androidviewView, param1: number): void;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
							public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
							public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
							public isTextAlignmentResolved(): boolean;
							public getChart(): com.telerik.widget.chart.visualization.common.RadChartViewBase;
							public setChart(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public bringChildToFront(param0: androidviewView): void;
							public onDraw(param0: androidgraphicsCanvas): void;
							public clearChildFocus(param0: androidviewView): void;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
							public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
							public childDrawableStateChanged(param0: androidviewView): void;
							public requestFitSystemWindows(): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
							public showContextMenuForChild(param0: androidviewView): boolean;
							public requestTransparentRegion(param0: androidviewView): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public canResolveTextAlignment(): boolean;
							public getTextAlignment(): number;
							public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
							public addView(param0: androidviewView, param1: number, param2: number): void;
							public focusSearch(param0: androidviewView, param1: number): androidviewView;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public onPropertyChanged(param0: javalangObject, param1: string, param2: javalangObject): void;
							public focusSearch(param0: number): androidviewView;
							public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public createContextMenu(param0: androidviewContextMenu): void;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public addView(param0: androidviewView): void;
							public getLayoutDirection(): number;
							public onCollectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
							public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
							public constructor(param0: androidcontentContext);
							public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
							public sendAccessibilityEvent(param0: number): void;
							public getParentForAccessibility(): androidviewViewParent;
							public startAllAnimations(): void;
							public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.DrawListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartDataContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export abstract class ChartBehavior extends com.telerik.android.common.PropertyManager {
							public constructor();
							public onDrag(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: com.telerik.android.common.math.RadSize, param3: boolean): boolean;
							public onAttached(): void;
							public onTap(param0: androidviewMotionEvent): boolean;
							public chart(): com.telerik.widget.chart.visualization.common.RadChartViewBase;
							public onUp(param0: androidviewMotionEvent): boolean;
							public getDrawListener(): com.telerik.android.primitives.widget.tooltip.contracts.DrawListener;
							public onDoubleTap(param0: androidviewMotionEvent): boolean;
							public onPinchComplete(): void;
							public reset(): void;
							public detach(): void;
							public getContext(param0: androidgraphicsPoint): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public onDown(param0: androidviewMotionEvent): boolean;
							public onHold(param0: androidviewMotionEvent): boolean;
							public onPinch(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector, param1: androidviewMotionEvent): boolean;
							public attach(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public onDetached(): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartBehavior.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartBehaviorCollection extends com.telerik.android.common.ObservableCollection {
							public size(): number;
							public hashCode(): number;
							public add(param0: number, param1: javalangObject): void;
							public indexOf(param0: javalangObject): number;
							public iterator(): javautilIterator<any>;
							public remove(param0: javalangObject): boolean;
							public constructor(param0: javautilCollection<any>);
							public listIterator(): javautilListIterator<any>;
							public remove(param0: number): com.telerik.widget.chart.visualization.behaviors.ChartBehavior;
							public equals(param0: javalangObject): boolean;
							public addAll(param0: javautilCollection<any>): boolean;
							public containsAll(param0: javautilCollection<any>): boolean;
							public retainAll(param0: javautilCollection<any>): boolean;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase);
							public constructor();
							public add(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): boolean;
							public clear(): void;
							public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
							public set(param0: number, param1: javalangObject): javalangObject;
							public lastIndexOf(param0: javalangObject): number;
							public constructor(param0: number);
							public get(param0: number): javalangObject;
							public addAll(param0: number, param1: javautilCollection<any>): boolean;
							public removeAll(param0: javautilCollection<any>): boolean;
							public contains(param0: javalangObject): boolean;
							public add(param0: number, param1: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public subList(param0: number, param1: number): javautilList<any>;
							public remove(param0: number): javalangObject;
							public add(param0: javalangObject): boolean;
							public isEmpty(): boolean;
							public listIterator(param0: number): javautilListIterator<any>;
							public set(param0: number, param1: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): com.telerik.widget.chart.visualization.behaviors.ChartBehavior;
							public toArray(): native.Array<javalangObject>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.DataPointInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartDataContext extends javalangObject {
							public getDataPointInfos(): javautilList<any>;
							public setTouchLocation(param0: androidgraphicsPoint): void;
							public getDataPoints(): javautilList<any>;
							public setClosestDataPoint(param0: com.telerik.widget.chart.visualization.behaviors.DataPointInfo): void;
							public getClosestDataPoint(): com.telerik.widget.chart.visualization.behaviors.DataPointInfo;
							public chart(): com.telerik.widget.chart.visualization.common.RadChartViewBase;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase, param1: javautilList<any>, param2: javautilList<any>, param3: com.telerik.widget.chart.visualization.behaviors.DataPointInfo);
							public setDataPointInfos(param0: javautilList<any>): void;
							public getTouchLocation(): androidgraphicsPoint;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.DrawListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.PanZoomListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.DeferredZoomPresenter.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartPanAndZoomBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartBehavior {
							public getHandleDoubleTap(): boolean;
							public getZoomMode(): number;
							public setZoomToChart(param0: number, param1: number, param2: number, param3: number): void;
							public addPanZoomListener(param0: com.telerik.widget.chart.visualization.behaviors.PanZoomListener): void;
							public getDrawListener(): com.telerik.android.primitives.widget.tooltip.contracts.DrawListener;
							public setZoomStrategy(param0: com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy): void;
							public setHandleDoubleTap(param0: boolean): void;
							public isZoomed(): boolean;
							public onPinchComplete(): void;
							public reset(): void;
							public getZoomStrategy(): com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy;
							public getPanMode(): number;
							public setZoomMode(param0: number): void;
							public removePanZoomListener(param0: com.telerik.widget.chart.visualization.behaviors.PanZoomListener): void;
							public constructor();
							public onDrag(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: com.telerik.android.common.math.RadSize, param3: boolean): boolean;
							public isPinching(): boolean;
							public notifyListenersOnZoom(param0: number, param1: number): void;
							public setPanOffsetToChart(param0: number, param1: number): void;
							public onDoubleTap(param0: androidviewMotionEvent): boolean;
							public setPanMode(param0: number): void;
							public setDeferredZoomPresenter(param0: com.telerik.widget.chart.visualization.behaviors.views.DeferredZoomPresenter): void;
							public getDeferredZoomPresenter(): com.telerik.widget.chart.visualization.behaviors.views.DeferredZoomPresenter;
							public setZoomToChart(param0: number, param1: number, param2: number): void;
							public onPinch(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector, param1: androidviewMotionEvent): boolean;
							public notifyListenersOnPan(param0: number, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartPanZoomMode extends javalangObject {
							public static NONE: number;
							public static HORIZONTAL: number;
							public static VERTICAL: number;
							public static BOTH: number;
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.DrawListener.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartDataContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededListener.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export abstract class ChartPopupBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartBehavior implements com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter {
							public tooltipContentAdapter: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
							public maxTouchDistanceTolerance: number;
							public context: androidcontentContext;
							public popupPresenter: com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public selectedDataPoint: com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public rawOffset(): androidgraphicsPoint;
							public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getDrawListener(): com.telerik.android.primitives.widget.tooltip.contracts.DrawListener;
							public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
							public contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
							public desiredPopupLocation(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): androidgraphicsPoint;
							public getTooltipData(param0: javalangObject): native.Array<javalangObject>;
							public getContextNeededListener(): com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededListener;
							public getPopupPresenter(): com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public getPaletteFamilyName(): string;
							public alignTooltipVertically(): boolean;
							public validateDataContext(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext): boolean;
							public isTooltipDisplayed(): boolean;
							public constructor();
							public open(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
							public setApplyDefaultStyles(param0: boolean): void;
							public availableLayoutSlot(): androidgraphicsRectF;
							public extractTooltipContext(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public extractTooltipContext(param0: androidgraphicsPoint): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public close(): boolean;
							public getMaxTouchDistanceTolerance(): number;
							public onOpenFailed(): void;
							public setPopupPresenter(param0: com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase): void;
							public createPresenter(param0: androidcontentContext): com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public open(param0: androidgraphicsPoint, param1: androidgraphicsPoint): boolean;
							public constructor(param0: androidcontentContext);
							public setMaxTouchDistanceTolerance(param0: number): void;
							public getApplyDefaultStyles(): boolean;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public getLastChartContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public setTooltipContextNeededListener(param0: com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededListener): void;
						}
					}
				}
			}
		}
	}
}

import androidosHandler = android.os.Handler;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.os.Handler.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartScaleGestureDetector extends javalangObject {
							public getCurrentSpanX(): number;
							public getEventTime(): number;
							public getScaleFactor(): number;
							public getPreviousSpan(): number;
							public getPreviousSpanY(): number;
							public isInProgress(): boolean;
							public constructor(param0: androidcontentContext, param1: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.OnScaleGestureListener, param2: androidosHandler);
							public getCurrentSpanY(): number;
							public isQuickScaleEnabled(): boolean;
							public getFocusY(): number;
							public getCurrentSpan(): number;
							public getTimeDelta(): number;
							public setQuickScaleEnabled(param0: boolean): void;
							public getPreviousSpanX(): number;
							public getFocusX(): number;
							public onTouchEvent(param0: androidviewMotionEvent): boolean;
							public constructor(param0: androidcontentContext, param1: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.OnScaleGestureListener);
						}
						export module ChartScaleGestureDetector {
							export class OnScaleGestureListener extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector$OnScaleGestureListener interface with the provided implementation.
								 */
								public constructor(implementation: {
									onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
									onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
									onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
								});
								public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
								public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
								public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							}
							export class SimpleOnScaleGestureListener extends javalangObject implements com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.OnScaleGestureListener {
								public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
								public constructor();
								public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
								public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartSelectionChangeListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartSelectionBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartBehavior {
							public constructor();
							public getSeriesSelectionMode(): com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public onTap(param0: androidviewMotionEvent): boolean;
							public selectedSeries(): javalangIterable<any>;
							public setSelectionChangeListener(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionChangeListener): void;
							public selectedDataPoints(): javalangIterable<any>;
							public onDetached(): void;
							public selectDataPoint(point: DataPoint): ChartSelectionContext;
							public select(object: com.telerik.widget.primitives.legend.LegendSelectable): ChartSelectionContext;
							public selectSeries(series: ChartSeries): ChartSelectionContext;
							public setSeriesSelectionMode(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode): void;
							public setDataPointsSelectionMode(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode): void;
							public getDataPointsSelectionMode(): com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartSelectionChangeListener extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.ChartSelectionChangeListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onSelectionChanged(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext): void;
							});
							public onSelectionChanged(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartSelectionBehavior.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartSelectionContext extends javalangObject {
							public previousSelection(): com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext;
							public deselectedDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public constructor(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionBehavior, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint, param2: com.telerik.widget.chart.engine.dataPoints.DataPoint, param3: com.telerik.widget.chart.visualization.common.ChartSeries, param4: com.telerik.widget.chart.visualization.common.ChartSeries, param5: com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext);
							public selectedSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
							public selectionBehavior(): com.telerik.widget.chart.visualization.behaviors.ChartSelectionBehavior;
							public selectedDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public deselectedSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartSelectionMode extends javalangEnum<any> {
							public static NONE: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public static SINGLE: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public static MULTIPLE: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartTooltipBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartPopupBehavior {
							public static BACKGROUND_PROPERTY_KEY: number;
							public static PADDING_PROPERTY_KEY: number;
							public static CATEGORY_COLOR_PROPERTY_KEY: number;
							public static VALUE_COLOR_PROPERTY_KEY: number;
							public static CATEGORY_SIZE_PROPERTY_KEY: number;
							public static VALUE_SIZE_PROPERTY_KEY: number;
							public triggerMode: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public rawOffset(): androidgraphicsPoint;
							public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getValueTextColor(): number;
							public getCategoryTextColor(): number;
							public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
							public contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
							public desiredPopupLocation(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): androidgraphicsPoint;
							public reset(): void;
							public getPadding(): number;
							public getTooltipData(param0: javalangObject): native.Array<javalangObject>;
							public getTriggerMode(): com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public setCategoryTextColor(param0: number): void;
							public setPadding(param0: number): void;
							public setCategoryTextSize(param0: number): void;
							public getPaletteFamilyName(): string;
							public setBackgroundColor(param0: number): void;
							public alignTooltipVertically(): boolean;
							public onHold(param0: androidviewMotionEvent): boolean;
							public getBackgroundColor(): number;
							public constructor();
							public onDrag(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: com.telerik.android.common.math.RadSize, param3: boolean): boolean;
							public getValueTextSize(): number;
							public setValueTextColor(param0: number): void;
							public availableLayoutSlot(): androidgraphicsRectF;
							public onTap(param0: androidviewMotionEvent): boolean;
							public onDoubleTap(param0: androidviewMotionEvent): boolean;
							public onOpenFailed(): void;
							public createPresenter(param0: androidcontentContext): com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public getCategoryTextSize(): number;
							public constructor(param0: androidcontentContext);
							public setValueTextSize(param0: number): void;
							public onPinch(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector, param1: androidviewMotionEvent): boolean;
							public setTriggerMode(param0: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode): void;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.TextView.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.PieDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.RangeDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.ScatterDataPoint.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartTooltipContentAdapter extends javalangObject implements com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter {
							public applyDefaultStyles: boolean;
							public context: androidcontentContext;
							public tooltipContentId: number;
							public valueTextSize: number;
							public categoryTextSize: number;
							public valueTextColor: number;
							public categoryTextColor: number;
							public paddingLeft: number;
							public paddingTop: number;
							public paddingRight: number;
							public paddingBottom: number;
							public backgroundColor: number;
							public valueToStringConverter: com.telerik.android.common.Function;
							public categoryToStringConverter: com.telerik.android.common.Function;
							public getValueTextColor(): number;
							public getCategoryToStringConverter(): com.telerik.android.common.Function;
							public popupContent(): androidviewView;
							public getCategoryTextColor(): number;
							public extractCategory(param0: javalangObject): string;
							public setCategoryTextColor(param0: number): void;
							public initCategoricalPointView(param0: androidwidgetTextView, param1: androidwidgetTextView, param2: com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint): void;
							public setPadding(param0: number): void;
							public setCategoryTextSize(param0: number): void;
							public setBackgroundColor(param0: number): void;
							public constructor(param0: androidcontentContext, param1: number);
							public getTooltipContent(): number;
							public setCategoryToStringConverter(param0: com.telerik.android.common.Function): void;
							public getBackgroundColor(): number;
							public scatterBubbleContent(): androidviewView;
							public initRangePointView(param0: androidwidgetTextView, param1: androidwidgetTextView, param2: com.telerik.widget.chart.engine.dataPoints.RangeDataPoint): void;
							public ohlcContent(): androidviewView;
							public setApplyDefaultStyles(param0: boolean): void;
							public getOhlcContent(param0: com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint): androidviewView;
							public setTooltipContent(param0: number): void;
							public setValueTextColor(param0: number): void;
							public getValueTextSize(): number;
							public setValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public getIsApplyDefaultStyles(): boolean;
							public scatterContent(): androidviewView;
							public getCategoryTextSize(): number;
							public constructor(param0: androidcontentContext);
							public getView(param0: native.Array<javalangObject>): androidviewView;
							public getValueToStringConverter(): com.telerik.android.common.Function;
							public initPiePointView(param0: androidwidgetTextView, param1: com.telerik.widget.chart.engine.dataPoints.PieDataPoint): void;
							public setValueTextSize(param0: number): void;
							public extractValue(param0: javalangObject): string;
							public getScatterContent(param0: com.telerik.widget.chart.engine.dataPoints.ScatterDataPoint): androidviewView;
							public setPadding(param0: number, param1: number, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartDataContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartTrackBallBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartPopupBehavior {
							public static BACKGROUND_PROPERTY_KEY: number;
							public static PADDING_PROPERTY_KEY: number;
							public static CATEGORY_COLOR_PROPERTY_KEY: number;
							public static VALUE_COLOR_PROPERTY_KEY: number;
							public static CATEGORY_SIZE_PROPERTY_KEY: number;
							public static VALUE_SIZE_PROPERTY_KEY: number;
							public rawOffset(): androidgraphicsPoint;
							public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getValueTextColor(): number;
							public setShowIntersectionPoints(param0: boolean): void;
							public onUp(param0: androidviewMotionEvent): boolean;
							public getCategoryTextColor(): number;
							public setShowTrackInfo(param0: boolean): void;
							public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
							public contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
							public desiredPopupLocation(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): androidgraphicsPoint;
							public getPadding(): number;
							public getTooltipData(param0: javalangObject): native.Array<javalangObject>;
							public setCategoryTextColor(param0: number): void;
							public setPadding(param0: number): void;
							public setCategoryTextSize(param0: number): void;
							public setBackgroundColor(param0: number): void;
							public getPaletteFamilyName(): string;
							public alignTooltipVertically(): boolean;
							public getBackgroundColor(): number;
							public onHold(param0: androidviewMotionEvent): boolean;
							public validateDataContext(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext): boolean;
							public constructor();
							public onDrag(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: com.telerik.android.common.math.RadSize, param3: boolean): boolean;
							public getValueTextSize(): number;
							public setValueTextColor(param0: number): void;
							public availableLayoutSlot(): androidgraphicsRectF;
							public getShowTrackInfo(): boolean;
							public createPresenter(param0: androidcontentContext): com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public getCategoryTextSize(): number;
							public getRelatedDataPoints(): javautilList<any>;
							public constructor(param0: androidcontentContext);
							public setValueTextSize(param0: number): void;
							public getShowIntersectionPoints(): boolean;
							public setSnapMode(param0: com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode): void;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public getSnapMode(): com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public setCustomContentProvider(provider: ChartTrackballContentAdapter.ChartTrackBallContentProvider);
							public getCustomContentProvider(): ChartTrackballContentAdapter.ChartTrackBallContentProvider;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.TextView.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.RangeDataPoint.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartTrackballContentAdapter extends com.telerik.widget.chart.visualization.behaviors.ChartTooltipContentAdapter {
							public setApplyDefaultStyles(param0: boolean): void;
							public getCategoryToStringConverter(): com.telerik.android.common.Function;
							public popupContent(): androidviewView;
							public createOhlcDataPointView(param0: com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint): androidviewView;
							public setValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public getIsApplyDefaultStyles(): boolean;
							public constructor(param0: androidcontentContext);
							public getView(param0: native.Array<javalangObject>): androidviewView;
							public getValueToStringConverter(): com.telerik.android.common.Function;
							public createRangeDataPointView(param0: com.telerik.widget.chart.engine.dataPoints.RangeDataPoint): androidviewView;
							public createCategoricalDataPointView(param0: com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint): androidviewView;
							public constructor(param0: androidcontentContext, param1: number);
							public setCategoryToStringConverter(param0: com.telerik.android.common.Function): void;
							public getViewForDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): androidviewView;
							public updateCategoryText(param0: androidwidgetTextView, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public setCustomContentProvider(provider: ChartTrackballContentAdapter.ChartTrackBallContentProvider);
							public getCustomContentProvider(): ChartTrackballContentAdapter.ChartTrackBallContentProvider;
						}

						export module ChartTrackballContentAdapter {
							export class ChartTrackBallContentProvider {
								constructor(impl: {
									resolveContentForDataPoint(point: com.telerik.widget.chart.engine.dataPoints.DataPoint): string,
									resolveCustomViewForDataPoint(point: com.telerik.widget.chart.engine.dataPoints.DataPoint): androidviewView
								});
								resolveContentForDataPoint(point: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
								resolveCustomViewForDataPoint(point: com.telerik.widget.chart.engine.dataPoints.DataPoint): androidviewView;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartZoomStrategy extends javalangEnum<any> {
							public static IMMEDIATE: com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy;
							public static DEFERRED: com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class DataPointInfo extends javalangObject {
							public constructor();
							public getDisplayHeader(): javalangObject;
							public setSeriesModel(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel): void;
							public setDisplayHeader(param0: javalangObject): void;
							public getDisplayContent(): javalangObject;
							public setContainsTouchLocation(param0: boolean): void;
							public setDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getPriority(): number;
							public setPriority(param0: number): void;
							public getSeriesModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
							public setDisplayContent(param0: javalangObject): void;
							public getContainsTouchLocation(): boolean;
							public getDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public getDistanceToTouchLocation(): number;
							public setDistanceToTouchLocation(param0: number): void;
							public series(): com.telerik.widget.chart.visualization.common.ChartSeries;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class PanZoomListener extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.PanZoomListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onPan(param0: number, param1: number): void;
								onZoom(param0: number, param1: number): void;
							});
							public onZoom(param0: number, param1: number): void;
							public onPan(param0: number, param1: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartDataContext.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TooltipContextNeededEventArgs extends javalangObject {
							public getContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public getDefaultContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public setContext(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext): void;
							public constructor(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartDataContext.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TooltipContextNeededEventArguments extends javalangObject {
							public getContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public getDefaultContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public setContext(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext): void;
							public constructor(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededEventArgs.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TooltipContextNeededListener extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onContextNeeded(param0: com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededEventArgs): void;
							});
							public onContextNeeded(param0: com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededEventArgs): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TooltipTriggerMode extends javalangEnum<any> {
							public static TAP: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public static HOLD: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public static NONE: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TrackBallSnapMode extends javalangEnum<any> {
							public static NONE: com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public static CLOSEST_POINT: com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public static ALL_CLOSE_POINTS: com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode>;
						}
					}
				}
			}
		}
	}
}

import androidsupportv4viewViewPropertyAnimatorCompat = android.support.v4.view.ViewPropertyAnimatorCompat;
/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartAnimation extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation interface with the provided implementation.
								 */
								public constructor(implementation: {
									start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): androidsupportv4viewViewPropertyAnimatorCompat;
									setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
									setDuration(param0: number): void;
									getDuration(): number;
									setInterpolator(param0: androidviewanimationInterpolator): void;
									getInterpolator(): androidviewanimationInterpolator;
									setInitialDelay(param0: number): void;
									getInitialDelay(): number;
									getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
									addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
									removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								});
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): androidsupportv4viewViewPropertyAnimatorCompat;
								public getInterpolator(): androidviewanimationInterpolator;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export abstract class ChartAnimationBase extends javalangObject implements com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, javalangRunnable {
								public getDuration(): number;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public onAnimationFinished(): void;
								public constructor();
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): androidsupportv4viewViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public animateViewCore(param0: androidsupportv4viewViewPropertyAnimatorCompat): void;
								public run(): void;
								public getInterpolator(): androidviewanimationInterpolator;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartAnimationFinishedListener extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener interface with the provided implementation.
								 */
								public constructor(implementation: {
									onAnimationFinished(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, param1: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								});
								public onAnimationFinished(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, param1: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartAnimationGroup extends javalangObject implements com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, javalangRunnable {
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public getChildDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): androidsupportv4viewViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public removeAnimation(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation): void;
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public setSequenceMode(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode): void;
								public getInitialDelay(): number;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public run(): void;
								public addAnimation(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation): void;
								public getInterpolator(): androidviewanimationInterpolator;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartAnimationSequenceMode extends javalangEnum<any> {
								public static CONCURRENT: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode;
								public static SEQUENTIAL: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode;
								public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode>;
								public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartFadeAnimation extends com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase {
								public getStartOpacity(): number;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor();
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): androidsupportv4viewViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setStartOpacity(param0: number): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public animateViewCore(param0: androidsupportv4viewViewPropertyAnimatorCompat): void;
								public run(): void;
								public getInterpolator(): androidviewanimationInterpolator;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartRotateAnimation extends com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase {
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public getPivotY(): number;
								public constructor();
								public setPivotX(param0: number): void;
								public setPivotY(param0: number): void;
								public getStartAngle(): number;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): androidsupportv4viewViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public animateViewCore(param0: androidsupportv4viewViewPropertyAnimatorCompat): void;
								public run(): void;
								public setStartAngle(param0: number): void;
								public getPivotX(): number;
								public getInterpolator(): androidviewanimationInterpolator;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartScaleAnimation extends com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase {
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public getPivotY(): number;
								public constructor();
								public setPivotX(param0: number): void;
								public setPivotY(param0: number): void;
								public getStartScaleX(): number;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): androidsupportv4viewViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setDuration(param0: number): void;
								public setStartScaleX(param0: number): void;
								public setStartScaleY(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public animateViewCore(param0: androidsupportv4viewViewPropertyAnimatorCompat): void;
								public run(): void;
								public getPivotX(): number;
								public getStartScaleY(): number;
								public getInterpolator(): androidviewanimationInterpolator;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartTranslateAnimation extends com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase {
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor();
								public getStartY(): number;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): androidsupportv4viewViewPropertyAnimatorCompat;
								public getStartX(): number;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public setInterpolator(param0: androidviewanimationInterpolator): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public setStartX(param0: number): void;
								public animateViewCore(param0: androidsupportv4viewViewPropertyAnimatorCompat): void;
								public run(): void;
								public setStartY(param0: number): void;
								public getInterpolator(): androidviewanimationInterpolator;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartPanAndZoomBehavior.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module views {
							export class DeferredZoomPresenter extends com.telerik.android.common.PropertyManager implements com.telerik.android.primitives.widget.tooltip.contracts.DrawListener {
								public static FILL_COLOR_PROPERTY_KEY: number;
								public static STROKE_COLOR_PROPERTY_KEY: number;
								public static STROKE_WIDTH_PROPERTY_KEY: number;
								public getOwner(): com.telerik.widget.chart.visualization.behaviors.ChartPanAndZoomBehavior;
								public setOwner(param0: com.telerik.widget.chart.visualization.behaviors.ChartPanAndZoomBehavior): void;
								public setStrokePaint(param0: androidgraphicsPaint): void;
								public notifyDraw(param0: androidgraphicsCanvas): void;
								public setPinchPoints(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.android.common.math.RadPoint): void;
								public constructor();
								public setCanApplyPalette(param0: boolean): void;
								public setStrokeColor(param0: number): void;
								public getZoomY(): number;
								public getStrokePaint(): androidgraphicsPaint;
								public getStrokeColor(): number;
								public getPanX(): number;
								public setStrokeWidth(param0: number): void;
								public getFillPaint(): androidgraphicsPaint;
								public setFillPaint(param0: androidgraphicsPaint): void;
								public getZoomX(): number;
								public setFillColor(param0: number): void;
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getFillColor(): number;
								public getCanApplyPalette(): boolean;
								public getPanY(): number;
								public getStrokeWidth(): number;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module views {
							export class SeriesAnimationView extends androidviewView {
								public decrementAnimationCount(): void;
								public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
								public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
								public incrementAnimationCount(): void;
								public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
								public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
								public onDraw(param0: androidgraphicsCanvas): void;
								public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
								public getActiveAnimationCount(): number;
								public sendAccessibilityEvent(param0: number): void;
								public constructor(param0: androidcontentContext);
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
								public constructor(param0: androidcontentContext, param1: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public onMeasure(param0: number, param1: number): void;
								public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
								public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module views {
							export class SeriesAnimationViewport extends androidviewViewGroup {
								public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
								public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
								public addView(param0: androidviewView): void;
								public focusSearch(param0: androidviewView, param1: number): androidviewView;
								public isLayoutRequested(): boolean;
								public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
								public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
								public getTextDirection(): number;
								public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
								public childDrawableStateChanged(param0: androidviewView): void;
								public constructor(param0: androidcontentContext);
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
								public canResolveLayoutDirection(): boolean;
								public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
								public removeView(param0: androidviewView): void;
								public addView(param0: androidviewView, param1: number, param2: number): void;
								public requestTransparentRegion(param0: androidviewView): void;
								public getParentForAccessibility(): androidviewViewParent;
								public getTextAlignment(): number;
								public setChart(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
								public addView(param0: androidviewView, param1: number): void;
								public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
								public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
								public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
								public getLayoutDirection(): number;
								public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
								public isTextDirectionResolved(): boolean;
								public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
								public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
								public requestLayout(): void;
								public isTextAlignmentResolved(): boolean;
								public onMeasure(param0: number, param1: number): void;
								public recomputeViewAttributes(param0: androidviewView): void;
								public clearChildFocus(param0: androidviewView): void;
								public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
								public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
								public requestFitSystemWindows(): void;
								public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
								public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
								public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
								public requestDisallowInterceptTouchEvent(param0: boolean): void;
								public getParent(): androidviewViewParent;
								public canResolveTextDirection(): boolean;
								public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
								public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
								public isLayoutDirectionResolved(): boolean;
								public canResolveTextAlignment(): boolean;
								public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
								public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
								public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
								public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
								public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
								public onStopNestedScroll(param0: androidviewView): void;
								public createContextMenu(param0: androidviewContextMenu): void;
								public focusSearch(param0: number): androidviewView;
								public focusableViewAvailable(param0: androidviewView): void;
								public sendAccessibilityEvent(param0: number): void;
								public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
								public showContextMenuForChild(param0: androidviewView): boolean;
								public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
								public bringChildToFront(param0: androidviewView): void;
								public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
								public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.RectF.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module views {
							export class TrackballPresenter extends com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase {
								public constructor(param0: androidcontentContext, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter, param2: number);
								public drawLine(param0: androidgraphicsCanvas): void;
								public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
								public constructor(param0: androidcontentContext, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter);
								public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
								public setLinePaint(param0: androidgraphicsPaint): void;
								public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
								public constructor(param0: androidcontentContext);
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
								public openCore(param0: androidgraphicsPoint): void;
								public drawIntersectionPoints(param0: androidgraphicsCanvas): void;
								public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
								public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
								public setIndicatorRadius(param0: number): void;
								public getIntersectionPointPaint(): androidgraphicsPaint;
								public calculateTooltipBounds(param0: androidgraphicsPoint): androidgraphicsRectF;
								public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
								public getIndicatorRadius(): number;
								public getLinePaint(): androidgraphicsPaint;
								public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
								public notifyDraw(param0: androidgraphicsCanvas): void;
								public setIntersectionPointPaint(param0: androidgraphicsPaint): void;
								public sendAccessibilityEvent(param0: number): void;
								public onDrawCore(param0: androidgraphicsCanvas): void;
								public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
								public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.android.common.ObservableCollection.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.decorations.CartesianChartGridModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.Axis.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export class CartesianChartGrid extends com.telerik.widget.chart.visualization.common.ChartElementPresenter {
							public static MAJOR_LINES_THICKNESS_PROPERTY_KEY: number;
							public static MAJOR_LINES_VISIBILITY_PROPERTY_KEY: number;
							public static STRIP_LINES_VISIBILITY_PROPERTY_KEY: number;
							public static LINE_COLOR_PROPERTY_KEY: number;
							public static VERTICAL_LINE_COLOR_PROPERTY_KEY: number;
							public static MAJOR_X_LINE_DASH_ARRAY_PROPERTY_KEY: number;
							public static MAJOR_Y_LINE_DASH_ARRAY_PROPERTY_KEY: number;
							public static MAJOR_X_LINE_RENDER_MODE_PROPERTY_KEY: number;
							public static MAJOR_Y_LINE_RENDER_MODE_PROPERTY_KEY: number;
							public grid: com.telerik.widget.chart.engine.decorations.CartesianChartGridModel;
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public defaultPaletteFamily(): string;
							public getMajorYLinesRenderMode(): number;
							public setVerticalLineColor(param0: number): void;
							public setVerticalLineThickness(param0: number): void;
							public setHorizontalAxis(param0: com.telerik.widget.chart.visualization.common.Axis): void;
							public setMajorYLineDashArray(param0: native.Array<number>): void;
							public getYStripeBrushes(): com.telerik.android.common.ObservableCollection;
							public getMajorLinesVisibility(): number;
							public getMajorYLineDashArray(): native.Array<number>;
							public setLineThickness(param0: number): void;
							public getVerticalLineThickness(): number;
							public invalidatePalette(): void;
							public getMajorXLineDashArray(): native.Array<number>;
							public getMajorXLinesRenderMode(): number;
							public setMajorYLinesRenderMode(param0: number): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public setMajorXLinesRenderMode(param0: number): void;
							public getXStripeBrushes(): com.telerik.android.common.ObservableCollection;
							public getDefaultZIndex(): number;
							public constructor();
							public getVerticalLineColor(): number;
							public onAttached(): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public render(param0: androidgraphicsCanvas): void;
							public setLineColor(param0: number): void;
							public getCollectionIndex(): number;
							public getLineThickness(): number;
							public setStripLinesVisibility(param0: number): void;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public setMajorXLineDashArray(param0: native.Array<number>): void;
							public getLineColor(): number;
							public setMajorLinesVisibility(param0: number): void;
							public setVerticalAxis(param0: com.telerik.widget.chart.visualization.common.Axis): void;
							public getStripLinesVisibility(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
						export module CartesianChartGrid {
							export class GridLinesInfo extends javalangObject {
								public dashArray: native.Array<number>;
								public visible: boolean;
								public renderMode: number;
								public lines: javautilArrayList<any>;
								public owner: com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid;
								public linePaint: androidgraphicsPaint;
								public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid, param1: com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid);
								public drawLines(param0: androidgraphicsCanvas): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export class GridLineRenderMode extends javalangObject {
							public static FIRST: number;
							public static INNER: number;
							public static LAST: number;
							public static FIRST_AND_INNER: number;
							public static INNER_AND_LAST: number;
							public static FIRST_AND_LAST: number;
							public static ALL: number;
							public constructor();
							public static valueOf(param0: string): number;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export class GridLineVisibility extends javalangObject {
							public static NONE: number;
							public static X: number;
							public static Y: number;
							public static XY: number;
							public constructor();
							public static valueOf(param0: string): number;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.common.DataTuple.d.ts" />
/// <reference path="./com.telerik.android.common.ObservableCollection.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.CartesianAxis.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.PresenterCollection.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export class RadCartesianChartView extends com.telerik.widget.chart.visualization.common.RadChartViewBase {
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
							public getZoomWidth(): number;
							public onShowPress(param0: androidviewMotionEvent): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public getPanOffsetY(): number;
							public getHorizontalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
							public createChartAreaModel(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public setGrid(param0: com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public setHorizontalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
							public setVerticalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
							public getAnnotations(): com.telerik.widget.chart.visualization.common.PresenterCollection;
							public getZoomHeight(): number;
							public onDown(param0: androidviewMotionEvent): boolean;
							public getPanOffsetX(): number;
							public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public getVerticalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
							public getGrid(): com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid;
							public onSingleTapConfirmed(param0: androidviewMotionEvent): boolean;
							public convertPointToData(param0: androidgraphicsPoint): com.telerik.android.common.DataTuple;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public onScroll(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public onSingleTapUp(param0: androidviewMotionEvent): boolean;
							public getViewportHeight(): number;
							public getViewportWidth(): number;
							public onDoubleTap(param0: androidviewMotionEvent): boolean;
							public onLongPress(param0: androidviewMotionEvent): void;
							public constructor(param0: androidcontentContext);
							public getLegendInfos(): com.telerik.android.common.ObservableCollection;
							public convertPointToData(param0: androidgraphicsPoint, param1: com.telerik.widget.chart.visualization.common.CartesianAxis, param2: com.telerik.widget.chart.visualization.common.CartesianAxis): com.telerik.android.common.DataTuple;
							public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEvent(param0: number): void;
							public onDoubleTapEvent(param0: androidviewMotionEvent): boolean;
							public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class CategoricalAxis extends com.telerik.widget.chart.visualization.common.CartesianAxis {
								public getMajorTickInterval(): number;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setMajorTickInterval(param0: number): void;
								public getDataPointsForValue(param0: javalangObject): javautilList<any>;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public getLabelTextColor(): number;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public setPlotMode(param0: com.telerik.widget.chart.engine.axes.common.AxisPlotMode): void;
								public getGapLength(): number;
								public setGapLength(param0: number): void;
								public getPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getLabelFontStyle(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public getLabelMargin(): number;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public invalidatePalette(): void;
								public constructor();
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public getLabelFont(): androidgraphicsTypeface;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.DateTimeComponent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.text.DateFormat.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class DateTimeCategoricalAxis extends com.telerik.widget.chart.visualization.cartesianChart.axes.CategoricalAxis {
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getDateTimeFormat(): javatextDateFormat;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public getLabelTextColor(): number;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public setDateTimeComponent(param0: com.telerik.widget.chart.engine.axes.common.DateTimeComponent): void;
								public getDateFormat(): javatextDateFormat;
								public getLabelFontStyle(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public getLabelMargin(): number;
								public setDateTimeFormat(param0: javatextDateFormat): void;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public invalidatePalette(): void;
								public constructor();
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public getDateTimeComponent(): com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public getLabelFont(): androidgraphicsTypeface;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.Function2.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisPlotMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.TimeInterval.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.text.DateFormat.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class DateTimeContinuousAxis extends com.telerik.widget.chart.visualization.common.CartesianAxis {
								public getMajorStepUnit(): com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public setMaximum(param0: javautilCalendar): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getDateTimeFormat(): javatextDateFormat;
								public setMajorStepUnit(param0: com.telerik.widget.chart.engine.axes.common.TimeInterval): void;
								public getDateComparer(): com.telerik.android.common.Function2;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getSourceDateTimeFormat(): javatextDateFormat;
								public getDataPointsForValue(param0: javalangObject): javautilList<any>;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public getLabelTextColor(): number;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public setDateComparer(param0: com.telerik.android.common.Function2): void;
								public getGapLength(): number;
								public setPlotMode(param0: com.telerik.widget.chart.engine.axes.common.AxisPlotMode): void;
								public getMaximum(): javautilCalendar;
								public setSourceDateTimeFormat(param0: javatextDateFormat): void;
								public setGapLength(param0: number): void;
								public getActualRange(): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
								public setMaximumTicks(param0: number): void;
								public getPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getLabelFontStyle(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public getLabelMargin(): number;
								public setDateTimeFormat(param0: javatextDateFormat): void;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public setMajorStep(param0: number): void;
								public getMaximumTicks(): number;
								public invalidatePalette(): void;
								public constructor();
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public setMinimum(param0: javautilCalendar): void;
								public getMinimum(): javautilCalendar;
								public getLabelFont(): androidgraphicsTypeface;
								public getMajorStep(): number;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class LinearAxis extends com.telerik.widget.chart.visualization.cartesianChart.axes.NumericalAxis {
								public getLabelFontStyle(): number;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public getLabelMargin(): number;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setMajorStep(param0: number): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public getLabelTextColor(): number;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public setLabelTextColor(param0: number): void;
								public getLabelFont(): androidgraphicsTypeface;
								public getMajorStep(): number;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class LogarithmicAxis extends com.telerik.widget.chart.visualization.cartesianChart.axes.NumericalAxis {
								public setLogarithmBase(param0: number): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public setExponentStep(param0: number): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public getLabelTextColor(): number;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public getLabelFontStyle(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public getLabelMargin(): number;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public invalidatePalette(): void;
								public constructor();
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public getExponentStep(): number;
								public getLabelFont(): androidgraphicsTypeface;
								public getLogarithmBase(): number;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.continuous.ValueRange.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export abstract class NumericalAxis extends com.telerik.widget.chart.visualization.common.CartesianAxis {
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public getLabelSize(): number;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setRangeExtendDirection(param0: number): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getDataPointsForValue(param0: javalangObject): javautilList<any>;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public getLabelTextColor(): number;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public getMaximum(): number;
								public setMinimum(param0: number): void;
								public getRangeExtendDirection(): number;
								public getActualRange(): com.telerik.widget.chart.engine.axes.continuous.ValueRange;
								public getLabelFontStyle(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public getLabelMargin(): number;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public getDesiredTickCount(): number;
								public invalidatePalette(): void;
								public constructor();
								public getMinimum(): number;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public setDesiredTickCount(param0: number): void;
								public getLabelFont(): androidgraphicsTypeface;
								public setMaximum(param0: number): void;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class AdaptiveMovingAverageKaufmanIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public getFastPeriod(): number;
								public setFastPeriod(param0: number): void;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setSlowPeriod(param0: number): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getSlowPeriod(): number;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class AverageTrueRangeIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowClosePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class BarIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValueIndicatorBase {
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public realizedDataPoints(): javautilList<any>;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPointCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.Axis.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class BollingerBandsIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public standardDeviations: number;
								public lowerBandRenderer: com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public elements: javautilList<any>;
								public getLowerBandStrokeWidth(): number;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public drawCore(param0: androidgraphicsCanvas): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public lowerBandDataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getCollectionIndex(): number;
								public onChartAxisChanged(param0: com.telerik.widget.chart.visualization.common.Axis, param1: com.telerik.widget.chart.visualization.common.Axis): void;
								public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
								public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getStandardDeviations(): number;
								public invalidatePalette(): void;
								public constructor();
								public onAttached(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
								public onModelAttached(): void;
								public getLowerBandStrokeColor(): number;
								public setStandardDeviations(param0: number): void;
								public lowerBandModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
								public setLowerBandStrokeColor(param0: number): void;
								public setLowerBandStrokeWidth(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class CommodityChannelIndexIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowClosePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class ExponentialMovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class HighLowCloseIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowIndicatorBase {
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public initDataBinding(): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getCloseBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public setCloseBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class HighLowClosePeriodIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowCloseIndicatorBase {
								public period: number;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getPeriod(): number;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setPeriod(param0: number): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class HighLowIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.LineIndicatorBase {
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public initDataBinding(): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPointCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.CategoricalSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.Axis.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class IndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries {
								public static FINANCIAL_INDICATOR_Z_INDEX: number;
								public categoryBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public initDataBinding(): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getDataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getCollectionIndex(): number;
								public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
								public createIndicatorModel(): com.telerik.widget.chart.engine.series.CategoricalSeriesModel;
								public onChartAxisChanged(param0: com.telerik.widget.chart.visualization.common.Axis, param1: com.telerik.widget.chart.visualization.common.Axis): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
								public setCategoryBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public model(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
								public getDefaultZIndex(): number;
								public invalidatePalette(): void;
								public constructor();
								public onAttached(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
								public getCategoryBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class LineIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.IndicatorBase {
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public drawCore(param0: androidgraphicsCanvas): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getDashArray(): native.Array<number>;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setStrokeColor(param0: number): void;
								public getLegendFillColor(): number;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getStrokeColor(): number;
								public getCollectionIndex(): number;
								public getRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
								public setStrokeThickness(param0: number): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getLegendStrokeColor(): number;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
								public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
								public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public defaultPaletteFamily(): string;
								public getStrokeThickness(): number;
								public invalidatePalette(): void;
								public constructor();
								public onAttached(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
								public setDashArray(param0: native.Array<number>): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPointCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.Axis.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class MacdIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ShortLongPeriodIndicatorBase {
								public signalDataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public getSignalPaint(): androidgraphicsPaint;
								public setSignalPaint(param0: androidgraphicsPaint): void;
								public signalModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public drawCore(param0: androidgraphicsCanvas): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setSignalPeriod(param0: number): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setStrokeColor(param0: number): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getStrokeColor(): number;
								public getCollectionIndex(): number;
								public onChartAxisChanged(param0: com.telerik.widget.chart.visualization.common.Axis, param1: com.telerik.widget.chart.visualization.common.Axis): void;
								public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
								public setStrokeThickness(param0: number): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getSignalPeriod(): number;
								public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
								public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
								public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public getStrokeThickness(): number;
								public invalidatePalette(): void;
								public constructor();
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
								public onModelAttached(): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class ModifiedExponentialMovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ExponentialMovingAverageIndicator {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class ModifiedMovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class MomentumIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class MovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class OscillatorIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ShortLongPeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class RateOfChangeIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.MomentumIndicator {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class RaviIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ShortLongPeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class RelativeMomentumIndexIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public momentumPeriod: number;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getMomentumPeriod(): number;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setMomentumPeriod(param0: number): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class RelativeStrengthIndexIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class ShortLongPeriodIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValueIndicatorBase {
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public setLongPeriod(param0: number): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getLongPeriod(): number;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getShortPeriod(): number;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
								public setShortPeriod(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPointCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.Axis.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class StochasticFastIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowCloseIndicatorBase {
								public mainPeriod: number;
								public signalPeriod: number;
								public signalRenderer: com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public toString(): string;
								public signalDataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public signalModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public drawCore(param0: androidgraphicsCanvas): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setSignalPeriod(param0: number): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getSignalStrokeWidth(): number;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getCollectionIndex(): number;
								public getElements(): javautilList<any>;
								public onChartAxisChanged(param0: com.telerik.widget.chart.visualization.common.Axis, param1: com.telerik.widget.chart.visualization.common.Axis): void;
								public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
								public getMainPeriod(): number;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSignalStroke(param0: number): void;
								public getSignalPeriod(): number;
								public getSignalStrokeColor(): number;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
								public setSignalStrokeWidth(param0: number): void;
								public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setMainPeriod(param0: number): void;
								public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public invalidatePalette(): void;
								public constructor();
								public onAttached(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
								public onModelAttached(): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class StochasticIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowCloseIndicatorDataSourceBase {
								public setMainPeriod(param0: number): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel);
								public getMainPeriod(): number;
								public setSignalPeriod(param0: number): void;
								public getSignalPeriod(): number;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
								public propertyChange(param0: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class StochasticSlowIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticFastIndicator {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getSlowingPeriod(): number;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setSlowingPeriod(param0: number): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class TrixIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class TrueRangeIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowCloseIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class UltimateOscillatorIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowClosePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public setPeriod3(param0: number): void;
								public setPeriod2(param0: number): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getPeriod3(): number;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getPeriod2(): number;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class ValueIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.LineIndicatorBase {
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public initDataBinding(): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class ValuePeriodIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValueIndicatorBase {
								public period: number;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getPeriod(): number;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setPeriod(param0: number): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class WeightedMovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.CartesianAxis.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export abstract class CartesianSeries extends com.telerik.widget.chart.visualization.common.PointTemplateSeries {
								public getHorizontalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public onAttached(): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setVerticalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
								public getVerticalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public chartAxisChanged(param0: com.telerik.widget.chart.visualization.common.CartesianAxis, param1: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setHorizontalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

import androidgraphicsPointF = android.graphics.PointF;
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class AreaSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalStrokedSeries implements com.telerik.widget.chart.visualization.common.FilledSeries {
									public static FILL_COLOR_PROPERTY_KEY: number;
									public getIsSelected(): boolean;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
									public constructor();
									public getLegendFillColor(): number;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public getFillColor(): number;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: javalangIterable<any>);
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public hitTest(param0: androidgraphicsPointF): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

import androidgraphicsShader = android.graphics.Shader;
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.PathEffect.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Shader.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.DataPointInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class BarSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeries {
									public static FILL_COLOR_PROPERTY_KEY: number;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_WIDTH_PROPERTY_KEY: number;
									public getStrokeWidth(): number;
									public getIsSelected(): boolean;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public findClosestPoint(param0: androidgraphicsPoint): com.telerik.widget.chart.visualization.behaviors.DataPointInfo;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getMaxBarWidth(): number;
									public getMinBarWidth(): number;
									public getRoundBarsRadius(): number;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCanApplyPalette(param0: boolean): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public setMaxBarWidth(param0: number): void;
									public setMinBarWidth(param0: number): void;
									public setAreBarsRounded(param0: boolean): void;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getStrokeEffect(): androidgraphicsPathEffect;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public constructor();
									public getLegendFillColor(): number;
									public setRoundBarsRadius(param0: number): void;
									public invalidatePalette(): void;
									public setData(param0: javalangIterable<any>): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public setFillShader(param0: androidgraphicsShader): void;
									public getAreBarsRounded(): boolean;
									public clearPaletteFromDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getFillColor(): number;
									public getFillPaint(): androidgraphicsPaint;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public setStrokeShader(param0: androidgraphicsShader): void;
									public getStrokePaint(): androidgraphicsPaint;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: javalangIterable<any>);
									public setStrokeColor(param0: number): void;
									public setStrokeEffect(param0: androidgraphicsPathEffect): void;
									public getLegendStrokeColor(): number;
									public setStrokeWidth(param0: number): void;
									public getStrokeShader(): androidgraphicsShader;
									public getFillShader(): androidgraphicsShader;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.PathEffect.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./android.graphics.Shader.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class BubbleSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeries {
									public static FILL_COLOR_PROPERTY_KEY: number;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_WIDTH_PROPERTY_KEY: number;
									public getStrokeWidth(): number;
									public getIsSelected(): boolean;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public getBubbleScale(): number;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public hitTestDataPoint(param0: androidgraphicsPointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCanApplyPalette(param0: boolean): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getStrokeEffect(): androidgraphicsPathEffect;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public constructor();
									public getLegendFillColor(): number;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public getBubbleSizeBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public defaultPaletteFamily(): string;
									public setFillShader(param0: androidgraphicsShader): void;
									public setBubbleScale(param0: number): void;
									public getFillColor(): number;
									public getFillPaint(): androidgraphicsPaint;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public setStrokeShader(param0: androidgraphicsShader): void;
									public getStrokePaint(): androidgraphicsPaint;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public hitTestDataPoint(param0: androidgraphicsPointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: javalangIterable<any>);
									public setBubbleSizeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setStrokeColor(param0: number): void;
									public onBubbleSizeBindingChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setStrokeEffect(param0: androidgraphicsPathEffect): void;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public setStrokeWidth(param0: number): void;
									public getLegendStrokeColor(): number;
									public getStrokeShader(): androidgraphicsShader;
									public getFillShader(): androidgraphicsShader;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class CandlestickSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase {
									public getIsSelected(): boolean;
									public constructor();
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onStrokeWidthChanged(param0: number): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onStrokeChanged(param0: number): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class CategoricalSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeriesBase {
									public getIsSelected(): boolean;
									public constructor();
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: javalangIterable<any>);
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setValueBinding(param0: com.telerik.android.common.Function): void;
									public initDataBinding(): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class CategoricalSeriesBase extends com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries {
									public getIsSelected(): boolean;
									public constructor();
									public setCategoryBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setCombineMode(param0: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCategoryBinding(param0: com.telerik.android.common.Function): void;
									public getStackGroupKey(): javalangObject;
									public setStackGroupKey(param0: javalangObject): void;
									public getCategoryBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public initDataBinding(): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class CategoricalSeriesLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.PointingLabelRenderer {
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public calculateLabelPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsRect): com.telerik.android.common.math.RadPoint;
									public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelFont(param0: androidgraphicsTypeface): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public setLabelFormat(param0: string): void;
									public getLabelFont(): androidgraphicsTypeface;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.PointSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class CategoricalStrokedSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeries implements com.telerik.widget.chart.visualization.common.StrokedSeries {
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_THICKNESS_PROPERTY_KEY: number;
									public lineTouchSize: number;
									//public model: com.telerik.widget.chart.engine.series.PointSeriesModel;
									public renderer: com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public setStrokeThickness(param0: number): void;
									public getIsSelected(): boolean;
									public getDataPointIndicatorRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer;
									public hitTestDataPoint(param0: androidgraphicsPointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
									public getLineTouchTargetSize(): number;
									public setTouchTargetRadius(param0: number): void;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setDataPointIndicatorRenderer(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer): void;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
									public getTouchTargetRadius(): number;
									public constructor();
									public getLegendFillColor(): number;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public drawCore(param0: androidgraphicsCanvas): void;
									public hitTestDataPoint(param0: androidgraphicsPointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
									public setLineTouchTargetSize(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: javalangIterable<any>);
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public setStrokeColor(param0: number): void;
									public getDashArray(): native.Array<number>;
									public getRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public getLegendStrokeColor(): number;
									public setDashArray(param0: native.Array<number>): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class DataPointIndicatorRenderer extends com.telerik.android.common.PropertyManager {
									public static POINT_INDICATOR_STROKE_COLOR_PROPERTY_KEY: number;
									public static POINT_INDICATOR_COLOR_PROPERTY_KEY: number;
									public static POINT_INDICATOR_STROKE_WIDTH_PROPERTY_KEY: number;
									public PALETTE_FAMILY: string;
									public owner: com.telerik.widget.chart.visualization.common.ChartSeries;
									public pointIndicatorStrokeWidth: number;
									public pointIndicatorColor: number;
									public pointIndicatorStrokePaint: androidgraphicsPaint;
									public pointIndicatorStrokeColor: number;
									public pointIndicatorPaint: androidgraphicsPaint;
									public dataPointLocations: javautilList<any>;
									public getPointIndicatorStrokeWidth(): number;
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public clearDataPointLocations(): void;
									public invalidatePalette(): void;
									public drawDataPointIndicators(param0: androidgraphicsCanvas): void;
									public setPointIndicatorStrokeColor(param0: number): void;
									public drawDataPointIndicator(param0: androidgraphicsCanvas, param1: number, param2: number): void;
									public addDataPointLocation(param0: number, param1: number): void;
									public getPointIndicatorColor(): number;
									public getPointIndicatorStrokeColor(): number;
									public setPointIndicatorStrokeWidth(param0: number): void;
									public addDataPointLocation(param0: androidgraphicsPoint): void;
									public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
									public setPointIndicatorColor(param0: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class LineSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalStrokedSeries {
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: javalangIterable<any>);
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public hitTest(param0: androidgraphicsPointF): boolean;
									public getStrokeThickness(): number;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class OhlcSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase {
									public static DOWN_STROKE_COLOR_PROPERTY_KEY: number;
									public static DOWN_STROKE_WIDTH_PROPERTY_KEY: number;
									public getIsSelected(): boolean;
									public constructor();
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
									public getDownStrokeWidth(): number;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public setDownStrokeWidth(param0: number): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setDownStrokeColor(param0: number): void;
									public getDownStrokeColor(): number;
									public setStrokeWidth(param0: number): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPointCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRendererBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class OhlcSeriesBase extends com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries {
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_WIDTH_PROPERTY_KEY: number;
									public renderer: com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRendererBase;
									public getStrokeWidth(): number;
									public getIsSelected(): boolean;
									public setCategoryBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public setOpenBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
									public setCloseBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setIsSelected(param0: boolean): void;
									public getOpenBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCategoryBinding(param0: com.telerik.android.common.Function): void;
									public onStrokeWidthChanged(param0: number): void;
									public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public getCategoryBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onStrokeChanged(param0: number): void;
									public getStrokeColor(): number;
									public setLowBinding(param0: com.telerik.android.common.Function): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public constructor();
									public getLegendFillColor(): number;
									public setHighBinding(param0: com.telerik.android.common.Function): void;
									public invalidatePalette(): void;
									public setData(param0: javalangIterable<any>): void;
									public dataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public setOpenBinding(param0: com.telerik.android.common.Function): void;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setStrokeColor(param0: number): void;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public getLegendStrokeColor(): number;
									public setStrokeWidth(param0: number): void;
									public getCloseBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setCloseBinding(param0: com.telerik.android.common.Function): void;
									public initDataBinding(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class OhlcSeriesLabelRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeriesLabelRenderer {
									public static LABEL_FORMAT: string;
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelFont(param0: androidgraphicsTypeface): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public setLabelFormat(param0: string): void;
									public getLabelFont(): androidgraphicsTypeface;
									public getLabelFormat(): string;
									public getLabelFontStyle(): number;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.PathEffect.d.ts" />
/// <reference path="./android.graphics.Shader.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class RangeBarSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesBase {
									public static FILL_COLOR_PROPERTY_KEY: number;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_WIDTH_PROPERTY_KEY: number;
									public getStrokeWidth(): number;
									public getIsSelected(): boolean;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getRoundBarsRadius(): number;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCanApplyPalette(param0: boolean): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public getStrokeColor(): number;
									public setAreBarsRounded(param0: boolean): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getStrokeEffect(): androidgraphicsPathEffect;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public constructor();
									public getLegendFillColor(): number;
									public setRoundBarsRadius(param0: number): void;
									public invalidatePalette(): void;
									public setData(param0: javalangIterable<any>): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public setFillShader(param0: androidgraphicsShader): void;
									public defaultPaletteFamily(): string;
									public getAreBarsRounded(): boolean;
									public clearPaletteFromDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getFillColor(): number;
									public getFillPaint(): androidgraphicsPaint;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public setStrokeShader(param0: androidgraphicsShader): void;
									public getStrokePaint(): androidgraphicsPaint;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public setStrokeColor(param0: number): void;
									public setStrokeEffect(param0: androidgraphicsPathEffect): void;
									public getLegendStrokeColor(): number;
									public setStrokeWidth(param0: number): void;
									public getStrokeShader(): androidgraphicsShader;
									public getFillShader(): androidgraphicsShader;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class RangeBarSeriesLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer {
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function;
									public setLabelFontStyle(param0: number): void;
									public setLabelFont(param0: androidgraphicsTypeface): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public setLabelFormat(param0: string): void;
									public getLabelFont(): androidgraphicsTypeface;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class RangeSeriesBase extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeriesBase {
									public getIsSelected(): boolean;
									public constructor();
									public setHighBinding(param0: com.telerik.android.common.Function): void;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public setLowBinding(param0: com.telerik.android.common.Function): void;
									public initDataBinding(): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class RangeSeriesStrokeMode extends javalangEnum<any> {
									public static NONE: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
									public static LOW_POINTS: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
									public static HIGH_POINTS: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
									public static LOW_AND_HIGH_POINTS: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
									public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
									public static values(): native.Array<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode>;
									public static valueOf(param0: string): com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class SphericalDataPointIndicatorRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer {
									public pointerIndicatorRadius: number;
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public drawDataPointIndicator(param0: androidgraphicsCanvas, param1: number, param2: number): void;
									public setPointerIndicatorRadius(param0: number): void;
									public getPointerIndicatorRadius(): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class SplineAreaSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.AreaSeries {
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public getFillColor(): number;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: javalangIterable<any>);
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class SplineSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.LineSeries {
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: javalangIterable<any>);
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: javalangIterable<any>);
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BarSeries.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class BarPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase {
									public constructor(param0: javalangObject);
									public pointColors(): javautilHashMap<any, any>;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BarSeries);
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class BubblePointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ScatterPointRenderer {
									public constructor(param0: javalangObject);
									public pointColors(): javautilHashMap<any, any>;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries);
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CandlestickSeries.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class CandlestickPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRendererBase {
									public constructor(param0: javalangObject);
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase);
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CandlestickSeries);
									public getBodyPaint(): androidgraphicsPaint;
									public setBodyPaint(param0: androidgraphicsPaint): void;
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.CategoricalBubbleDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BubbleSeries.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class CategoricalBubblePointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase {
									public constructor(param0: javalangObject);
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BubbleSeries);
									public pointColors(): javautilHashMap<any, any>;
									public getPointRadius(param0: com.telerik.widget.chart.engine.dataPoints.CategoricalBubbleDataPoint): number;
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class ChartDataPointRenderer extends javalangObject {
									/**
									 * Constructs a new instance of the com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer interface with the provided implementation.
									 */
									public constructor(implementation: {
										renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									});
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export abstract class ChartDataPointRendererBase extends javalangObject implements com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer {
									public constructor(param0: javalangObject);
									public getSeries(): javalangObject;
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class OhlcPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRendererBase {
									public downStrokePaint: androidgraphicsPaint;
									public constructor(param0: javalangObject);
									public getDownStroke(): androidgraphicsPaint;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase);
									public setDownStroke(param0: androidgraphicsPaint): void;
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export abstract class OhlcPointRendererBase extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase {
									public strokePaint: androidgraphicsPaint;
									public constructor(param0: javalangObject);
									public pointColors(): javautilHashMap<any, any>;
									public upStrokePaint(): androidgraphicsPaint;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase);
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeBarSeries.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class RangeBarPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase {
									public constructor(param0: javalangObject);
									public pointColors(): javautilHashMap<any, any>;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeBarSeries);
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class ScatterPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase {
									public constructor(param0: javalangObject);
									public pointColors(): javautilHashMap<any, any>;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries);
									public renderPoint(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class BubbleSeriesLabelRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterSeriesLabelRenderer {
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelFont(param0: androidgraphicsTypeface): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public setLabelFormat(param0: string): void;
									public getLabelFont(): androidgraphicsTypeface;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterAreaSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterLineSeries implements com.telerik.widget.chart.visualization.common.FilledSeries {
									public setFillPaint(param0: androidgraphicsPaint): void;
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public getFillColor(): number;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterBubbleSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries {
									public getIsSelected(): boolean;
									public constructor();
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public getBubbleScale(): number;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public getBubbleSizeBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setBubbleScale(param0: number): void;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setBubbleSizeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public onBubbleSizeBindingChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterBubbleSeriesLabelRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterSeriesLabelRenderer {
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelFont(param0: androidgraphicsTypeface): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public setLabelFormat(param0: string): void;
									public getLabelFont(): androidgraphicsTypeface;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterLineSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries implements com.telerik.widget.chart.visualization.common.StrokedSeries {
									public lineTouchSize: number;
									public setStrokeThickness(param0: number): void;
									public getIsSelected(): boolean;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public initFields(): void;
									public getLineTouchTargetSize(): number;
									public setTouchTargetRadius(param0: number): void;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public setStrokePaint(param0: androidgraphicsPaint): void;
									public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
									public getTouchTargetRadius(): number;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public drawCore(param0: androidgraphicsCanvas): void;
									public setLineTouchTargetSize(param0: number): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public setStrokeColor(param0: number): void;
									public getRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public hitTest(param0: androidgraphicsPointF): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPointCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ScatterPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterPointSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries {
									public static FILL_COLOR_PROPERTY_KEY: number;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_THICKNESS_PROPERTY_KEY: number;
									public scatterPointRenderer: com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ScatterPointRenderer;
									public getIsSelected(): boolean;
									public hitTestDataPoint(param0: androidgraphicsPointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
									public setFillColor(param0: number): void;
									public getYValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setYValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setXValueBinding(param0: com.telerik.android.common.Function): void;
									public setCanApplyPalette(param0: boolean): void;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public setStrokePaint(param0: androidgraphicsPaint): void;
									public dataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public getDistanceToPoint(param0: androidgraphicsPoint, param1: androidgraphicsPoint): number;
									public getFillPaint(): androidgraphicsPaint;
									public getFillColor(): number;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getStrokePaint(): androidgraphicsPaint;
									public hitTestDataPoint(param0: androidgraphicsPointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public setStrokeColor(param0: number): void;
									public getLegendStrokeColor(): number;
									public setFillPaint(param0: androidgraphicsPaint): void;
									public setStrokeThickness(param0: number): void;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public setTouchTargetSize(param0: number): void;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public setXValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public initFields(): void;
									public setPointSize(param0: number): void;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public getTouchTargetSize(): number;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setYValueBinding(param0: com.telerik.android.common.Function): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getCollectionIndex(): number;
									public constructor();
									public getLegendFillColor(): number;
									public invalidatePalette(): void;
									public setData(param0: javalangIterable<any>): void;
									public defaultPaletteFamily(): string;
									public getXValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public initDataBinding(): void;
									public getPointSize(): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterSeriesLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.PointingLabelRenderer {
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public calculateLabelPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsRect): com.telerik.android.common.math.RadPoint;
									public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelFont(param0: androidgraphicsTypeface): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public setLabelFormat(param0: string): void;
									public getLabelFont(): androidgraphicsTypeface;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterSplineAreaSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterAreaSeries {
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public getFillColor(): number;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.LineRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterSplineSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterLineSeries {
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.common.ChartElementPresenter.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class AnnotationCollection extends com.telerik.widget.chart.visualization.common.PresenterCollection {
							public size(): number;
							public hashCode(): number;
							public add(param0: number, param1: javalangObject): void;
							public indexOf(param0: javalangObject): number;
							public iterator(): javautilIterator<any>;
							public add(param0: number, param1: com.telerik.widget.chart.visualization.common.ChartElementPresenter): void;
							public remove(param0: javalangObject): boolean;
							public constructor(param0: javautilCollection<any>);
							public listIterator(): javautilListIterator<any>;
							public remove(param0: number): com.telerik.widget.chart.visualization.common.ChartElementPresenter;
							public equals(param0: javalangObject): boolean;
							public addAll(param0: javautilCollection<any>): boolean;
							public containsAll(param0: javautilCollection<any>): boolean;
							public retainAll(param0: javautilCollection<any>): boolean;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase);
							public constructor();
							public add(param0: com.telerik.widget.chart.visualization.common.ChartElementPresenter): boolean;
							public clear(): void;
							public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
							public set(param0: number, param1: javalangObject): javalangObject;
							public lastIndexOf(param0: javalangObject): number;
							public constructor(param0: number);
							public get(param0: number): javalangObject;
							public addAll(param0: number, param1: javautilCollection<any>): boolean;
							public removeAll(param0: javautilCollection<any>): boolean;
							public contains(param0: javalangObject): boolean;
							public subList(param0: number, param1: number): javautilList<any>;
							public remove(param0: number): javalangObject;
							public add(param0: javalangObject): boolean;
							public isEmpty(): boolean;
							public listIterator(param0: number): javautilListIterator<any>;
							public toArray(): native.Array<javalangObject>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisType.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class Axis extends com.telerik.widget.chart.visualization.common.ChartElementPresenter implements com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer {
							public static AXIS_Z_INDEX: number;
							public static LINE_THICKNESS_KEY: string;
							public static LINE_COLOR_KEY: string;
							public static LABEL_COLOR: string;
							public static LABEL_SIZE_KEY: string;
							public static LABEL_FONT_KEY: string;
							public static LABEL_FONT_STYLE_KEY: string;
							public static LABEL_FIT_MODE: string;
							public static LABEL_ROTATION_ANGLE: string;
							public static TICK_COLOR_KEY: string;
							public static TICK_THICKNESS_KEY: string;
							public static LABEL_COLOR_PROPERTY_KEY: number;
							public static LABEL_SIZE_PROPERTY_KEY: number;
							public static LABEL_FONT_PROPERTY_KEY: number;
							public static LABEL_FONT_STYLE_PROPERTY_KEY: number;
							public static LABEL_FIT_MODE_PROPERTY_KEY: number;
							public static LABEL_ROTATION_ANGLE_PROPERTY_KEY: number;
							public static TICK_COLOR_PROPERTY_KEY: number;
							public static TICK_THICKNESS_PROPERTY_KEY: number;
							public defaultLabelRenderer: com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getShowLabels(): boolean;
							public setLabelFormat(param0: string): void;
							public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public setShowLabels(param0: boolean): void;
							public getLayoutSlot(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: com.telerik.widget.chart.visualization.common.ChartLayoutContext): com.telerik.android.common.math.RadRect;
							public getLabelFormat(): string;
							public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getLabelSize(): number;
							public setAxisType(param0: com.telerik.widget.chart.engine.axes.AxisType): void;
							public getLabelInterval(): number;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public setLabelInterval(param0: number): void;
							public onAttached(): void;
							public getLabelLayoutMode(): com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getMajorTickOffset(): number;
							public setLabelFont(param0: androidgraphicsTypeface): void;
							public getDataPointsForValue(param0: javalangObject): javautilList<any>;
							public setTickColor(param0: number): void;
							public getCollectionIndex(): number;
							public getAxisType(): com.telerik.widget.chart.engine.axes.AxisType;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public getLabelFont(): androidgraphicsTypeface;
							public getLabelTextColor(): number;
							public setLabelRenderer(param0: com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer): void;
							public setLabelSize(param0: number): void;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public createDefaultLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public setLabelTextColor(param0: number): void;
							public setLabelOffset(param0: number): void;
							public defaultPaletteFamily(): string;
							public getLastLayoutContext(): com.telerik.widget.chart.visualization.common.ChartLayoutContext;
							public setVerticalWidth(param0: number): void;
							public setTickThickness(param0: number): void;
							public invalidatePalette(): void;
							public getModel(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getTickColor(): number;
							public getLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public getLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
							public setLastLabelVisibility(param0: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility): void;
							public setLabelMargin(param0: number): void;
							public getDefaultZIndex(): number;
							public constructor();
							public refreshNodeCore(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getLabelFontStyle(): number;
							public resolveLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public render(param0: androidgraphicsCanvas): void;
							public getLabelOffset(): number;
							public getVerticalWidth(): number;
							public setLabelRotationAngle(param0: number): void;
							public getLabelFitMode(): com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function;
							public getTickThickness(): number;
							public setMajorTickOffset(param0: number): void;
							public setLabelLayoutMode(param0: com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode): void;
							public getLabelRotationAngle(): number;
							public setLabelFitMode(param0: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class CartesianAxis extends com.telerik.widget.chart.visualization.common.LineAxis {
							public linkedSeriesCount: number;
							public createDefaultLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public setLabelTextColor(param0: number): void;
							public setLabelFormat(param0: string): void;
							public setVerticalLocation(param0: com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation): void;
							public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getLabelFormat(): string;
							public getLabelSize(): number;
							public invalidatePalette(): void;
							public getVerticalLocation(): com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public setLabelMargin(param0: number): void;
							public constructor();
							public getLabelFontStyle(): number;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getHorizontalLocation(): com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
							public setHorizontalLocation(param0: com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation): void;
							public setLabelFont(param0: androidgraphicsTypeface): void;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function;
							public getCollectionIndex(): number;
							public measureNodeOverride(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public getLabelFont(): androidgraphicsTypeface;
							public getLabelTextColor(): number;
							public setLabelSize(param0: number): void;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class ChartElementPresenter extends com.telerik.widget.chart.visualization.common.PresenterBase {
							public chart: com.telerik.widget.chart.visualization.common.RadChartViewBase;
							public constructor();
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public onAttached(): void;
							public onPaletteInvalidated(): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getPalette(): com.telerik.widget.palettes.ChartPalette;
							public setZIndex(param0: number): void;
							public getCanApplyPalette(): boolean;
							public invalidatePalette(): void;
							public updatePalette(param0: boolean): void;
							public requestRender(): void;
							public getCollectionIndex(): number;
							public detach(): void;
							public requestLayout(): void;
							public getChart(): com.telerik.widget.chart.visualization.common.RadChartViewBase;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public getZIndex(): number;
							public attach(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public processPaletteChanged(): void;
							public getDefaultZIndex(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class ChartLayoutContext extends javalangObject {
							public constructor();
							public panOffset(): com.telerik.android.common.math.RadPoint;
							public clipRect(): com.telerik.android.common.math.RadRect;
							public constructor(param0: com.telerik.android.common.math.RadSize, param1: com.telerik.android.common.math.RadSize, param2: com.telerik.android.common.math.RadPoint, param3: com.telerik.android.common.math.RadRect);
							public scale(): com.telerik.android.common.math.RadSize;
							public getAvailableSize(): com.telerik.android.common.math.RadSize;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class ChartPresenterImpl extends com.telerik.widget.chart.visualization.common.ChartElementPresenter {
							public constructor();
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public onUIUpdated(): void;
							public refreshNodeCore(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public defaultPaletteFamily(): string;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public processPaletteChanged(): void;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase);
							public getDefaultZIndex(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartElement.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.DataPointInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.PropertyChangedListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.SeriesSelectionMode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class ChartSeries extends com.telerik.widget.chart.visualization.common.ChartElementPresenter implements com.telerik.widget.chart.engine.view.ChartSeries, com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener, com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener {
							public static SERIES_Z_INDEX: number;
							public isVisibleInLegend: boolean;
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLabelFormat(param0: string): void;
							public getShowLabels(): boolean;
							public removePropertyChangedListener(param0: com.telerik.widget.chart.visualization.common.PropertyChangedListener): void;
							public getLabelFormat(): string;
							public setShowLabels(param0: boolean): void;
							public getLabelSize(): number;
							public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
							public setLabelStrokeColor(param0: number): void;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public dataSource(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
							public setIsVisibleInLegend(param0: boolean): void;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public onAttached(): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getPlotAreaSize(): com.telerik.android.common.math.RadSize;
							public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							public findClosestPoint(param0: androidgraphicsPoint): com.telerik.widget.chart.visualization.behaviors.DataPointInfo;
							public setLabelFont(param0: androidgraphicsTypeface): void;
							public notifyPropertyChangedListeners(param0: string, param1: javalangObject): void;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getLabelFillColor(): number;
							public getCollectionIndex(): number;
							public onModelAttached(): void;
							public drawCore(param0: androidgraphicsCanvas): void;
							public getLabelFont(): androidgraphicsTypeface;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public setClipToPlotArea(param0: boolean): void;
							public getLabelTextColor(): number;
							public getSelectionMode(): com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public setLabelSize(param0: number): void;
							public getClipToPlotArea(): boolean;
							public addPropertyChangedListener(param0: com.telerik.widget.chart.visualization.common.PropertyChangedListener): void;
							public getIsSelected(): boolean;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public initDataBinding(): void;
							public setLabelTextColor(param0: number): void;
							public getLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
							public getIsVisibleInLegend(): boolean;
							public setLabelPadding(param0: number, param1: number, param2: number, param3: number): void;
							public onIsVisibleInLegendChanged(param0: boolean): void;
							public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
							public invalidatePalette(): void;
							public hitTestDataPoint(param0: androidgraphicsPointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public postRender(param0: androidgraphicsCanvas): void;
							public setLabelMargin(param0: number): void;
							public onDataBindingComplete(): void;
							public getDefaultZIndex(): number;
							public constructor();
							public getLabelFontStyle(): number;
							public setData(param0: javalangIterable<any>): void;
							public getDistanceToPoint(param0: androidgraphicsPoint, param1: androidgraphicsPoint): number;
							public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public render(param0: androidgraphicsCanvas): void;
							public hitTest(param0: androidgraphicsPointF): boolean;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public model(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
							public setSelectionMode(param0: com.telerik.widget.chart.visualization.common.SeriesSelectionMode): void;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function;
							public setLabelFillColor(param0: number): void;
							public setLabelRenderer(param0: com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer): void;
							public hitTestDataPoint(param0: androidgraphicsPointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
							public getData(): javalangIterable<any>;
							public getLabelStrokeColor(): number;
							public onIsSelectedChanged(): void;
							public onDataPointSelectionChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public setIsSelected(param0: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class FilledSeries extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.common.FilledSeries interface with the provided implementation.
							 */
							public constructor(implementation: {
								getFillColor(): number;
							});
							public getFillColor(): number;
						}
					}
				}
			}
		}
	}
}

import androidtextStaticLayout = android.text.StaticLayout;
/// <reference path="./android.text.StaticLayout.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class LabelSizeInfo extends javalangObject {
							public textLayout: androidtextStaticLayout;
							public size: com.telerik.android.common.math.RadSize;
							public untransformedSize: com.telerik.android.common.math.RadSize;
							public transformOffset: com.telerik.android.common.math.RadPoint;
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class LineAxis extends com.telerik.widget.chart.visualization.common.Axis {
							public static LINE_COLOR_PROPERTY_KEY: number;
							public static LINE_THICKNESS_PROPERTY_KEY: number;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLabelTextColor(param0: number): void;
							public setLabelFormat(param0: string): void;
							public setShowLine(param0: boolean): void;
							public setLineDashArray(param0: native.Array<number>): void;
							public getShowLine(): boolean;
							public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getLabelFormat(): string;
							public getLabelSize(): number;
							public setLineThickness(param0: number): void;
							public invalidatePalette(): void;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public setLabelMargin(param0: number): void;
							public constructor();
							public getLabelFontStyle(): number;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public render(param0: androidgraphicsCanvas): void;
							public setLineColor(param0: number): void;
							public setLabelFont(param0: androidgraphicsTypeface): void;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function;
							public getCollectionIndex(): number;
							public getLineThickness(): number;
							public getLineDashArray(): native.Array<number>;
							public getLabelFont(): androidgraphicsTypeface;
							public getLabelTextColor(): number;
							public setLabelSize(param0: number): void;
							public getLineColor(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendItem.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class PointTemplateSeries extends com.telerik.widget.chart.visualization.common.ChartSeries implements com.telerik.widget.primitives.legend.LegendSelectable {
							public legendItem: com.telerik.widget.primitives.legend.LegendItem;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
							public onIsVisibleInLegendChanged(param0: boolean): void;
							public getLegendFillColor(): number;
							public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
							public invalidatePalette(): void;
							public getLegendTitle(): string;
							public setLegendTitle(param0: string): void;
							public getLegendStrokeColor(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public setDataPointRenderer(param0: com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer): void;
							public onDataBindingComplete(): void;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
							public constructor();
							public onUIUpdated(): void;
							public onAttached(): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public initFields(): void;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							public getDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
							public getDefaultEntry(): com.telerik.widget.palettes.PaletteEntry;
							public clearPaletteFromDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getCollectionIndex(): number;
							public measureNodeOverride(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
							public drawCore(param0: androidgraphicsCanvas): void;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public processPaletteChanged(): void;
							public setIsSelected(param0: boolean): void;
							public getIsSelected(): boolean;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class PresenterBase extends com.telerik.android.common.PropertyManager implements com.telerik.widget.chart.engine.view.ChartElementPresenter, com.telerik.widget.palettes.PaletteChangedListener {
							public lastLayoutContext: com.telerik.widget.chart.visualization.common.ChartLayoutContext;
							public setPaletteFamily(param0: string): void;
							public updateUI(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public defaultPaletteFamily(): string;
							public isLoaded(): boolean;
							public setCanApplyPalette(param0: boolean): void;
							public invalidatePalette(): void;
							public requestRender(): void;
							public getPaletteFamily(): string;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public postRender(param0: androidgraphicsCanvas): void;
							public constructor();
							public onUIUpdated(): void;
							public refreshNodeCore(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public paletteFamily(): string;
							public setVisible(param0: boolean): void;
							public isPaletteApplied(): boolean;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public render(param0: androidgraphicsCanvas): void;
							public isVisible(): boolean;
							public onUnloaded(): void;
							public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public setVisible(param0: boolean, param1: boolean): void;
							public getPaletteFamilyCore(): string;
							public getCanApplyPalette(): boolean;
							public onLoaded(): void;
							public getCollectionIndex(): number;
							public measureNodeOverride(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.common.ChartElementPresenter.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.RadChartViewBase.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class PresenterCollection extends com.telerik.android.common.ObservableCollection {
							public size(): number;
							public hashCode(): number;
							public add(param0: number, param1: javalangObject): void;
							public indexOf(param0: javalangObject): number;
							public iterator(): javautilIterator<any>;
							public add(param0: number, param1: com.telerik.widget.chart.visualization.common.ChartElementPresenter): void;
							public reset(): void;
							public remove(param0: javalangObject): boolean;
							public constructor(param0: javautilCollection<any>);
							public listIterator(): javautilListIterator<any>;
							public remove(param0: number): com.telerik.widget.chart.visualization.common.ChartElementPresenter;
							public equals(param0: javalangObject): boolean;
							public addAll(param0: javautilCollection<any>): boolean;
							public containsAll(param0: javautilCollection<any>): boolean;
							public retainAll(param0: javautilCollection<any>): boolean;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase);
							public constructor();
							public add(param0: com.telerik.widget.chart.visualization.common.ChartElementPresenter): boolean;
							public init(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase): void;
							public clear(): void;
							public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
							public set(param0: number, param1: javalangObject): javalangObject;
							public lastIndexOf(param0: javalangObject): number;
							public constructor(param0: number);
							public get(param0: number): javalangObject;
							public addAll(param0: number, param1: javautilCollection<any>): boolean;
							public removeAll(param0: javautilCollection<any>): boolean;
							public owner(): com.telerik.widget.chart.visualization.common.RadChartViewBase;
							public contains(param0: javalangObject): boolean;
							public subList(param0: number, param1: number): javautilList<any>;
							public remove(param0: number): javalangObject;
							public add(param0: javalangObject): boolean;
							public isEmpty(): boolean;
							public listIterator(param0: number): javautilListIterator<any>;
							public toArray(): native.Array<javalangObject>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class PropertyChangedListener extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.common.PropertyChangedListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onPropertyChanged(param0: javalangObject, param1: string, param2: javalangObject): void;
							});
							public onPropertyChanged(param0: javalangObject, param1: string, param2: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

import androidcontentresTypedArray = android.content.res.TypedArray;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.TypedArray.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.common.ObservableCollection.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.android.primitives.widget.tooltip.contracts.DrawListener.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.BehaviorCollectionChangedInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartBehavior.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartBehaviorCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartDataContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartElementPresenter.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.PresenterCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.StackedSeriesContext.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class RadChartViewBase extends androidviewView implements com.telerik.widget.chart.engine.view.ChartView, com.telerik.widget.primitives.legend.LegendInfoProvider, androidviewGestureDetectorOnGestureListener, androidviewGestureDetectorOnDoubleTapListener, com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.OnScaleGestureListener {
							public updateSuspended: boolean;
							public renderSuspended: boolean;
							public paddingLeft: number;
							public paddingRight: number;
							public paddingTop: number;
							public paddingBottom: number;
							public clipToBounds: boolean;
							public oldWidth: number;
							public oldHeight: number;
							public setMaxZoom(param0: com.telerik.android.common.math.RadSize): void;
							public setChartPadding(param0: number, param1: number, param2: number, param3: number): void;
							public getDataContext(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public createChartAreaModel(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public resetBehaviors(): void;
							public setSeries(param0: com.telerik.widget.chart.visualization.common.PresenterCollection): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public getChartArea(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public endUpdate(): void;
							public onDetachedFromWindow(): void;
							public onScroll(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public setClipToBounds(param0: boolean): void;
							public getViewportHeight(): number;
							public setSelectionPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getEmptyContent(): javalangObject;
							public clampZoom(param0: number, param1: number): com.telerik.android.common.math.RadSize;
							public onLongPress(param0: androidviewMotionEvent): void;
							public arrangeOverride(param0: number, param1: number): com.telerik.android.common.math.RadSize;
							public onDoubleTapEvent(param0: androidviewMotionEvent): boolean;
							public getHoldDelay(): number;
							public processPaletteChanged(): void;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getBehaviors(): com.telerik.widget.chart.visualization.behaviors.ChartBehaviorCollection;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public setPanOffset(param0: number, param1: number): void;
							public onShowPress(param0: androidviewMotionEvent): void;
							public beginUpdate(): void;
							public removeOnDrawListener(param0: com.telerik.android.primitives.widget.tooltip.contracts.DrawListener): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public stackedSeriesContext(): com.telerik.widget.chart.visualization.common.StackedSeriesContext;
							public setPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public updateChartArea(): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public presenters(): javautilList<any>;
							public getZoomHeight(): number;
							public onAttachedToWindow(): void;
							public chartAreaModel(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public onUnloaded(): void;
							public validateBehaviourSupport(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public initFromXML(param0: androidcontentresTypedArray): void;
							public addOnDrawListener(param0: com.telerik.android.primitives.widget.tooltip.contracts.DrawListener): void;
							public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public onMeasure(param0: number, param1: number): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public getPanOffsetX(): number;
							public sortPresenters(): void;
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public onTouchEvent(param0: androidviewMotionEvent): boolean;
							public setChartPadding(param0: number): void;
							public onBehaviorsCollectionChanging(param0: com.telerik.widget.chart.visualization.behaviors.BehaviorCollectionChangedInfo): void;
							public getPanOffset(): com.telerik.android.common.math.RadPoint;
							public getPalette(): com.telerik.widget.palettes.ChartPalette;
							public getViewportWidth(): number;
							public getMaxZoom(): com.telerik.android.common.math.RadSize;
							public getCollectionIndex(): number;
							public onDraw(param0: androidgraphicsCanvas): void;
							public clampTranslate(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.android.common.math.RadSize): com.telerik.android.common.math.RadPoint;
							public onPanOffsetChanged(): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public getZoomWidth(): number;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public getPanOffsetY(): number;
							public endUpdate(param0: boolean): void;
							public presenterImpl(): com.telerik.widget.chart.visualization.common.ChartElementPresenter;
							public generateEmptyContent(): string;
							public getDataContext(param0: androidgraphicsPoint): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public onZoomChanged(): void;
							public setHoldDelay(param0: number): void;
							public getZoom(): com.telerik.android.common.math.RadSize;
							public invalidatePalette(): void;
							public requestRender(): void;
							public onPresenterRemoved(param0: com.telerik.widget.chart.visualization.common.ChartElementPresenter): void;
							public onDown(param0: androidviewMotionEvent): boolean;
							public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public setPanOffset(param0: com.telerik.android.common.math.RadPoint): void;
							public setEmptyContent(param0: javalangObject): void;
							public onSingleTapConfirmed(param0: androidviewMotionEvent): boolean;
							public onPresenterAdded(param0: com.telerik.widget.chart.visualization.common.ChartElementPresenter): void;
							public setZoom(param0: number, param1: number): void;
							public onSingleTapUp(param0: androidviewMotionEvent): boolean;
							public getSelectionPalette(): com.telerik.widget.palettes.ChartPalette;
							public getSeries(): com.telerik.widget.chart.visualization.common.PresenterCollection;
							public isClipToBounds(): boolean;
							public setZoom(param0: com.telerik.android.common.math.RadSize): void;
							public onDoubleTap(param0: androidviewMotionEvent): boolean;
							public constructor(param0: androidcontentContext);
							public getLegendInfos(): com.telerik.android.common.ObservableCollection;
							public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEvent(param0: number): void;
							public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public requestInvalidateArrange(): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class SeriesSelectionMode extends javalangEnum<any> {
							public static SERIES: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static DATA_POINT_SINGLE: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static DATA_POINT_MULTIPLE: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static NONE: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static NOT_SET: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static values(): native.Array<com.telerik.widget.chart.visualization.common.SeriesSelectionMode>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class StackedSeriesContext extends javalangObject {
							public constructor();
							public getPreviousStackedArea(): javautilList<any>;
							public setPreviousStackedArea(param0: javautilList<any>): void;
							public clear(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class StrokedSeries extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.common.StrokedSeries interface with the provided implementation.
							 */
							public constructor(implementation: {
								getStrokeColor(): number;
								getStrokeThickness(): number;
							});
							public getStrokeThickness(): number;
							public getStrokeColor(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class AreaRenderContext extends javalangObject {
							}
						}
					}
				}
			}
		}
	}
}

import androidgraphicsPath = android.graphics.Path;
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Path.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class AreaRendererBase extends com.telerik.widget.chart.visualization.common.renderers.LineRenderer {
								public static FILL_COLOR_PROPERTY_KEY: number;
								public fillPaint: androidgraphicsPaint;
								public dataPointSegmentsIterator: javautilListIterator<any>;
								public currentSegmentNode: com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment;
								public topSurfacePoints: javautilList<any>;
								public hitTest(param0: androidgraphicsPointF, param1: number): boolean;
								public shouldDrawTopStroke(): boolean;
								public preparePaths(): void;
								public bottomPointsForStackedSeries(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext, param1: javautilList<any>): void;
								public constructor();
								public updateContext(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext, param1: javautilList<any>): void;
								public prepareTopDrawingForSegment(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext): void;
								public points(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext, param1: com.telerik.android.common.Function): javautilList<any>;
								public topPoints(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext): javautilList<any>;
								public getFillPaint(): androidgraphicsPaint;
								public setFillPaint(param0: androidgraphicsPaint): void;
								public reset(): void;
								public setFillColor(param0: number): void;
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getFillColor(): number;
								public getPath(): androidgraphicsPath;
								public renderCore(param0: androidgraphicsCanvas): void;
								public bottomPoints(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext): javautilList<any>;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Path.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export abstract class BaseLabelRenderer extends com.telerik.android.common.PropertyManager implements com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer {
								public static LABEL_FILL_COLOR_PROPERTY_KEY: number;
								public static LABEL_STROKE_COLOR_PROPERTY_KEY: number;
								public static LABEL_COLOR_PROPERTY_KEY: number;
								public static PALETTE_FAMILY: string;
								public labelFormat: string;
								public labelMargin: number;
								public labelTextColor: number;
								public labelFillColor: number;
								public labelStrokeColor: number;
								public labelStrokeWidth: number;
								public labelPaddingTop: number;
								public labelPaddingBottom: number;
								public labelPaddingLeft: number;
								public labelPaddingRight: number;
								public fontStyle: number;
								public labelTypeface: androidgraphicsTypeface;
								public labelTextPaint: androidgraphicsPaint;
								public labelFillPaint: androidgraphicsPaint;
								public labelStrokePaint: androidgraphicsPaint;
								public labelToStringConverter: com.telerik.android.common.Function;
								public owner: com.telerik.widget.chart.visualization.common.ChartSeries;
								public getLabelFillPaint(param0: number): androidgraphicsPaint;
								public getLabelSize(): number;
								public getLabelStrokeColor(): number;
								public calculateLabelPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsRect): com.telerik.android.common.math.RadPoint;
								public setLabelFillColor(param0: number): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLabelTextColor(): number;
								public getLabelFormat(): string;
								public getLabelFillColor(): number;
								public getLabelBackgroundBounds(param0: com.telerik.android.common.math.RadPoint, param1: androidgraphicsRect): androidgraphicsRect;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public drawLabelText(param0: androidgraphicsCanvas, param1: string, param2: number, param3: number): void;
								public setLabelStrokeColor(param0: number): void;
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public offsetRight(param0: androidgraphicsRect): number;
								public getLabelFontStyle(): number;
								public setLabelPadding(param0: number, param1: number, param2: number, param3: number): void;
								public drawLabelBackground(param0: androidgraphicsCanvas, param1: androidgraphicsPath, param2: number): void;
								public offsetBottom(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public preventClippingBottom(param0: number, param1: com.telerik.android.common.math.RadRect): number;
								public getLabelMargin(): number;
								public offsetLeft(): number;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public invalidatePalette(): void;
								public constructor();
								public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
								public preventClippingRight(param0: number, param1: com.telerik.android.common.math.RadRect, param2: androidgraphicsRect): number;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public getTextBounds(param0: string, param1: androidgraphicsPaint): androidgraphicsRect;
								public offsetTop(param0: androidgraphicsRect): number;
								public setLabelTextColor(param0: number): void;
								public prepareLabel(param0: androidgraphicsPath, param1: androidgraphicsRect, param2: com.telerik.android.common.math.RadRect): void;
								public isChartZoomedVertically(): boolean;
								public isChartZoomedHorizontally(): boolean;
								public getLabelFont(): androidgraphicsTypeface;
								public preventClippingTop(param0: number, param1: com.telerik.android.common.math.RadRect, param2: androidgraphicsRect): number;
								public setLabelFormat(param0: string): void;
								public preventClippingLeft(param0: number, param1: com.telerik.android.common.math.RadRect): number;
							}
						}
					}
				}
			}
		}
	}
}

import androidtextTextPaint = android.text.TextPaint;
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./android.text.TextPaint.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.axes.AxisLabelModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.CartesianAxis.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class CartesianAxisLabelRenderer extends javalangObject implements com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer {
								public labelPaint: androidtextTextPaint;
								public axis: com.telerik.widget.chart.visualization.common.CartesianAxis;
								public getLabelFontStyle(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public getLabelSize(): number;
								public getLabelMargin(): number;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public renderLabelRotate(param0: androidgraphicsCanvas, param1: com.telerik.android.common.math.RadRect, param2: string, param3: com.telerik.widget.chart.engine.axes.AxisLabelModel): void;
								public setLabelMargin(param0: number): void;
								public setLabelFontStyle(param0: number): void;
								public getLabelTextColor(): number;
								public getLabelFormat(): string;
								public measureLabel(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: javalangObject): com.telerik.android.common.math.RadSize;
								public setLabelTextColor(param0: number): void;
								public renderLabelMultiLine(param0: androidgraphicsCanvas, param1: com.telerik.android.common.math.RadRect, param2: string, param3: com.telerik.widget.chart.engine.axes.AxisLabelModel): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public getLabelFont(): androidgraphicsTypeface;
								public renderLabelNoFitMode(param0: androidgraphicsCanvas, param1: com.telerik.android.common.math.RadRect, param2: string, param3: com.telerik.widget.chart.engine.axes.AxisLabelModel): void;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class ChartLabelRenderer extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer interface with the provided implementation.
								 */
								public constructor(implementation: {
									renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									getLabelTextColor(): number;
									setLabelTextColor(param0: number): void;
									getLabelSize(): number;
									setLabelSize(param0: number): void;
									getLabelFont(): androidgraphicsTypeface;
									setLabelFont(param0: androidgraphicsTypeface): void;
									getLabelFontStyle(): number;
									setLabelFontStyle(param0: number): void;
									getLabelFormat(): string;
									setLabelFormat(param0: string): void;
									getLabelMargin(): number;
									setLabelMargin(param0: number): void;
									getLabelValueToStringConverter(): com.telerik.android.common.Function;
									setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								});
								public getLabelFontStyle(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public getLabelSize(): number;
								public getLabelMargin(): number;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public getLabelTextColor(): number;
								public getLabelFormat(): string;
								public setLabelTextColor(param0: number): void;
								public getLabelFont(): androidgraphicsTypeface;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

import javautilLinkedList = java.util.LinkedList;
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.util.LinkedList.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export abstract class ChartSeriesRenderer extends com.telerik.android.common.PropertyManager {
								public model: com.telerik.widget.chart.engine.series.ChartSeriesModel;
								public preparePaths(): void;
								public dataPointSegments(): javautilLinkedList<any>;
								public reset(): void;
								public render(param0: androidgraphicsCanvas): void;
								public prepare(): void;
								public findPreviousNonEmptyPoint(param0: com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment, param1: javautilListIterator<any>): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public constructor();
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public renderCore(param0: androidgraphicsCanvas): void;
								public findNextNonEmptyPoint(param0: com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment, param1: javautilListIterator<any>): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							}
							export module ChartSeriesRenderer {
								export class DataPointSegment extends javalangObject {
									public dataPoints: javautilList<any>;
									public startIndex: number;
									public constructor(param0: com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer);
								}
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Path.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class LineRenderer extends com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer {
								public static STROKE_COLOR_PROPERTY_KEY: number;
								public static STROKE_THICKNESS_PROPERTY_KEY: number;
								public layoutContext: com.telerik.widget.chart.visualization.common.ChartLayoutContext;
								public indicatorRenderer: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer;
								public linePaint: androidgraphicsPaint;
								public linePath: androidgraphicsPath;
								public strokeColor: number;
								public strokeThickness: number;
								public dashArray: native.Array<number>;
								public setPointIndicatorColor(param0: number): void;
								public prepareDataPointIndicators(param0: javautilList<any>): void;
								public preparePaths(): void;
								public getPointIndicatorStrokeColor(): number;
								public setDataPointIndicatorRenderer(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer): void;
								public setModel(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel): void;
								public getDashArray(): native.Array<number>;
								public getDataPointIndicatorRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer;
								public setStrokeColor(param0: number): void;
								public getStrokeColor(): number;
								public indicateDataPoints(): boolean;
								public setStrokeThickness(param0: number): void;
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public renderCore(param0: androidgraphicsCanvas): void;
								public setPointIndicatorStrokeColor(param0: number): void;
								public hitTest(param0: androidgraphicsPointF, param1: number): boolean;
								public setStrokePaint(param0: androidgraphicsPaint): void;
								public getLinePaint(): androidgraphicsPaint;
								public getStrokeThickness(): number;
								public constructor();
								public getPointIndicatorColor(): number;
								public reset(): void;
								public shouldDrawPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
								public setDashArray(param0: native.Array<number>): void;
								public getPath(): androidgraphicsPath;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Path.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class PointingLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer {
								public pointerLength: number;
								public pointerWidth: number;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
								public getLabelSize(): number;
								public setPointerWidth(param0: number): void;
								public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function;
								public preparePointer(param0: androidgraphicsPath, param1: number, param2: number, param3: boolean): void;
								public getLabelTextColor(): number;
								public getLabelFormat(): string;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getPointerLength(): number;
								public getLabelFontStyle(): number;
								public offsetBottom(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
								public getPointerWidth(): number;
								public getLabelMargin(): number;
								public setLabelFont(param0: androidgraphicsTypeface): void;
								public constructor();
								public setPointerLength(param0: number): void;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public prepareLabel(param0: androidgraphicsPath, param1: androidgraphicsRect, param2: com.telerik.android.common.math.RadRect): void;
								public getLabelFont(): androidgraphicsTypeface;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class ScatterLineRenderer extends com.telerik.widget.chart.visualization.common.renderers.LineRenderer {
								public shouldDrawPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class SplineAreaRenderer extends com.telerik.widget.chart.visualization.common.renderers.AreaRendererBase {
								public topPoints(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext): javautilList<any>;
								public bottomPointsForStackedSeries(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext, param1: javautilList<any>): void;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class SplineHelper extends javalangObject {
								public getSplinePoints(param0: javautilList<any>, param1: com.telerik.android.common.math.RadSize, param2: com.telerik.widget.chart.engine.dataPoints.DataPoint, param3: com.telerik.widget.chart.engine.dataPoints.DataPoint): javautilList<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class SplineRenderer extends com.telerik.widget.chart.visualization.common.renderers.LineRenderer {
								public preparePaths(): void;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class DoughnutSegment extends com.telerik.widget.chart.visualization.pieChart.PieSegment {
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.pieChart.PieSegment.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.pieChart.PieUpdateContext.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class DoughnutSeries extends com.telerik.widget.chart.visualization.pieChart.PieSeries {
							public constructor();
							public setInnerRadiusFactor(param0: number): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getInnerRadiusFactor(): number;
							public createUpdateContext(): com.telerik.widget.chart.visualization.pieChart.PieUpdateContext;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public setupUpdateContext(param0: com.telerik.android.common.math.RadRect): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public onDataBindingComplete(): void;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public createSegment(): com.telerik.widget.chart.visualization.pieChart.PieSegment;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class DoughnutUpdateContext extends com.telerik.widget.chart.visualization.pieChart.PieUpdateContext {
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Path.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.PieDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.pieChart.PieSeries.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class PieSegment extends com.telerik.android.common.PropertyManager {
							public static FILL_COLOR_PROPERTY_KEY: number;
							public static STROKE_COLOR_PROPERTY_KEY: number;
							public static STROKE_THICKNESS_PROPERTY_KEY: number;
							public static ARC_COLOR_PROPERTY_KEY: number;
							public static ARC_THICKNESS_PROPERTY_KEY: number;
							public fillPaint: androidgraphicsPaint;
							public arcPaint: androidgraphicsPaint;
							public strokePaint: androidgraphicsPaint;
							public fillPath: androidgraphicsPath;
							public arcPath: androidgraphicsPath;
							public strokePath: androidgraphicsPath;
							public point: com.telerik.widget.chart.engine.dataPoints.PieDataPoint;
							public series: com.telerik.widget.chart.visualization.pieChart.PieSeries;
							public center: com.telerik.android.common.math.RadPoint;
							public getStrokeThickness(): number;
							public setArcThickness(param0: number): void;
							public getPoint(): com.telerik.widget.chart.engine.dataPoints.PieDataPoint;
							public setPoint(param0: com.telerik.widget.chart.engine.dataPoints.PieDataPoint): void;
							public getArcThickness(): number;
							public setStrokeColor(param0: number): void;
							public setStrokeThickness(param0: number): void;
							public getStrokeColor(): number;
							public hitTest(param0: androidgraphicsPointF): boolean;
							public setArcColor(param0: number): void;
							public setFillColor(param0: number): void;
							public getArcColor(): number;
							public getFillColor(): number;
							public getLocation(): com.telerik.android.common.math.RadPoint;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadSize.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.AngleRange.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.PieDataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBinding.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.DataPointBindingEntry.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ElementCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.ChartSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.series.PieSeriesModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.DataPointInfo.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartLayoutContext.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.pieChart.PieSegment.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.pieChart.PieUpdateContext.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class PieSeries extends com.telerik.widget.chart.visualization.common.ChartSeries {
							public static ARC_STROKE_WIDTH_KEY: string;
							public updateContext: com.telerik.widget.chart.visualization.pieChart.PieUpdateContext;
							public static DEFAULT_SELECTION_OFFSET: number;
							public setLabelFormat(param0: string): void;
							public setSliceOffset(param0: number): void;
							public getLabelFormat(): string;
							public createUpdateContext(): com.telerik.widget.chart.visualization.pieChart.PieUpdateContext;
							public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
							public getDataPointColor(param0: number): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: javalangObject): com.telerik.android.common.math.RadSize;
							public getPointLocation(param0: com.telerik.widget.chart.engine.dataPoints.PieDataPoint): com.telerik.android.common.math.RadPoint;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public onUIUpdated(): void;
							public setSliceStyles(param0: javautilList<any>): void;
							public getLegendTitle(param0: com.telerik.widget.chart.engine.dataPoints.PieDataPoint): string;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: javabeansPropertyChangeEvent): void;
							public getRadiusFactor(): number;
							public findClosestPoint(param0: androidgraphicsPoint): com.telerik.widget.chart.visualization.behaviors.DataPointInfo;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getCollectionIndex(): number;
							public updateLegendItems(): void;
							public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
							public drawCore(param0: androidgraphicsCanvas): void;
							public createSegment(): com.telerik.widget.chart.visualization.pieChart.PieSegment;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public initDataBinding(): void;
							public getSelectedPointOffset(): number;
							public setLabelOffset(param0: number): void;
							public defaultPaletteFamily(): string;
							public onIsVisibleInLegendChanged(param0: boolean): void;
							public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
							public setNameBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
							public invalidatePalette(): void;
							public getSliceStyles(): javautilList<any>;
							public getSliceOffset(): number;
							public getDisplayPercentage(): boolean;
							public setDisplayPercentage(value: boolean): void;
							public setupUpdateContext(param0: com.telerik.android.common.math.RadRect): void;
							public dataPoints(): com.telerik.widget.chart.engine.elementTree.ElementCollection;
							public hitTestDataPoint(param0: androidgraphicsPointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
							public setSelectedPointOffset(param0: number): void;
							public onDataBindingComplete(): void;
							public constructor();
							public setData(param0: javalangIterable<any>): void;
							public model(): com.telerik.widget.chart.engine.series.PieSeriesModel;
							public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getLabelOffset(): number;
							public getAngleRange(): com.telerik.widget.chart.engine.chartAreas.AngleRange;
							public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public model(): com.telerik.widget.chart.engine.series.ChartSeriesModel;
							public getNameBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
							public setRadiusFactor(param0: number): void;
							public hitTestDataPoint(param0: androidgraphicsPointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
							public setAngleRange(param0: com.telerik.widget.chart.engine.chartAreas.AngleRange): void;
							public onDataPointSelectionChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.Typeface.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.dataPoints.DataPoint.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.elementTree.ChartNode.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.ChartSeries.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.pieChart.PieSeries.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class PieSeriesLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer {
							public static RESET_COLOR: number;
							public constructor();
							public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public calculateLabelPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: androidgraphicsRect): com.telerik.android.common.math.RadPoint;
							public setLabelTextColor(param0: number): void;
							public getLabelFontStyle(): number;
							public setLabelFormat(param0: string): void;
							public getLabelFillPaint(param0: number): androidgraphicsPaint;
							public renderLabel(param0: androidgraphicsCanvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
							public getLabelFormat(): string;
							public setLabelFont(param0: androidgraphicsTypeface): void;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public getLabelSize(): number;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function;
							public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
							public getLabelFont(): androidgraphicsTypeface;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public getLabelTextColor(): number;
							public constructor(param0: com.telerik.widget.chart.visualization.pieChart.PieSeries);
							public setLabelSize(param0: number): void;
							public setLabelMargin(param0: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class PieUpdateContext extends javalangObject {
							public constructor();
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.common.ObservableCollection.d.ts" />
/// <reference path="./com.telerik.android.common.math.RadRect.d.ts" />
/// <reference path="./com.telerik.widget.chart.engine.chartAreas.ChartAreaModel.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartBehavior.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class RadPieChartView extends com.telerik.widget.chart.visualization.common.RadChartViewBase {
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
							public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
							public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
							public getZoomWidth(): number;
							public onShowPress(param0: androidviewMotionEvent): void;
							public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
							public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
							public getPanOffsetY(): number;
							public createChartAreaModel(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
							public getZoomHeight(): number;
							public onDown(param0: androidviewMotionEvent): boolean;
							public getPanOffsetX(): number;
							public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
							public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
							public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
							public onSingleTapConfirmed(param0: androidviewMotionEvent): boolean;
							public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
							public onScroll(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
							public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
							public onSingleTapUp(param0: androidviewMotionEvent): boolean;
							public getViewportHeight(): number;
							public getViewportWidth(): number;
							public onDoubleTap(param0: androidviewMotionEvent): boolean;
							public onLongPress(param0: androidviewMotionEvent): void;
							public constructor(param0: androidcontentContext);
							public getLegendInfos(): com.telerik.android.common.ObservableCollection;
							public validateBehaviourSupport(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEvent(param0: number): void;
							public onDoubleTapEvent(param0: androidviewMotionEvent): boolean;
							public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class SliceStyle extends javalangObject {
							public constructor();
							public getStrokeWidth(): number;
							public setArcColor(param0: number): void;
							public getArcWidth(): number;
							public setFillColor(param0: number): void;
							public setStrokeColor(param0: number): void;
							public getArcColor(): number;
							public setStrokeWidth(param0: number): void;
							public setArcWidth(param0: number): void;
							public getFillColor(): number;
							public getStrokeColor(): number;
						}
					}
				}
			}
		}
	}
}

import orgjsonJSONObject = org.json.JSONObject;
import orgjsonJSONArray = org.json.JSONArray;
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyMetadata.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.CommitMode.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.ValidationMode.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./org.json.JSONArray.d.ts" />
/// <reference path="./org.json.JSONObject.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class DataFormMetadata extends javalangObject {
						public putMetadataForProperty(param0: string, param1: com.telerik.widget.dataform.engine.EntityPropertyMetadata): void;
						public constructor();
						public constructor(param0: orgjsonJSONObject);
						public constructor(param0: orgjsonJSONArray);
						public setIsReadOnly(param0: boolean): void;
						public setValidationMode(param0: com.telerik.widget.dataform.visualization.core.ValidationMode): void;
						public getMetadataForProperty(param0: string): com.telerik.widget.dataform.engine.EntityPropertyMetadata;
						public isReadOnly(): boolean;
						public getCommitMode(): com.telerik.widget.dataform.visualization.core.CommitMode;
						public setCommitMode(param0: com.telerik.widget.dataform.visualization.core.CommitMode): void;
						public getValidationMode(): com.telerik.widget.dataform.visualization.core.ValidationMode;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyViewer.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EditorSetupListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.EditorSetupListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onEditorSetupStarted(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyViewer): void;
							onEditorSetupFinished(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyViewer): void;
						});
						public onEditorSetupStarted(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyViewer): void;
						public onEditorSetupFinished(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyViewer): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EmptyConverter extends javalangObject implements com.telerik.widget.dataform.engine.PropertyConverter {
						public constructor();
						public convertTo(param0: javalangObject): javalangObject;
						public convertFrom(param0: javalangObject): javalangObject;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EmptyValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getPositiveMessage(): string;
						public constructor();
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class Entity extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.Entity interface with the provided implementation.
						 */
						public constructor(implementation: {
							setProperty(param0: com.telerik.widget.dataform.engine.EntityProperty, param1: javalangObject): void;
							getProperty(param0: com.telerik.widget.dataform.engine.EntityProperty): javalangObject;
							properties(): javalangIterable<any>;
							getSourceObject(): javalangObject;
							addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
							removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
							notifyCommitListenersBefore(param0: com.telerik.widget.dataform.engine.EntityProperty): boolean;
							notifyCommitListenersAfter(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						});
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public getProperty(param0: com.telerik.widget.dataform.engine.EntityProperty): javalangObject;
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public setProperty(param0: com.telerik.widget.dataform.engine.EntityProperty, param1: javalangObject): void;
						public notifyCommitListenersAfter(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						public properties(): javalangIterable<any>;
						public getSourceObject(): javalangObject;
						public notifyCommitListenersBefore(param0: com.telerik.widget.dataform.engine.EntityProperty): boolean;
					}
				}
			}
		}
	}
}

import javautilLinkedHashMap = java.util.LinkedHashMap;
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
/// <reference path="./java.util.LinkedHashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityBase extends com.telerik.widget.dataform.engine.EntityCore {
						public sourceObject: javalangObject;
						public reflectionCache: javautilHashMap<any, any>;
						public constructor(param0: javalangObject);
						public constructor();
						public getProperty(param0: com.telerik.widget.dataform.engine.EntityProperty): javalangObject;
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public setProperty(param0: com.telerik.widget.dataform.engine.EntityProperty, param1: javalangObject): void;
						public notifyCommitListenersAfter(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						public properties(): javalangIterable<any>;
						public getSourceObject(): javalangObject;
						public notifyCommitListenersBefore(param0: com.telerik.widget.dataform.engine.EntityProperty): boolean;
						public initializePropertyMap(): void;
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public createProperty(param0: string, param1: javalangObject): com.telerik.widget.dataform.engine.EntityProperty;
						public resolveCoreProperties(param0: javalangClass<any>): javautilLinkedHashMap<any, any>;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export abstract class EntityCore extends javalangObject implements com.telerik.widget.dataform.engine.Entity {
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public constructor();
						public getProperty(param0: com.telerik.widget.dataform.engine.EntityProperty): javalangObject;
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public setProperty(param0: com.telerik.widget.dataform.engine.EntityProperty, param1: javalangObject): void;
						public notifyCommitListenersAfter(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						public properties(): javalangIterable<any>;
						public getSourceObject(): javalangObject;
						public notifyCommitListenersBefore(param0: com.telerik.widget.dataform.engine.EntityProperty): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityProperties extends javalangObject {
						public setPropertyMode(param0: com.telerik.widget.dataform.engine.EntityProperties.PropertyResolutionMode): void;
						public constructor();
						public getPropertyMode(): com.telerik.widget.dataform.engine.EntityProperties.PropertyResolutionMode;
					}
					export module EntityProperties {
						export class PropertyResolutionMode extends javalangEnum<any> {
							public static All: com.telerik.widget.dataform.engine.EntityProperties.PropertyResolutionMode;
							public static Getters: com.telerik.widget.dataform.engine.EntityProperties.PropertyResolutionMode;
							public static values(): native.Array<com.telerik.widget.dataform.engine.EntityProperties.PropertyResolutionMode>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static valueOf(param0: string): com.telerik.widget.dataform.engine.EntityProperties.PropertyResolutionMode;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.Entity.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyChangedListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyMetadata.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyConverter.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyValidator.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityProperty extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.EntityProperty interface with the provided implementation.
						 */
						public constructor(implementation: {
							setCustomMetadata(param0: javalangObject): void;
							getCustomMetadata(): javalangObject;
							setReadOnly(param0: boolean): void;
							getReadOnly(): boolean;
							getEditorLayoutId(): number;
							setEditorLayoutId(param0: number): void;
							getCoreEditorLayoutId(): number;
							setCoreEditorLayoutId(param0: number): void;
							getHeaderLayoutId(): number;
							setHeaderLayoutId(param0: number): void;
							getValidationLayoutId(): number;
							setValidationLayoutId(param0: number): void;
							getEnumConstants(): native.Array<javalangObject>;
							isTypePrimitive(): boolean;
							readMetadata(param0: com.telerik.widget.dataform.engine.EntityPropertyMetadata): void;
							getViewerType(): javalangClass<any>;
							setViewerType(param0: javalangClass<any>): void;
							getEditorType(): javalangClass<any>;
							setEditorType(param0: javalangClass<any>): void;
							getEditorParams(): javautilHashMap<any, any>;
							setEditorParams(param0: javautilHashMap<any, any>): void;
							isValid(): boolean;
							updateValues(param0: native.Array<javalangObject>): void;
							getSkip(): boolean;
							setSkip(param0: boolean): void;
							setColumnPosition(param0: number): void;
							getColumnPosition(): number;
							getColumnSpan(): number;
							setColumnSpan(param0: number): void;
							getPosition(): number;
							setPosition(param0: number): void;
							getHeader(): string;
							setHeader(param0: string): void;
							getImageResource(): number;
							setImageResource(param0: number): void;
							getGroupName(): string;
							setGroupName(param0: string): void;
							getHintText(): string;
							setHintText(param0: string): void;
							getRequired(): boolean;
							setRequired(param0: boolean): void;
							addOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
							removeOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
							addValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
							onValidationStarted(): void;
							onValidationResult(value: javalangObject, result: boolean, message: string): void;
							removeValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
							addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
							removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
							type(): javalangClass<any>;
							name(): string;
							getValueCandidate(): javalangObject;
							setValueCandidate(param0: javalangObject): void;
							getOwner(): com.telerik.widget.dataform.engine.Entity;
							getValue(): javalangObject;
							commit(): void;
							tryCommit(param0: javalangObject): void;
							setConverter(param0: com.telerik.widget.dataform.engine.PropertyConverter): void;
							getConverter(): com.telerik.widget.dataform.engine.PropertyConverter;
							setValidator(param0: com.telerik.widget.dataform.engine.PropertyValidator): void;
							getValidator(): com.telerik.widget.dataform.engine.PropertyValidator;
							validate(param0: javalangObject): void;
						});
						public setEditorLayoutId(param0: number): void;
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public getRequired(): boolean;
						public getViewerType(): javalangClass<any>;
						public getCoreEditorLayoutId(): number;
						public setValueCandidate(param0: javalangObject): void;
						public getEditorParams(): javautilHashMap<any, any>;
						public isValid(): boolean;
						public updateValues(param0: native.Array<javalangObject>): void;
						public getValue(): javalangObject;
						public setSkip(param0: boolean): void;
						public getValidator(): com.telerik.widget.dataform.engine.PropertyValidator;
						public setEditorType(param0: javalangClass<any>): void;
						public addOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
						public getReadOnly(): boolean;
						public getPosition(): number;
						public setGroupName(param0: string): void;
						public addValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public onValidationStarted(): void;
						public onValidationResult(value: javalangObject, result: boolean, message: string): void;
						public setValidator(param0: com.telerik.widget.dataform.engine.PropertyValidator): void;
						public getHeader(): string;
						public isTypePrimitive(): boolean;
						public setPosition(param0: number): void;
						public setHeader(param0: string): void;
						public setViewerType(param0: javalangClass<any>): void;
						public setCustomMetadata(param0: javalangObject): void;
						public removeValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public getImageResource(): number;
						public readMetadata(param0: com.telerik.widget.dataform.engine.EntityPropertyMetadata): void;
						public getEditorLayoutId(): number;
						public name(): string;
						public getGroupName(): string;
						public type(): javalangClass<any>;
						public setValidationLayoutId(param0: number): void;
						public setCoreEditorLayoutId(param0: number): void;
						public getEnumConstants(): native.Array<javalangObject>;
						public setEditorParams(param0: javautilHashMap<any, any>): void;
						public setImageResource(param0: number): void;
						public getConverter(): com.telerik.widget.dataform.engine.PropertyConverter;
						public setReadOnly(param0: boolean): void;
						public getValidationLayoutId(): number;
						public getEditorType(): javalangClass<any>;
						public getColumnSpan(): number;
						public setColumnPosition(param0: number): void;
						public validate(param0: javalangObject): void;
						public getColumnPosition(): number;
						public commit(): void;
						public setRequired(param0: boolean): void;
						public getValueCandidate(): javalangObject;
						public setColumnSpan(param0: number): void;
						public setConverter(param0: com.telerik.widget.dataform.engine.PropertyConverter): void;
						public tryCommit(param0: javalangObject): void;
						public setHeaderLayoutId(param0: number): void;
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public getHeaderLayoutId(): number;
						public getCustomMetadata(): javalangObject;
						public setHintText(param0: string): void;
						public getSkip(): boolean;
						public getOwner(): com.telerik.widget.dataform.engine.Entity;
						public getHintText(): string;
						public removeOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.Entity.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyChangedListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyMetadata.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyConverter.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyValidator.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.annotations.DataFormProperty.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.lang.reflect.Method.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityPropertyBase extends com.telerik.widget.dataform.engine.EntityPropertyCore {
						public readMetadata(param0: string, param1: com.telerik.widget.dataform.engine.Entity): void;
						public setEditorLayoutId(param0: number): void;
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public getRequired(): boolean;
						public onPropertyChanged(param0: string, param1: javalangObject): void;
						public getViewerType(): javalangClass<any>;
						public getCoreEditorLayoutId(): number;
						public setValueCandidate(param0: javalangObject): void;
						public getEditorParams(): javautilHashMap<any, any>;
						public getValue(): javalangObject;
						public setSkip(param0: boolean): void;
						public getValidator(): com.telerik.widget.dataform.engine.PropertyValidator;
						public setEditorType(param0: javalangClass<any>): void;
						public addOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
						public getReadOnly(): boolean;
						public getPosition(): number;
						public setGroupName(param0: string): void;
						public findMetadata(param0: javalangreflectMethod): com.telerik.widget.dataform.visualization.annotations.DataFormProperty;
						public addValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public setValidator(param0: com.telerik.widget.dataform.engine.PropertyValidator): void;
						public getHeader(): string;
						public onValidationStarted(): void;
						public onValidationResult(value: javalangObject, result: boolean, message: string): void;
						public isTypePrimitive(): boolean;
						public setPosition(param0: number): void;
						public setHeader(param0: string): void;
						public setViewerType(param0: javalangClass<any>): void;
						public setCustomMetadata(param0: javalangObject): void;
						public removeValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public getImageResource(): number;
						public readMetadata(param0: com.telerik.widget.dataform.engine.EntityPropertyMetadata): void;
						public getEditorLayoutId(): number;
						public name(): string;
						public getGroupName(): string;
						public type(): javalangClass<any>;
						public setValidationLayoutId(param0: number): void;
						public setCoreEditorLayoutId(param0: number): void;
						public getEnumConstants(): native.Array<javalangObject>;
						public setEditorParams(param0: javautilHashMap<any, any>): void;
						public setImageResource(param0: number): void;
						public getConverter(): com.telerik.widget.dataform.engine.PropertyConverter;
						public setReadOnly(param0: boolean): void;
						public getValidationLayoutId(): number;
						public getEditorType(): javalangClass<any>;
						public getColumnSpan(): number;
						public setColumnPosition(param0: number): void;
						public validate(param0: javalangObject): void;
						public getColumnPosition(): number;
						public commit(): void;
						public setRequired(param0: boolean): void;
						public getValueCandidate(): javalangObject;
						public constructor(param0: string, param1: javalangClass<any>, param2: com.telerik.widget.dataform.engine.Entity);
						public setColumnSpan(param0: number): void;
						public setConverter(param0: com.telerik.widget.dataform.engine.PropertyConverter): void;
						public tryCommit(param0: javalangObject): void;
						public setHeaderLayoutId(param0: number): void;
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public getHeaderLayoutId(): number;
						public getCustomMetadata(): javalangObject;
						public findMethod(param0: string, param1: string, param2: javalangClass<any>): javalangreflectMethod;
						public setHintText(param0: string): void;
						public getSkip(): boolean;
						public getOwner(): com.telerik.widget.dataform.engine.Entity;
						public getHintText(): string;
						public removeOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityPropertyChangedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.EntityPropertyChangedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onChanged(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						});
						public onChanged(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityPropertyCommitListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.EntityPropertyCommitListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onBeforeCommit(param0: com.telerik.widget.dataform.engine.EntityProperty): boolean;
							onAfterCommit(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						});
						public onBeforeCommit(param0: com.telerik.widget.dataform.engine.EntityProperty): boolean;
						public onAfterCommit(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityPropertyValidationListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.EntityPropertyCommitListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onValidate(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
							onDidValidate(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						});
						public onValidate(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						public onDidValidate(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.Entity.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyChangedListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyMetadata.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyConverter.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyValidator.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.annotations.DataFormProperty.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.lang.reflect.Method.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export abstract class EntityPropertyCore extends javalangObject implements com.telerik.widget.dataform.engine.EntityProperty, com.telerik.widget.dataform.engine.PropertyChangedListener {
						public readMetadata(param0: string, param1: com.telerik.widget.dataform.engine.Entity): void;
						public setEditorLayoutId(param0: number): void;
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public getRequired(): boolean;
						public onPropertyChanged(param0: string, param1: javalangObject): void;
						public getViewerType(): javalangClass<any>;
						public getCoreEditorLayoutId(): number;
						public setValueCandidate(param0: javalangObject): void;
						public getEditorParams(): javautilHashMap<any, any>;
						public getValue(): javalangObject;
						public setSkip(param0: boolean): void;
						public notifyCommitListenersAfter(): void;
						public getValidator(): com.telerik.widget.dataform.engine.PropertyValidator;
						public setEditorType(param0: javalangClass<any>): void;
						public addOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
						public getReadOnly(): boolean;
						public getPosition(): number;
						public setGroupName(param0: string): void;
						public findMetadata(param0: javalangreflectMethod): com.telerik.widget.dataform.visualization.annotations.DataFormProperty;
						public updateValues(param0: native.Array<javalangObject>): void;
						public addValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public setValidator(param0: com.telerik.widget.dataform.engine.PropertyValidator): void;
						public getHeader(): string;
						public onValidationStarted(): void;
						public onValidationResult(value: javalangObject, result: boolean, message: string): void;
						public isTypePrimitive(): boolean;
						public notifyCommitListenersBefore(): boolean;
						public setPosition(param0: number): void;
						public setHeader(param0: string): void;
						public setViewerType(param0: javalangClass<any>): void;
						public setCustomMetadata(param0: javalangObject): void;
						public removeValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public getImageResource(): number;
						public readMetadata(param0: com.telerik.widget.dataform.engine.EntityPropertyMetadata): void;
						public getEditorLayoutId(): number;
						public name(): string;
						public getGroupName(): string;
						public type(): javalangClass<any>;
						public setValidationLayoutId(param0: number): void;
						public getEnumConstants(): native.Array<javalangObject>;
						public setCoreEditorLayoutId(param0: number): void;
						public setEditorParams(param0: javautilHashMap<any, any>): void;
						public setImageResource(param0: number): void;
						public getConverter(): com.telerik.widget.dataform.engine.PropertyConverter;
						public setReadOnly(param0: boolean): void;
						public getValidationLayoutId(): number;
						public getEditorType(): javalangClass<any>;
						public getColumnSpan(): number;
						public setColumnPosition(param0: number): void;
						public validate(param0: javalangObject): void;
						public getColumnPosition(): number;
						public commit(): void;
						public setRequired(param0: boolean): void;
						public getValueCandidate(): javalangObject;
						public constructor(param0: string, param1: javalangClass<any>, param2: com.telerik.widget.dataform.engine.Entity);
						public setColumnSpan(param0: number): void;
						public setConverter(param0: com.telerik.widget.dataform.engine.PropertyConverter): void;
						public tryCommit(param0: javalangObject): void;
						public setHeaderLayoutId(param0: number): void;
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public notifyValidationListeners(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public getHeaderLayoutId(): number;
						public getCustomMetadata(): javalangObject;
						public findMethod(param0: string, param1: string, param2: javalangClass<any>): javalangreflectMethod;
						public setHintText(param0: string): void;
						public getSkip(): boolean;
						public notifyChangedListeners(): void;
						public headerFormat(param0: string): string;
						public getOwner(): com.telerik.widget.dataform.engine.Entity;
						public getHintText(): string;
						public removeOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityPropertyEditorChangeListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.EntityPropertyEditorChangeListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onEditorChanged(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor): void;
						});
						public onEditorChanged(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Procedure2.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityPropertyEditorDependency extends javalangObject implements com.telerik.widget.dataform.engine.EntityPropertyEditorChangeListener {
						public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: string, param2: com.telerik.android.common.Procedure2, param3: native.Array<string>);
						public unload(): void;
						public onEditorChanged(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor): void;
						public load(): void;
						public update(): void;
						public editorName(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.PropertyConverter.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyValidator.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.annotations.DataFormProperty.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class EntityPropertyMetadata extends javalangObject {
						public setCustomMetadata(param0: javalangObject): void;
						public constructor(param0: com.telerik.widget.dataform.visualization.annotations.DataFormProperty);
						public setEditorLayoutId(param0: number): void;
						public getImageResource(): number;
						public setValues(param0: javautilArrayList<any>): void;
						public getEditorLayoutId(): number;
						public getRequired(): boolean;
						public getGroupName(): string;
						public setValidationLayoutId(param0: number): void;
						public getViewerType(): javalangClass<any>;
						public getValidatorParams(): javautilHashMap<any, any>;
						public setCoreEditorLayoutId(param0: number): void;
						public setEditorParams(param0: javautilHashMap<any, any>): void;
						public getCoreEditorLayoutId(): number;
						public setImageResource(param0: number): void;
						public getConverter(): com.telerik.widget.dataform.engine.PropertyConverter;
						public setReadOnly(param0: boolean): void;
						public getEditorParams(): javautilHashMap<any, any>;
						public getValidationLayoutId(): number;
						public getEditorType(): javalangClass<any>;
						public getColumnSpan(): number;
						public setSkip(param0: boolean): void;
						public setColumnPosition(param0: number): void;
						public getValidator(): com.telerik.widget.dataform.engine.PropertyValidator;
						public constructor();
						public setEditorType(param0: javalangClass<any>): void;
						public getColumnPosition(): number;
						public getReadOnly(): boolean;
						public getPosition(): number;
						public setGroupName(param0: string): void;
						public setRequired(param0: boolean): void;
						public setColumnSpan(param0: number): void;
						public setConverter(param0: com.telerik.widget.dataform.engine.PropertyConverter): void;
						public setValidatorParams(param0: javautilHashMap<any, any>): void;
						public setHeaderLayoutId(param0: number): void;
						public getValues(): javautilArrayList<any>;
						public setValidator(param0: com.telerik.widget.dataform.engine.PropertyValidator): void;
						public getHeaderLayoutId(): number;
						public getHeader(): string;
						public getCustomMetadata(): javalangObject;
						public setHintText(param0: string): void;
						public getSkip(): boolean;
						public setPosition(param0: number): void;
						public setHeader(param0: string): void;
						public setViewerType(param0: javalangClass<any>): void;
						public getHintText(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./org.json.JSONObject.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class JsonEntity extends com.telerik.widget.dataform.engine.EntityCore {
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public constructor();
						public getProperty(param0: com.telerik.widget.dataform.engine.EntityProperty): javalangObject;
						public constructor(param0: orgjsonJSONObject);
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public setProperty(param0: com.telerik.widget.dataform.engine.EntityProperty, param1: javalangObject): void;
						public notifyCommitListenersAfter(param0: com.telerik.widget.dataform.engine.EntityProperty): void;
						public getSourceObject(): javalangObject;
						public properties(): javalangIterable<any>;
						public notifyCommitListenersBefore(param0: com.telerik.widget.dataform.engine.EntityProperty): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.Entity.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyChangedListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyMetadata.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyConverter.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyValidator.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class JsonEntityProperty extends com.telerik.widget.dataform.engine.EntityPropertyCore {
						public setEditorLayoutId(param0: number): void;
						public readMetadata(param0: string, param1: com.telerik.widget.dataform.engine.Entity): void;
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public getRequired(): boolean;
						public onPropertyChanged(param0: string, param1: javalangObject): void;
						public getViewerType(): javalangClass<any>;
						public setValueCandidate(param0: javalangObject): void;
						public getCoreEditorLayoutId(): number;
						public getEditorParams(): javautilHashMap<any, any>;
						public getValue(): javalangObject;
						public setSkip(param0: boolean): void;
						public getValidator(): com.telerik.widget.dataform.engine.PropertyValidator;
						public setEditorType(param0: javalangClass<any>): void;
						public addOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
						public getReadOnly(): boolean;
						public getPosition(): number;
						public setGroupName(param0: string): void;
						public addValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public setValidator(param0: com.telerik.widget.dataform.engine.PropertyValidator): void;
						public getHeader(): string;
						public onValidationStarted(): void;
						public onValidationResult(value: javalangObject, result: boolean, message: string): void;
						public isTypePrimitive(): boolean;
						public setPosition(param0: number): void;
						public setHeader(param0: string): void;
						public setViewerType(param0: javalangClass<any>): void;
						public setCustomMetadata(param0: javalangObject): void;
						public removeValidationCompletedListener(param0: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public getImageResource(): number;
						public readMetadata(param0: com.telerik.widget.dataform.engine.EntityPropertyMetadata): void;
						public getEditorLayoutId(): number;
						public name(): string;
						public getGroupName(): string;
						public type(): javalangClass<any>;
						public setValidationLayoutId(param0: number): void;
						public setCoreEditorLayoutId(param0: number): void;
						public getEnumConstants(): native.Array<javalangObject>;
						public setEditorParams(param0: javautilHashMap<any, any>): void;
						public setImageResource(param0: number): void;
						public getConverter(): com.telerik.widget.dataform.engine.PropertyConverter;
						public setReadOnly(param0: boolean): void;
						public getValidationLayoutId(): number;
						public getEditorType(): javalangClass<any>;
						public getColumnSpan(): number;
						public setColumnPosition(param0: number): void;
						public validate(param0: javalangObject): void;
						public getColumnPosition(): number;
						public commit(): void;
						public setRequired(param0: boolean): void;
						public getValueCandidate(): javalangObject;
						public constructor(param0: string, param1: javalangClass<any>, param2: com.telerik.widget.dataform.engine.Entity);
						public setColumnSpan(param0: number): void;
						public setConverter(param0: com.telerik.widget.dataform.engine.PropertyConverter): void;
						public tryCommit(param0: javalangObject): void;
						public setHeaderLayoutId(param0: number): void;
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public getHeaderLayoutId(): number;
						public getCustomMetadata(): javalangObject;
						public setHintText(param0: string): void;
						public getSkip(): boolean;
						public headerFormat(param0: string): string;
						public getOwner(): com.telerik.widget.dataform.engine.Entity;
						public getHintText(): string;
						public removeOnChangedListener(param0: com.telerik.widget.dataform.engine.EntityPropertyChangedListener): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class LabelPosition extends javalangEnum<any> {
						public static TOP: com.telerik.widget.dataform.engine.LabelPosition;
						public static LEFT: com.telerik.widget.dataform.engine.LabelPosition;
						public static valueOf(param0: string): com.telerik.widget.dataform.engine.LabelPosition;
						public static values(): native.Array<com.telerik.widget.dataform.engine.LabelPosition>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class PropertyValidatorManual extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public constructor();
						public getPositiveMessage(): string;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
						public setNegativeMessage(param0: string): void;
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setValidationProvider(param0: com.telerik.widget.dataform.engine.PropertyValidatorManual.ValidationProvider): void;
						public getValidationProvider(): com.telerik.widget.dataform.engine.PropertyValidatorManual.ValidationProvider;
					}
					export module PropertyValidatorManual {
						export class ValidationProvider extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.dataform.engine.PropertyValidatorManual$ValidationProvider interface with the provided implementation.
							 */
							public constructor(implementation: {
								validate(param0: javalangObject, param1: string): boolean;
							});
							public validate(param0: javalangObject, param1: string): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class MailValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getPositiveMessage(): string;
						public constructor();
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class MaximumLengthValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getPositiveMessage(): string;
						public constructor();
						public applyParams(param0: javautilHashMap<any, any>): void;
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public setMaximumLength(param0: number): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public getMaximumLength(): number;
						public setNegativeMessage(param0: string): void;
						public getNegativeMessage(): string;
						public setPositiveMessage(param0: string): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class MinimumLengthValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getMinimumLength(): number;
						public getPositiveMessage(): string;
						public constructor();
						public setMinimumLength(param0: number): void;
						public applyParams(param0: javautilHashMap<any, any>): void;
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public getNegativeMessage(): string;
						public setPositiveMessage(param0: string): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class NonEmptyValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getPositiveMessage(): string;
						public constructor();
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.PropertyChangedListener.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class NotifyPropertyChanged extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.NotifyPropertyChanged interface with the provided implementation.
						 */
						public constructor(implementation: {
							addPropertyChangedListener(param0: com.telerik.widget.dataform.engine.PropertyChangedListener): void;
							removePropertyChangedListener(param0: com.telerik.widget.dataform.engine.PropertyChangedListener): void;
						});
						public removePropertyChangedListener(param0: com.telerik.widget.dataform.engine.PropertyChangedListener): void;
						public addPropertyChangedListener(param0: com.telerik.widget.dataform.engine.PropertyChangedListener): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.PropertyChangedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class NotifyPropertyChangedBase extends javalangObject implements com.telerik.widget.dataform.engine.NotifyPropertyChanged {
						public constructor();
						public notifyListeners(param0: string, param1: javalangObject): void;
						public removePropertyChangedListener(param0: com.telerik.widget.dataform.engine.PropertyChangedListener): void;
						public addPropertyChangedListener(param0: com.telerik.widget.dataform.engine.PropertyChangedListener): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class PhoneValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getPositiveMessage(): string;
						public constructor();
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class RegExValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getPositiveMessage(): string;
						public getRegEx(): string;
						public setRegEx(param0: string): void;
						public constructor();
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class IsTrueValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getPositiveMessage(): string;
						public constructor();
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class PropertyChangedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.PropertyChangedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onPropertyChanged(param0: string, param1: javalangObject): void;
						});
						public onPropertyChanged(param0: string, param1: javalangObject): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class PropertyConverter extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.PropertyConverter interface with the provided implementation.
						 */
						public constructor(implementation: {
							convertTo(param0: javalangObject): javalangObject;
							convertFrom(param0: javalangObject): javalangObject;
						});
						public convertTo(param0: javalangObject): javalangObject;
						public convertFrom(param0: javalangObject): javalangObject;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class PropertyValidator extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.PropertyValidator interface with the provided implementation.
						 */
						public constructor(implementation: {
							validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
							getPositiveMessage(): string;
							setPositiveMessage(param0: string): void;
							getNegativeMessage(): string;
							setNegativeMessage(param0: string): void;
						});
						public getPositiveMessage(): string;
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public setNegativeMessage(param0: string): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export abstract class PropertyValidatorBase extends javalangObject implements com.telerik.widget.dataform.engine.PropertyValidator {
						public getPositiveMessage(): string;
						public constructor();
						public applyParams(param0: javautilHashMap<any, any>): void;
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.PropertyValidatorBase.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class PropertyValidatorSet extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public remove(param0: com.telerik.widget.dataform.engine.PropertyValidatorBase): void;
						public getPositiveMessage(): string;
						public constructor();
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validators(): javautilArrayList<any>;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public clear(): void;
						public setNegativeMessage(param0: string): void;
						public add(param0: com.telerik.widget.dataform.engine.PropertyValidatorBase): void;
						public setPositiveMessage(param0: string): void;
						public getNegativeMessage(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationCompletedListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class RangeValidator extends com.telerik.widget.dataform.engine.PropertyValidatorBase {
						public getPositiveMessage(): string;
						public constructor();
						public applyParams(param0: javautilHashMap<any, any>): void;
						public setMin(param0: number): void;
						public setMax(param0: number): void;
						public getMin(): number;
						public getNegativeMessage(): string;
						public setPositiveMessage(param0: string): void;
						public validate(param0: javalangObject, param1: string, param2: com.telerik.widget.dataform.engine.ValidationCompletedListener): void;
						public validateCore(param0: javalangObject, param1: string): boolean;
						public setNegativeMessage(param0: string): void;
						public constructor(param0: number, param1: number);
						public getMax(): number;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class StringToDateConverter extends com.telerik.widget.dataform.engine.StringToLongConverter {
						public constructor();
						public convertFrom(param0: javalangObject): javalangObject;
						public convertTo(param0: javalangObject): javalangObject;
					}
				}
			}
		}
	}
}

import javatextSimpleDateFormat = java.text.SimpleDateFormat;
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.text.SimpleDateFormat.d.ts" />
/// <reference path="./java.util.Locale.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export abstract class StringToLongConverter extends javalangObject implements com.telerik.widget.dataform.engine.PropertyConverter {
						public constructor();
						public getTemplate(): string;
						public setTemplate(param0: string): void;
						public format(): javatextSimpleDateFormat;
						public convertFrom(param0: javalangObject): javalangObject;
						public convertTo(param0: javalangObject): javalangObject;
						public getLocale(): javautilLocale;
						public setLocale(param0: javautilLocale): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class StringToTimeConverter extends com.telerik.widget.dataform.engine.StringToLongConverter {
						public constructor();
						public convertFrom(param0: javalangObject): javalangObject;
						public convertTo(param0: javalangObject): javalangObject;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class ValidationCompletedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.dataform.engine.ValidationCompletedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
						});
						public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module engine {
					export class ValidationInfo extends javalangObject {
						public message(): string;
						public editorValue(): javalangObject;
						public propertyName(): string;
						public constructor(param0: boolean, param1: string, param2: string, param3: javalangObject);
						public isValid(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.Entity.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.registries.EditorRegistry.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class DataFormEntityAdapter extends javalangObject {
						public setEditorProvider(param0: com.telerik.android.common.Function): void;
						public getViewersForEntity(param0: com.telerik.widget.dataform.engine.Entity): javalangIterable<any>;
						public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm);
						public getEditorsForEntity(param0: com.telerik.widget.dataform.engine.Entity): javalangIterable<any>;
						public setViewerProvider(param0: com.telerik.android.common.Function): void;
						public getEditorRegistry(): com.telerik.widget.dataform.visualization.registries.EditorRegistry;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.android.common.Function2.d.ts" />
/// <reference path="./com.telerik.android.common.Procedure.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.EditorGroup.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class DataFormGroupLayoutManager extends com.telerik.widget.dataform.visualization.DataFormLayoutManager {
						public constructor(param0: androidcontentContext, param1: number);
						public arrangeEditorsCore(param0: javalangIterable<any>, param1: androidviewViewGroup): void;
						public createEditorGroup(param0: string): com.telerik.widget.dataform.visualization.EditorGroup;
						public groupEditors(param0: javalangIterable<any>): javautilList<any>;
						public getEditorGroupCustomizations(): com.telerik.android.common.Procedure;
						public applyEditorGroupCustomizations(): void;
						public setCreateGroup(param0: com.telerik.android.common.Function2): void;
						public setEditorGroupCustomizations(param0: com.telerik.android.common.Procedure): void;
						public getCreateGroup(): com.telerik.android.common.Function2;
						public editorGroups(): javautilList<any>;
						public constructor(param0: androidcontentContext);
						public getSortGroups(): com.telerik.android.common.Procedure;
						public setSortGroups(param0: com.telerik.android.common.Procedure): void;
						public arrangeGroups(param0: javautilCollection<any>, param1: androidviewViewGroup): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export abstract class DataFormLayoutManager extends javalangObject {
						public context: androidcontentContext;
						public arrangeEditors(param0: javalangIterable<any>): androidviewViewGroup;
						public unload(): void;
						public constructor(param0: androidcontentContext, param1: number);
						public arrangeEditorsCore(param0: javalangIterable<any>, param1: androidviewViewGroup): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class DataFormLinearLayoutManager extends com.telerik.widget.dataform.visualization.DataFormLayoutManager {
						public constructor(param0: androidcontentContext, param1: number);
						public arrangeEditorsCore(param0: javalangIterable<any>, param1: androidviewViewGroup): void;
						public constructor(param0: androidcontentContext);
						public setOrientation(param0: number): void;
						public getOrientation(): number;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class DataFormPlaceholderLayoutManager extends com.telerik.widget.dataform.visualization.DataFormLayoutManager {
						public findPlaceHolder(param0: javalangObject, param1: androidviewViewGroup): androidviewViewGroup;
						public constructor(param0: androidcontentContext, param1: number);
						public arrangeEditorsCore(param0: javalangIterable<any>, param1: androidviewViewGroup): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class DataFormPositiveValidationViewBehavior extends com.telerik.widget.dataform.visualization.DataFormValidationViewBehavior {
						public validDrawable: androidgraphicsdrawableDrawable;
						public validBackgroundDrawable: androidgraphicsdrawableDrawable;
						public validTextColor: number;
						public setValidBackgroundDrawable(param0: number): void;
						public hideNegativeFeedback(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public showPositiveFeedback(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public getValidDrawable(): androidgraphicsdrawableDrawable;
						public setValidTextColor(param0: number): void;
						public setValidDrawable(param0: number): void;
						public setValidBackgroundDrawable(param0: androidgraphicsdrawableDrawable): void;
						public setValidDrawable(param0: androidgraphicsdrawableDrawable): void;
						public onValidationEvent(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor, param1: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public getValidBackgroundDrawable(): androidgraphicsdrawableDrawable;
						public hideNegativeFeedback(): void;
						public updateViewBackground(param0: androidviewView, param1: boolean): void;
						public constructor(param0: androidcontentContext);
						public getValidTextColor(): number;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./java.lang.Iterable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class DataFormTableLayoutManager extends com.telerik.widget.dataform.visualization.DataFormLayoutManager {
						public unload(): void;
						public constructor(param0: androidcontentContext, param1: number);
						public arrangeEditorsCore(param0: javalangIterable<any>, param1: androidviewViewGroup): void;
						public constructor(param0: androidcontentContext);
					}
				}
			}
		}
	}
}

/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class DataFormValidationInfo extends javalangObject {
						public constructor(param0: javautilList<any>);
						public failedValidationInfos(): javautilList<any>;
						public hasErrors(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.EditText.d.ts" />
/// <reference path="./android.widget.ImageView.d.ts" />
/// <reference path="./android.widget.TextView.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class DataFormValidationViewBehavior extends javalangObject implements com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.OnValidationEventListener {
						public editor: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor;
						public negativeFeedbackVisible: boolean;
						public invalidDrawable: androidgraphicsdrawableDrawable;
						public invalidBackgroundDrawable: androidgraphicsdrawableDrawable;
						public invalidTextColor: number;
						public setEditor(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor): void;
						public findMessageView(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor): androidwidgetTextView;
						public setInvalidTextColor(param0: number): void;
						public setChangeBackground(param0: boolean): void;
						public setInvalidDrawable(param0: number): void;
						public setInvalidBackgroundDrawable(param0: androidgraphicsdrawableDrawable): void;
						public getInvalidTextColor(): number;
						public onValidationEvent(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor, param1: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public showNegativeFeedback(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public getContext(): androidcontentContext;
						public updateViewBackground(param0: androidviewView, param1: boolean): void;
						public getInvalidDrawable(): androidgraphicsdrawableDrawable;
						public hideNegativeFeedback(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public validationIcon(): androidwidgetImageView;
						public setInvalidBackgroundDrawable(param0: number): void;
						public updateUI(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public messageView(): androidwidgetTextView;
						public getEditor(): com.telerik.widget.dataform.visualization.core.EntityPropertyEditor;
						public setInvalidDrawable(param0: androidgraphicsdrawableDrawable): void;
						public isChangeBackground(): boolean;
						public findValidationIcon(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor): androidwidgetImageView;
						public hideNegativeFeedback(): void;
						public getInvalidBackgroundDrawable(): androidgraphicsdrawableDrawable;
						public constructor(param0: androidcontentContext);
						public reset(): void;
						public ensureBackgroundDrawableStateWorkaround(param0: androidwidgetEditText): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.DataFormLayoutManager.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class EditorGroup extends javalangObject {
						public getLayoutManager(): com.telerik.widget.dataform.visualization.DataFormLayoutManager;
						public getHeaderContainer(): androidviewViewGroup;
						public constructor(param0: androidcontentContext, param1: string, param2: number);
						public getHeaderView(): androidviewView;
						public editors(): javautilList<any>;
						public name(): string;
						public setLayoutManager(param0: com.telerik.widget.dataform.visualization.DataFormLayoutManager): void;
						public static getDefaultLayoutManager(param0: androidcontentContext): com.telerik.widget.dataform.visualization.DataFormLayoutManager;
						public constructor(param0: androidcontentContext, param1: string, param2: androidviewViewGroup);
						public arrangeEditors(): void;
						public static setDefaultLayoutManager(param0: com.telerik.widget.dataform.visualization.DataFormLayoutManager): void;
						public getView(): androidviewView;
						public constructor(param0: androidcontentContext, param1: string);
						public rootLayout(): androidviewView;
						public initGroupHeader(param0: androidviewView, param1: string): void;
						public constructor(param0: androidcontentContext, param1: string, param2: androidviewViewGroup, param3: androidviewViewGroup);
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class ExpandableEditorGroup extends com.telerik.widget.dataform.visualization.EditorGroup implements androidviewViewOnClickListener {
						public constructor(param0: androidcontentContext, param1: string, param2: number);
						public onClick(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: string, param2: boolean);
						public removeIsExpandedChangedListener(param0: com.telerik.widget.dataform.visualization.ExpandableEditorGroup.IsExpandedChangedListener): void;
						public setIsExpanded(param0: boolean): void;
						public expandEditors(): void;
						public constructor(param0: androidcontentContext, param1: string, param2: androidviewViewGroup);
						public getIsExpanded(): boolean;
						public collapseEditors(): void;
						public expandButton(): androidviewView;
						public addIsExpandedChangedListener(param0: com.telerik.widget.dataform.visualization.ExpandableEditorGroup.IsExpandedChangedListener): void;
						public constructor(param0: androidcontentContext, param1: string);
						public constructor(param0: androidcontentContext, param1: string, param2: number, param3: boolean);
						public constructor(param0: androidcontentContext, param1: string, param2: androidviewViewGroup, param3: androidviewViewGroup);
					}
					export module ExpandableEditorGroup {
						export class IsExpandedChangedListener extends javalangObject {
							/**
							 * Constructs a new instance of the com.telerik.widget.dataform.visualization.ExpandableEditorGroup$IsExpandedChangedListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onChanged(param0: boolean): void;
							});
							public onChanged(param0: boolean): void;
						}
					}
				}
			}
		}
	}
}

import androidwidgetScrollView = android.widget.ScrollView;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.common.Procedure.d.ts" />
/// <reference path="./com.telerik.android.common.Procedure2.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.DataFormMetadata.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EditorSetupListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.Entity.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyCommitListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.LabelPosition.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.DataFormEntityAdapter.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.DataFormLayoutManager.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.DataFormValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.CommitMode.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyViewer.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.ValidationMode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class RadDataForm extends androidwidgetScrollView implements com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.OnValidationEventListener {
						public getLabelPosition(): com.telerik.widget.dataform.engine.LabelPosition;
						public isLayoutRequested(): boolean;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public setLabelPosition(param0: com.telerik.widget.dataform.engine.LabelPosition): void;
						public focusableViewAvailable(param0: androidviewView): void;
						public addValidationListener(param0: com.telerik.widget.dataform.engine.EntityPropertyValidationListener): void;
						public addCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public onTouchEvent(param0: androidviewMotionEvent): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public getValidationMode(): com.telerik.widget.dataform.visualization.core.ValidationMode;
						public requestTransparentRegion(param0: androidviewView): void;
						public setAdapter(param0: com.telerik.widget.dataform.visualization.DataFormEntityAdapter): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						public isCanScroll(): boolean;
						public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
						public addEditorDependency(param0: string, param1: com.telerik.android.common.Procedure2, param2: native.Array<string>): void;
						public getTextDirection(): number;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
						public getExistingEditorForProperty(param0: string): com.telerik.widget.dataform.visualization.core.EntityPropertyViewer;
						public loadEntityValues(): void;
						public clearChildFocus(param0: androidviewView): void;
						public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
						public setEditorsHeaderLayout(param0: number): void;
						public getParentForAccessibility(): androidviewViewParent;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
						public notifyEditorSetupStarted(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyViewer): void;
						public getEditorsMainLayout(): number;
						public addValidationFinishedListener(param0: com.telerik.android.common.Procedure): void;
						public commitForced(): void;
						public commitChanges(): void;
						public requestLayout(): void;
						public constructor(param0: androidcontentContext);
						public getLayoutManager(): com.telerik.widget.dataform.visualization.DataFormLayoutManager;
						public isTextDirectionResolved(): boolean;
						public resetManualCommit(): void;
						public setLayoutManager(param0: com.telerik.widget.dataform.visualization.DataFormLayoutManager): void;
						public setCanScroll(param0: boolean): void;
						public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
						public addView(param0: androidviewView, param1: number): void;
						public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
						public setEditorsMainLayout(param0: number): void;
						public onAttachedToWindow(): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public getPropertyByName(param0: string): com.telerik.widget.dataform.engine.EntityProperty;
						public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
						public getEditorCustomizations(): com.telerik.android.common.Procedure;
						public getEditorsValidationLayout(): number;
						public getCommitMode(): com.telerik.widget.dataform.visualization.core.CommitMode;
						public setCommitMode(param0: com.telerik.widget.dataform.visualization.core.CommitMode): void;
						public createContextMenu(param0: androidviewContextMenu): void;
						public isReloadSuspended(): boolean;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public requestFitSystemWindows(): void;
						public focusSearch(param0: androidviewView, param1: number): androidviewView;
						public setMetadata(param0: com.telerik.widget.dataform.engine.DataFormMetadata): void;
						public getTextAlignment(): number;
						public setEditorCustomizations(param0: com.telerik.android.common.Procedure): void;
						public addView(param0: androidviewView, param1: number, param2: number): void;
						public removeValidationFinishedListener(param0: com.telerik.android.common.Procedure): void;
						public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public getAdapter(): com.telerik.widget.dataform.visualization.DataFormEntityAdapter;
						public canResolveLayoutDirection(): boolean;
						public showContextMenuForChild(param0: androidviewView): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public childDrawableStateChanged(param0: androidviewView): void;
						public onSaveInstanceState(): androidosParcelable;
						public addEditorSetupListener(param0: com.telerik.widget.dataform.engine.EditorSetupListener): void;
						public setEditorsValidationLayout(param0: number): void;
						public onValidationEvent(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor, param1: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public removeEditorDependency(param0: string): void;
						public getParent(): androidviewViewParent;
						public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public getEditorsHeaderLayout(): number;
						public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
						public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
						public isTextAlignmentResolved(): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public setEntity(param0: com.telerik.widget.dataform.engine.Entity): void;
						public applyEditorCustomizations(): void;
						public onValidationFinished(param0: com.telerik.widget.dataform.visualization.DataFormValidationInfo): void;
						public recomputeViewAttributes(param0: androidviewView): void;
						public removeEditorSetupListener(param0: com.telerik.widget.dataform.engine.EditorSetupListener): void;
						public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
						public clearDependencies(): void;
						public isLayoutDirectionResolved(): boolean;
						public getEditedObject(): javalangObject;
						public onRestoreInstanceState(param0: androidosParcelable): void;
						public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public getMetadata(): com.telerik.widget.dataform.engine.DataFormMetadata;
						public reload(): void;
						public hasValidationErrors(): boolean;
						public onFocusChanged(param0: boolean, param1: number, param2: androidgraphicsRect): void;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public focusSearch(param0: number): androidviewView;
						public setValidationMode(param0: com.telerik.widget.dataform.visualization.core.ValidationMode): void;
						public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
						public setReloadSuspended(param0: boolean): void;
						public notifyEditorSetupFinished(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyViewer): void;
						public validateChanges(): void;
						public validateChanges(param0: com.telerik.android.common.Procedure<com.telerik.widget.dataform.visualization.DataFormValidationInfo>): void;
						public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
						public getEntity(): com.telerik.widget.dataform.engine.Entity;
						public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public setIsReadOnly(param0: boolean): void;
						public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
						public removeView(param0: androidviewView): void;
						public getIsReadOnly(): boolean;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
						public onStopNestedScroll(param0: androidviewView): void;
						public bringChildToFront(param0: androidviewView): void;
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public addView(param0: androidviewView): void;
						public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
						public removeCommitListener(param0: com.telerik.widget.dataform.engine.EntityPropertyCommitListener): void;
						public arrangeEditors(): void;
						public setEntity(param0: javalangObject): void;
						public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.CommitMode.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.ValidationMode.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class RadDataFormInstanceState extends androidviewViewBaseSavedState {
						public static CREATOR: androidosParcelableCreator<any>;
						public editorIds: javautilHashMap<any, any>;
						public validationMode: com.telerik.widget.dataform.visualization.core.ValidationMode;
						public commitMode: com.telerik.widget.dataform.visualization.core.CommitMode;
						public isReadOnly: boolean;
						public describeContents(): number;
						public constructor(param0: androidosParcel);
						public constructor(param0: androidosParcelable, param1: com.telerik.widget.dataform.visualization.RadDataForm);
						public constructor(param0: androidosParcelable);
						public writeToParcel(param0: androidosParcel, param1: number): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export class ValidationAnimationBehavior extends com.telerik.widget.dataform.visualization.DataFormValidationViewBehavior {
						public animateEditor(param0: androidviewView): void;
						public showNegativeFeedback(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
						public constructor(param0: androidcontentContext);
						public onValidationEvent(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor, param1: com.telerik.widget.dataform.engine.ValidationInfo): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module annotations {
						export class DataFormEditorParams extends javalangObject implements javalangannotationAnnotation {
							/**
							 * Constructs a new instance of the com.telerik.widget.dataform.visualization.annotations.DataFormEditorParams interface with the provided implementation.
							 */
							public constructor(implementation: {
								min(): number;
								max(): number;
								step(): number;
								annotationType(): javalangClass<any>;
								equals(param0: javalangObject): boolean;
								hashCode(): number;
								toString(): string;
							});
							public static DEFAULT_STEP: number;
							public static DEFAULT_MAX: number;
							public static DEFAULT_MIN: number;
							public max(): number;
							public annotationType(): javalangClass<any>;
							public hashCode(): number;
							public step(): number;
							public toString(): string;
							public min(): number;
							public equals(param0: javalangObject): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.visualization.annotations.DataFormEditorParams.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.annotations.DataFormValidator.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.annotations.DataFormValidatorParams.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module annotations {
						export class DataFormProperty extends javalangObject implements javalangannotationAnnotation {
							/**
							 * Constructs a new instance of the com.telerik.widget.dataform.visualization.annotations.DataFormProperty interface with the provided implementation.
							 */
							public constructor(implementation: {
								editorLayout(): number;
								coreEditorLayout(): number;
								headerLayout(): number;
								validationLayout(): number;
								imageResource(): number;
								viewer(): javalangClass<any>;
								editor(): javalangClass<any>;
								editorParams(): com.telerik.widget.dataform.visualization.annotations.DataFormEditorParams;
								validator(): javalangClass<any>;
								validatorParams(): com.telerik.widget.dataform.visualization.annotations.DataFormValidatorParams;
								validators(): native.Array<com.telerik.widget.dataform.visualization.annotations.DataFormValidator>;
								converter(): javalangClass<any>;
								columnSpan(): number;
								index(): number;
								columnIndex(): number;
								group(): string;
								hint(): string;
								required(): boolean;
								label(): string;
								readOnly(): boolean;
								skip(): boolean;
								annotationType(): javalangClass<any>;
								equals(param0: javalangObject): boolean;
								hashCode(): number;
								toString(): string;
							});
							public static NULL: string;
							public editor(): javalangClass<any>;
							public index(): number;
							public hashCode(): number;
							public columnIndex(): number;
							public hint(): string;
							public label(): string;
							public editorLayout(): number;
							public toString(): string;
							public skip(): boolean;
							public validationLayout(): number;
							public equals(param0: javalangObject): boolean;
							public validator(): javalangClass<any>;
							public columnSpan(): number;
							public readOnly(): boolean;
							public imageResource(): number;
							public editorParams(): com.telerik.widget.dataform.visualization.annotations.DataFormEditorParams;
							public validators(): native.Array<com.telerik.widget.dataform.visualization.annotations.DataFormValidator>;
							public viewer(): javalangClass<any>;
							public annotationType(): javalangClass<any>;
							public coreEditorLayout(): number;
							public validatorParams(): com.telerik.widget.dataform.visualization.annotations.DataFormValidatorParams;
							public converter(): javalangClass<any>;
							public headerLayout(): number;
							public required(): boolean;
							public group(): string;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.visualization.annotations.DataFormValidatorParams.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module annotations {
						export class DataFormValidator extends javalangObject implements javalangannotationAnnotation {
							/**
							 * Constructs a new instance of the com.telerik.widget.dataform.visualization.annotations.DataFormValidator interface with the provided implementation.
							 */
							public constructor(implementation: {
								type(): javalangClass<any>;
								params(): com.telerik.widget.dataform.visualization.annotations.DataFormValidatorParams;
								annotationType(): javalangClass<any>;
								equals(param0: javalangObject): boolean;
								hashCode(): number;
								toString(): string;
							});
							public annotationType(): javalangClass<any>;
							public hashCode(): number;
							public type(): javalangClass<any>;
							public toString(): string;
							public params(): com.telerik.widget.dataform.visualization.annotations.DataFormValidatorParams;
							public equals(param0: javalangObject): boolean;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module annotations {
						export class DataFormValidatorParams extends javalangObject implements javalangannotationAnnotation {
							/**
							 * Constructs a new instance of the com.telerik.widget.dataform.visualization.annotations.DataFormValidatorParams interface with the provided implementation.
							 */
							public constructor(implementation: {
								min(): number;
								max(): number;
								length(): number;
								minimumLength(): number;
								positiveMessage(): string;
								negativeMessage(): string;
								annotationType(): javalangClass<any>;
								equals(param0: javalangObject): boolean;
								hashCode(): number;
								toString(): string;
							});
							public static NULL: string;
							public static DEFAULT_MAX: number;
							public static DEFAULT_MIN: number;
							public static DEFAULT_LENGTH: number;
							public positiveMessage(): string;
							public max(): number;
							public annotationType(): javalangClass<any>;
							public negativeMessage(): string;
							public hashCode(): number;
							public minimumLength(): number;
							public toString(): string;
							public min(): number;
							public equals(param0: javalangObject): boolean;
							public length(): number;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module core {
						export class CommitMode extends javalangEnum<any> {
							public static IMMEDIATE: com.telerik.widget.dataform.visualization.core.CommitMode;
							public static ON_LOST_FOCUS: com.telerik.widget.dataform.visualization.core.CommitMode;
							public static MANUAL: com.telerik.widget.dataform.visualization.core.CommitMode;
							public static values(): native.Array<com.telerik.widget.dataform.visualization.core.CommitMode>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static valueOf(param0: string): com.telerik.widget.dataform.visualization.core.CommitMode;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityPropertyEditorChangeListener.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.DataFormValidationViewBehavior.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.CommitMode.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.ValidationMode.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module core {
						export abstract class EntityPropertyEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyViewer implements com.telerik.widget.dataform.engine.ValidationCompletedListener {
							public setEditorValueChangedManually(param0: boolean): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onEditorValueChanged(param0: javalangObject): void;
							public setCommitMode(param0: com.telerik.widget.dataform.visualization.core.CommitMode): void;
							public viewerSetupFinished(): void;
							public getCommitMode(): com.telerik.widget.dataform.visualization.core.CommitMode;
							public notifyChangeListeners(): void;
							public resetValidationLayout(param0: number): void;
							public setValidationViewBehavior(param0: com.telerik.widget.dataform.visualization.DataFormValidationViewBehavior): void;
							public removeValidationListener(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.OnValidationEventListener): void;
							public loadPropertyValue(): void;
							public isEditorValueSynced(param0: javalangObject): boolean;
							public value(): javalangObject;
							public addValidationListener(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.OnValidationEventListener): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public validationInfo(): com.telerik.widget.dataform.engine.ValidationInfo;
							public validationIcon(): androidviewView;
							public removeEditorChangeListener(param0: com.telerik.widget.dataform.engine.EntityPropertyEditorChangeListener): void;
							public onEditorLostFocus(): void;
							public getEditorValueChangedManually(): boolean;
							public validate(): void;
							public editorSetupFinished(): void;
							public tryApplyValueToProperty(): void;
							public load(): void;
							public getValidationLayoutId(): number;
							public unload(): void;
							public setValidationMode(param0: com.telerik.widget.dataform.visualization.core.ValidationMode): void;
							public canEditorFocus(): boolean;
							public getValidationMode(): com.telerik.widget.dataform.visualization.core.ValidationMode;
							public updateLayoutWithElements(param0: androidviewView, param1: androidviewView, param2: androidviewView, param3: androidviewView, param4: androidviewView, param5: androidviewView): void;
							public validationView(): androidviewView;
							public addEditorChangeListener(param0: com.telerik.widget.dataform.engine.EntityPropertyEditorChangeListener): void;
							public viewerSetupStarted(): void;
							public setValidationLayoutId(param0: number): void;
							public getValidationViewBehavior(): com.telerik.widget.dataform.visualization.DataFormValidationViewBehavior;
						}
						export module EntityPropertyEditor {
							export class OnValidationEventListener extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.dataform.visualization.core.EntityPropertyEditor$OnValidationEventListener interface with the provided implementation.
								 */
								public constructor(implementation: {
									onValidationEvent(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor, param1: com.telerik.widget.dataform.engine.ValidationInfo): void;
								});
								public onValidationEvent(param0: com.telerik.widget.dataform.visualization.core.EntityPropertyEditor, param1: com.telerik.widget.dataform.engine.ValidationInfo): void;
							}
						}
					}
				}
			}
		}
	}
}

import androidtextTextWatcher = android.text.TextWatcher;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module core {
						export abstract class EntityPropertyViewer extends javalangObject {
							public associatedProperty: com.telerik.widget.dataform.engine.EntityProperty;
							public editorView: androidviewView;
							public headerView: androidviewView;
							public editorContainer: androidviewViewGroup;
							public headerContainer: androidviewViewGroup;
							public dataForm: com.telerik.widget.dataform.visualization.RadDataForm;
							public editorLayoutId: number;
							public headerLayoutId: number;
							public headerViewId: number;
							public editorViewId: number;
							public rootLayout(): androidviewView;
							public getEditorView(): androidviewView;
							public getHeaderView(): androidviewView;
							public init(param0: number, param1: number, param2: number, param3: number, param4: number): void;
							public createEditorView(param0: androidcontentContext): androidviewView;
							public load(): void;
							public property(): com.telerik.widget.dataform.engine.EntityProperty;
							public unload(): void;
							public setEditorLayout(param0: number): void;
							public viewerSetupFinished(): void;
							public onEntityPropertyChanged(): void;
							public notifyEntityPropertyChanged(): void;
							public applyParams(param0: javautilHashMap<any, any>): void;
							public updateLayoutWithElements(param0: androidviewView, param1: androidviewView, param2: androidviewView, param3: androidviewView, param4: androidviewView, param5: androidviewView): void;
							public imageView(): androidviewView;
							public initEditor(param0: androidviewView, param1: com.telerik.widget.dataform.engine.EntityProperty): void;
							public initHeader(param0: androidviewView, param1: com.telerik.widget.dataform.engine.EntityProperty): void;
							public loadPropertyValue(): void;
							public viewerSetupStarted(): void;
							public setHeaderLayout(param0: number): void;
							public getLabelPosition(): com.telerik.widget.dataform.engine.LabelPosition;
							public setLabelPosition(param0: com.telerik.widget.dataform.engine.LabelPosition): void;
							public getLabelWidth(): number;
							public setLabelWidth(param0: number): void;
							public initImage(param0: androidviewView, param1: com.telerik.widget.dataform.engine.EntityProperty): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
						export module EntityPropertyViewer {
							export class HeaderTextWatcher extends javalangObject implements androidtextTextWatcher {
								public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
								public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
								public afterTextChanged(param0: androidtextEditable): void;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module core {
						export class ValidationMode extends javalangEnum<any> {
							public static IMMEDIATE: com.telerik.widget.dataform.visualization.core.ValidationMode;
							public static ON_LOST_FOCUS: com.telerik.widget.dataform.visualization.core.ValidationMode;
							public static MANUAL: com.telerik.widget.dataform.visualization.core.ValidationMode;
							public static values(): native.Array<com.telerik.widget.dataform.visualization.core.ValidationMode>;
							public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
							public static valueOf(param0: string): com.telerik.widget.dataform.visualization.core.ValidationMode;
						}
					}
				}
			}
		}
	}
}


/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormCustomEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public setProvider(param0: com.telerik.widget.dataform.visualization.editors.DataFormCustomEditor.DataFormCustomEditorProvider): void;
							public notifyEditorValueChanged(): void;
							public getProvider(): com.telerik.widget.dataform.visualization.editors.DataFormCustomEditor.DataFormCustomEditorProvider;
							public createEditorView(param0: androidcontentContext): androidviewView;
							public isEditorValueSynced(param0: javalangObject): boolean;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public value(): javalangObject;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
							public notifyEditorLostFocus(): void;
						}
						export module DataFormCustomEditor {
							export class DataFormCustomEditorProvider extends javalangObject {
								/**
								 * Constructs a new instance of the com.telerik.widget.dataform.visualization.editors.DataFormCustomEditor$DataFormCustomEditorProvider interface with the provided implementation.
								 */
								public constructor(implementation: {
									createView(param0: androidcontentContext): androidviewView;
									applyValueToEditor(param0: javalangObject, param1: androidviewView): void;
									getValue(param0: androidviewView): javalangObject;
								});
								public createView(param0: androidcontentContext): androidviewView;
								public applyValueToEditor(param0: javalangObject, param1: androidviewView): void;
								public getValue(param0: androidviewView): javalangObject;
							}
						}
					}
				}
			}
		}
	}
}

import androidwidgetAutoCompleteTextView = android.widget.AutoCompleteTextView;
/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.AutoCompleteTextView.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormAutoCompleteEditor extends com.telerik.widget.dataform.visualization.editors.DataFormTextEditor {
							public autoComplete: androidwidgetAutoCompleteTextView;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public getAutoCompleteView(): androidwidgetAutoCompleteTextView;
							public afterTextChanged(param0: androidtextEditable): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onFocusChange(param0: androidviewView, param1: boolean): void;
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

import androidwidgetCompoundButtonOnCheckedChangeListener = android.widget.CompoundButton.OnCheckedChangeListener;
import androidwidgetCompoundButton = android.widget.CompoundButton;
/// <reference path="./android.widget.CompoundButton.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export abstract class DataFormBooleanEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements androidwidgetCompoundButtonOnCheckedChangeListener {
							public onCheckedChanged(param0: androidwidgetCompoundButton, param1: boolean): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public value(): javalangObject;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.widget.CompoundButton.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormCheckBoxEditor extends com.telerik.widget.dataform.visualization.editors.DataFormBooleanEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public onCheckedChanged(param0: androidwidgetCompoundButton, param1: boolean): void;
							public onEntityPropertyChanged(): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
						}
					}
				}
			}
		}
	}
}

import androidappDatePickerDialogOnDateSetListener = android.app.DatePickerDialog.OnDateSetListener;
import androidappAlertDialog = android.app.AlertDialog;
import androidwidgetDatePicker = android.widget.DatePicker;
/// <reference path="./android.app.AlertDialog.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.DatePicker.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.text.DateFormat.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormDateEditor extends com.telerik.widget.dataform.visualization.editors.DataFormDateTimeEditor implements androidappDatePickerDialogOnDateSetListener {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public createDialog(): androidappAlertDialog;
							public onClick(param0: androidviewView): void;
							public getDefaultFormat(): javatextDateFormat;
							public onDateSet(param0: androidwidgetDatePicker, param1: number, param2: number, param3: number): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.app.AlertDialog.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Long.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.text.DateFormat.d.ts" />
/// <reference path="./java.util.Calendar.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export abstract class DataFormDateTimeEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements androidviewViewOnClickListener {
							public context: androidcontentContext;
							public setTimeInMillis(param0: javalangLong): void;
							public setValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public getTimeInMillis(): javalangLong;
							public setDateFormat(param0: javatextDateFormat): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public setCalendar(param0: javautilCalendar): void;
							public getCalendar(): javautilCalendar;
							public getDateFormat(): javatextDateFormat;
							public createDialog(): androidappAlertDialog;
							public onClick(param0: androidviewView): void;
							public showDialog(): void;
							public getDefaultFormat(): javatextDateFormat;
							public onEntityPropertyChanged(): void;
							public getValueToStringConverter(): com.telerik.android.common.Function;
							public value(): javalangObject;
							public onPropertyValueChanged(param0: javalangObject): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
							public getDialog(): androidappAlertDialog;
						}
					}
				}
			}
		}
	}
}

import androidviewViewOnFocusChangeListener = android.view.View.OnFocusChangeListener;
import javalangNumber = java.lang.Number;
/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Number.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormDecimalEditor extends com.telerik.widget.dataform.visualization.editors.DataFormIntegerEditor implements androidtextTextWatcher, androidviewViewOnFocusChangeListener {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public parseNumber(): javalangNumber;
							public afterTextChanged(param0: androidtextEditable): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public onFocusChange(param0: androidviewView, param1: boolean): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormEmailEditor extends com.telerik.widget.dataform.visualization.editors.DataFormTextEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public afterTextChanged(param0: androidtextEditable): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onFocusChange(param0: androidviewView, param1: boolean): void;
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.EditText.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Number.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormIntegerEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements androidtextTextWatcher, androidviewViewOnFocusChangeListener {
							public coreEditor: androidwidgetEditText;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public valueCanBeNull(): boolean;
							public afterTextChanged(param0: androidtextEditable): void;
							public parseNumber(): javalangNumber;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public updateEditorText(param0: string): void;
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public canEditorFocus(): boolean;
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public onEntityPropertyChanged(): void;
							public value(): javalangObject;
							public onFocusChange(param0: androidviewView, param1: boolean): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.widget.TextView.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormLabelEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public value(): javalangObject;
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

import androidwidgetListAdapter = android.widget.ListAdapter;
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./android.widget.ListAdapter.d.ts" />
/// <reference path="./android.widget.ListView.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormListViewEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements androidwidgetAdapterViewOnItemSelectedListener, androidwidgetAdapterViewOnItemClickListener {
							public listView: androidwidgetListView;
							public currentValue: javalangObject;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public persistItem(param0: number): void;
							public onItemSelected(param0: androidwidgetAdapterView<any>, param1: androidviewView, param2: number, param3: number): void;
							public onItemClick(param0: androidwidgetAdapterView<any>, param1: androidviewView, param2: number, param3: number): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public forceListViewToStretch(param0: androidwidgetListView): void;
							public getItemPosition(param0: javalangObject): number;
							public onEntityPropertyChanged(): void;
							public setAdapter(param0: androidwidgetListAdapter): void;
							public isEditorValueSynced(param0: javalangObject): boolean;
							public onNothingSelected(param0: androidwidgetAdapterView<any>): void;
							public value(): javalangObject;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public getAdapter(): androidwidgetListAdapter;
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormMultilineTextEditor extends com.telerik.widget.dataform.visualization.editors.DataFormTextEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public afterTextChanged(param0: androidtextEditable): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onFocusChange(param0: androidviewView, param1: boolean): void;
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormNumberPickerEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements com.telerik.widget.dataform.engine.PropertyChangedListener {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public getValueToStringConverter(): com.telerik.android.common.Function;
							public onPropertyChanged(param0: string, param1: javalangObject): void;
							public applyParams(param0: javautilHashMap<any, any>): void;
							public setValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public value(): javalangObject;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormPasswordEditor extends com.telerik.widget.dataform.visualization.editors.DataFormTextEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public afterTextChanged(param0: androidtextEditable): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onFocusChange(param0: androidviewView, param1: boolean): void;
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormPhoneEditor extends com.telerik.widget.dataform.visualization.editors.DataFormTextEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public afterTextChanged(param0: androidtextEditable): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onFocusChange(param0: androidviewView, param1: boolean): void;
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

import androidwidgetRadioGroupOnCheckedChangeListener = android.widget.RadioGroup.OnCheckedChangeListener;
import androidwidgetRadioButton = android.widget.RadioButton;
import androidwidgetRadioGroup = android.widget.RadioGroup;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.widget.RadioButton.d.ts" />
/// <reference path="./android.widget.RadioGroup.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.Procedure.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormRadioGroupEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements androidwidgetRadioGroupOnCheckedChangeListener {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public recreateRadioButtons(): void;
							public setValues(param0: native.Array<javalangObject>): void;
							public setValueToStringConverter(param0: com.telerik.android.common.Function): void;
							public createButton(param0: androidcontentContext): androidwidgetRadioButton;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onCheckedChanged(param0: androidwidgetRadioGroup, param1: number): void;
							public setCustomizeButtons(param0: com.telerik.android.common.Procedure): void;
							public getValues(): native.Array<javalangObject>;
							public findButtonByTag(param0: javalangObject): androidwidgetRadioButton;
							public onEntityPropertyChanged(): void;
							public getValueToStringConverter(): com.telerik.android.common.Function;
							public getCustomizeButtons(): com.telerik.android.common.Procedure;
							public isEditorValueSynced(param0: javalangObject): boolean;
							public applyCustomizeButtons(): void;
							public value(): javalangObject;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

import androidwidgetSeekBarOnSeekBarChangeListener = android.widget.SeekBar.OnSeekBarChangeListener;
import androidwidgetSeekBar = android.widget.SeekBar;
/// <reference path="./android.widget.SeekBar.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.HashMap.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormSeekBarEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements androidwidgetSeekBarOnSeekBarChangeListener {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public onProgressChanged(param0: androidwidgetSeekBar, param1: number, param2: boolean): void;
							public getMax(): number;
							public onStopTrackingTouch(param0: androidwidgetSeekBar): void;
							public setMax(param0: number): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public setMin(param0: number): void;
							public getMin(): number;
							public getTypedValue(): number;
							public applyParams(param0: javautilHashMap<any, any>): void;
							public setTypedValue(param0: number): void;
							public onStartTrackingTouch(param0: androidwidgetSeekBar): void;
							public value(): javalangObject;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.widget.RadioButton.d.ts" />
/// <reference path="./android.widget.RadioGroup.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormSegmentedEditor extends com.telerik.widget.dataform.visualization.editors.DataFormRadioGroupEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public createButton(param0: androidcontentContext): androidwidgetRadioButton;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onCheckedChanged(param0: androidwidgetRadioGroup, param1: number): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.editors.adapters.EditorSpinnerAdapter.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormSpinnerEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements androidwidgetAdapterViewOnItemSelectedListener {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public onItemSelected(param0: androidwidgetAdapterView<any>, param1: androidviewView, param2: number, param3: number): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public canEditorFocus(): boolean;
							public getAdapter(): com.telerik.widget.dataform.visualization.editors.adapters.EditorSpinnerAdapter;
							public onEntityPropertyChanged(): void;
							public setAdapter(param0: com.telerik.widget.dataform.visualization.editors.adapters.EditorSpinnerAdapter): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty, param2: com.telerik.widget.dataform.visualization.editors.adapters.EditorSpinnerAdapter);
							public isEditorValueSynced(param0: javalangObject): boolean;
							public onNothingSelected(param0: androidwidgetAdapterView<any>): void;
							public value(): javalangObject;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.widget.CompoundButton.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormSwitchEditor extends com.telerik.widget.dataform.visualization.editors.DataFormBooleanEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public onCheckedChanged(param0: androidwidgetCompoundButton, param1: boolean): void;
							public onEntityPropertyChanged(): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.text.Editable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormTextEditor extends com.telerik.widget.dataform.visualization.core.EntityPropertyEditor implements androidtextTextWatcher, androidviewViewOnFocusChangeListener {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public afterTextChanged(param0: androidtextEditable): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public onTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public canEditorFocus(): boolean;
							public beforeTextChanged(param0: string, param1: number, param2: number, param3: number): void;
							public onEntityPropertyChanged(): void;
							public initEditor(param0: androidviewView, param1: com.telerik.widget.dataform.engine.EntityProperty): void;
							public isEditorValueSynced(param0: javalangObject): boolean;
							public value(): javalangObject;
							public onFocusChange(param0: androidviewView, param1: boolean): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

import androidappTimePickerDialogOnTimeSetListener = android.app.TimePickerDialog.OnTimeSetListener;
import androidwidgetTimePicker = android.widget.TimePicker;
/// <reference path="./android.app.AlertDialog.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.TimePicker.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.text.DateFormat.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormTimeEditor extends com.telerik.widget.dataform.visualization.editors.DataFormDateTimeEditor implements androidappTimePickerDialogOnTimeSetListener {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public createDialog(): androidappAlertDialog;
							public onClick(param0: androidviewView): void;
							public getDefaultFormat(): javatextDateFormat;
							public onTimeSet(param0: androidwidgetTimePicker, param1: number, param2: number): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.widget.CompoundButton.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.ValidationInfo.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export class DataFormToggleButtonEditor extends com.telerik.widget.dataform.visualization.editors.DataFormBooleanEditor {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public onCheckedChanged(param0: androidwidgetCompoundButton, param1: boolean): void;
							public validationCompleted(param0: com.telerik.widget.dataform.engine.ValidationInfo): void;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.telerik.widget.dataform.engine.EntityProperty);
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.Filter.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module editors {
						export module adapters {
							export class EditorSpinnerAdapter extends androidwidgetArrayAdapter<any> {
								public setItems(param0: native.Array<javalangObject>): void;
								public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
								public constructor(param0: androidcontentContext, param1: number);
								public constructor();
								public getItem(param0: number): javalangObject;
								public areAllItemsEnabled(): boolean;
								public constructor(param0: androidcontentContext, param1: number, param2: number, param3: javautilList<any>);
								public constructor(param0: androidcontentContext, param1: number, param2: native.Array<javalangObject>);
								public constructor(param0: androidcontentContext, param1: number, param2: javautilList<any>);
								public getPosition(param0: javalangObject): number;
								public setDropDownViewTheme(param0: androidcontentresResourcesTheme): void;
								public constructor(param0: androidcontentContext, param1: number, param2: number);
								public getFilter(): androidwidgetFilter;
								public getCount(): number;
								public constructor(param0: androidcontentContext, param1: number, param2: number, param3: native.Array<javalangObject>);
								public getView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
								public isEnabled(param0: number): boolean;
								public constructor(param0: androidcontentContext, param1: native.Array<javalangObject>);
								public getDropDownViewTheme(): androidcontentresResourcesTheme;
							}
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module metadata {
						export class MetadataProvider extends javalangObject {
							public constructor();
							public addMetadataForProperty(param0: com.telerik.widget.dataform.engine.EntityProperty, param1: javalangObject): void;
							public resolveMetadataForProperty(param0: com.telerik.widget.dataform.engine.EntityProperty): javalangObject;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyEditor.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyViewer.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module registries {
						export class EditorRegistry extends javalangObject {
							public createDefaultEditor(param0: com.telerik.widget.dataform.engine.EntityProperty): com.telerik.widget.dataform.visualization.core.EntityPropertyEditor;
							public resolveEditorForType(param0: com.telerik.widget.dataform.engine.EntityProperty): com.telerik.widget.dataform.visualization.core.EntityPropertyEditor;
							public createEditorFromMetadata(param0: com.telerik.widget.dataform.engine.EntityProperty): com.telerik.widget.dataform.visualization.core.EntityPropertyEditor;
							public addEditorForTypes(param0: javalangClass<any>, param1: native.Array<javalangClass<any>>): void;
							public resolveEditorForProperty(param0: com.telerik.widget.dataform.engine.EntityProperty): com.telerik.widget.dataform.visualization.core.EntityPropertyEditor;
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm);
							public resolveViewerForType(param0: com.telerik.widget.dataform.engine.EntityProperty): com.telerik.widget.dataform.visualization.core.EntityPropertyViewer;
							public createViewerFromMetadata(param0: com.telerik.widget.dataform.engine.EntityProperty): com.telerik.widget.dataform.visualization.core.EntityPropertyViewer;
							public addEditorForProperty(param0: javalangClass<any>, param1: string): void;
							public addViewerForTypes(param0: javalangClass<any>, param1: native.Array<javalangClass<any>>): void;
							public resolveViewerForProperty(param0: com.telerik.widget.dataform.engine.EntityProperty): com.telerik.widget.dataform.visualization.core.EntityPropertyViewer;
							public addViewForProperty(param0: javalangClass<any>, param1: string): void;
							public resetEditorTypeRegistry(): void;
							public createDefaultViewer(param0: com.telerik.widget.dataform.engine.EntityProperty): com.telerik.widget.dataform.visualization.core.EntityPropertyViewer;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module viewers {
						export abstract class DataFormBooleanViewer extends com.telerik.widget.dataform.visualization.core.EntityPropertyViewer {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module viewers {
						export class DataFormCheckBoxViewer extends com.telerik.widget.dataform.visualization.viewers.DataFormBooleanViewer {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.dataform.engine.EntityProperty.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.RadDataForm.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module viewers {
						export class DataFormTextViewer extends com.telerik.widget.dataform.visualization.core.EntityPropertyViewer {
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: com.telerik.widget.dataform.engine.EntityProperty);
							public constructor(param0: com.telerik.widget.dataform.visualization.RadDataForm, param1: number, param2: number, param3: number, param4: number, param5: number, param6: com.telerik.widget.dataform.engine.EntityProperty);
							public applyEntityValueToEditor(param0: javalangObject): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./com.telerik.widget.dataform.visualization.core.EntityPropertyViewer.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module dataform {
				export module visualization {
					export module viewers {
						export class DataFormViewerState extends androidviewViewBaseSavedState {
							public static CREATOR: androidosParcelableCreator<any>;
							public editorId: number;
							public constructor(param0: androidosParcelable, param1: com.telerik.widget.dataform.visualization.core.EntityPropertyViewer);
							public describeContents(): number;
							public writeToParcel(param0: androidosParcel, param1: number): void;
							public constructor(param0: androidosParcelable);
							public constructor(param0: androidosParcel);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Bitmap.d.ts" />
/// <reference path="./android.view.View.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class BitmapResolver extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.feedback.BitmapResolver interface with the provided implementation.
					 */
					public constructor(implementation: {
						getBitmapFromView(param0: androidviewView): androidgraphicsBitmap;
					});
					public getBitmapFromView(param0: androidviewView): androidgraphicsBitmap;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Bitmap.d.ts" />
/// <reference path="./android.view.View.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class BitmapResolverBase extends javalangObject implements com.telerik.widget.feedback.BitmapResolver {
					public constructor();
					public getBitmapFromView(param0: androidviewView): androidgraphicsBitmap;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class CommentEditText extends androidwidgetEditText {
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public onPreDraw(): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public onKeyPreIme(param0: number, param1: androidviewKeyEvent): boolean;
					public setOnKeyPreImeListener(param0: com.telerik.widget.feedback.CommentEditText.OnKeyPreImeListener): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public constructor(param0: androidcontentContext);
					public sendAccessibilityEvent(param0: number): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
				}
				export module CommentEditText {
					export class OnKeyPreImeListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.feedback.CommentEditText$OnKeyPreImeListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onKeyPreIme(param0: number, param1: androidviewKeyEvent): void;
						});
						public onKeyPreIme(param0: number, param1: androidviewKeyEvent): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class DateParser extends javalangObject {
					public constructor();
					public static getDateFromJSONString(param0: androidcontentContext, param1: string): string;
				}
			}
		}
	}
}

import androidsupportv7appActionBarActivity = android.support.v7.app.ActionBarActivity;
import androidsupportv7viewActionMode = android.support.v7.view.ActionMode;
import androidsupportv7viewActionModeCallback = android.support.v7.view.ActionMode.Callback;
import androidsupportv7appActionBarDrawerToggleDelegate = android.support.v7.app.ActionBarDrawerToggle.Delegate;
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class EditDetailsActivity extends androidsupportv7appActionBarActivity {
					public constructor();
					public onSupportActionModeStarted(param0: androidsupportv7viewActionMode): void;
					public onSupportActionModeFinished(param0: androidsupportv7viewActionMode): void;
					public getSupportParentActivityIntent(): androidcontentIntent;
					public onRequestPermissionsResult(param0: number, param1: native.Array<string>, param2: native.Array<number>): void;
					public onWindowStartingSupportActionMode(param0: androidsupportv7viewActionModeCallback): androidsupportv7viewActionMode;
					public onCreate(param0: androidosBundle): void;
					public onStop(): void;
					public onDestroy(): void;
					public getDrawerToggleDelegate(): androidsupportv7appActionBarDrawerToggleDelegate;
					public onOptionsItemSelected(param0: androidviewMenuItem): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class FeedbackIndicator extends androidwidgetFrameLayout implements androidviewViewOnClickListener {
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public onClick(param0: androidviewView): void;
					public focusSearch(param0: number): androidviewView;
					public bringChildToFront(param0: androidviewView): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public isLayoutRequested(): boolean;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public onAttachedToWindow(): void;
					public getParentForAccessibility(): androidviewViewParent;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public getFeedback(): string;
					public getLayoutDirection(): number;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public setFeedback(param0: string): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public requestFitSystemWindows(): void;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public isTextAlignmentResolved(): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public addView(param0: androidviewView, param1: number): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public removeView(param0: androidviewView): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public canResolveLayoutDirection(): boolean;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public constructor(param0: androidcontentContext);
					public addView(param0: androidviewView): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.feedback.Image.d.ts" />
/// <reference path="./com.telerik.widget.feedback.SystemInfo.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./org.json.JSONObject.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class FeedbackItem extends javalangObject {
					public getId(): string;
					public getUid(): string;
					public getCreatedAt(): string;
					public getProjectId(): string;
					public getRootId(): string;
					public setImage(param0: com.telerik.widget.feedback.Image): void;
					public setCreatedAt(param0: string): void;
					public setText(param0: string): void;
					public setUid(param0: string): void;
					public constructor();
					public constructor(param0: orgjsonJSONObject);
					public setCommentsCount(param0: string): void;
					public setState(param0: string): void;
					public setSystemInfo(param0: com.telerik.widget.feedback.SystemInfo): void;
					public getText(): string;
					public toJson(): orgjsonJSONObject;
					public getCommentsCount(): string;
					public getSystemInfo(): com.telerik.widget.feedback.SystemInfo;
					public getState(): string;
					public setRootId(param0: string): void;
					public getAuthor(): string;
					public getModifiedAt(): string;
					public setModifiedAt(param0: string): void;
					public setProjectId(param0: string): void;
					public getImage(): com.telerik.widget.feedback.Image;
					public setId(param0: string): void;
					public setAuthor(param0: string): void;
				}
			}
		}
	}
}

import androidsupportv4appFragment = android.support.v4.app.Fragment;
import androidviewLayoutInflater = android.view.LayoutInflater;
import androidcontentresConfiguration = android.content.res.Configuration;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.Configuration.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.LayoutInflater.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./android.widget.Filter.d.ts" />
/// <reference path="./com.telerik.widget.feedback.FeedbackItem.d.ts" />
/// <reference path="./com.telerik.widget.feedback.FragmentItemsList.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class FragmentItemsList extends androidsupportv4appFragment implements androidwidgetAdapterViewOnItemClickListener {
					public onSaveInstanceState(param0: androidosBundle): void;
					public constructor();
					public onCreateView(param0: androidviewLayoutInflater, param1: androidviewViewGroup, param2: androidosBundle): androidviewView;
					public onCreateContextMenu(param0: androidviewContextMenu, param1: androidviewView, param2: androidviewContextMenuContextMenuInfo): void;
					public onDestroy(): void;
					public onItemClick(param0: androidwidgetAdapterView<any>, param1: androidviewView, param2: number, param3: number): void;
					public requestItems(): void;
					public onConfigurationChanged(param0: androidcontentresConfiguration): void;
					public onLowMemory(): void;
				}
				export module FragmentItemsList {
					export class FeedbackItemsAdapter extends androidwidgetArrayAdapter<any> {
						public isEnabled(param0: number): boolean;
						public areAllItemsEnabled(): boolean;
						public constructor();
						public getFilter(): androidwidgetFilter;
						public getItem(param0: number): javalangObject;
						public constructor(param0: androidcontentContext, param1: number);
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: javautilList<any>);
						public getView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
						public constructor(param0: androidcontentContext, param1: number, param2: javautilList<any>);
						public getCount(): number;
						public setDropDownViewTheme(param0: androidcontentresResourcesTheme): void;
						public getDropDownViewTheme(): androidcontentresResourcesTheme;
						public getItem(param0: number): com.telerik.widget.feedback.FeedbackItem;
						public constructor(param0: com.telerik.widget.feedback.FragmentItemsList, param1: androidcontentContext, param2: number, param3: javautilArrayList<any>);
						public getViewTypeCount(): number;
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: native.Array<javalangObject>);
						public constructor(param0: androidcontentContext, param1: number, param2: number);
						public constructor(param0: androidcontentContext, param1: number, param2: native.Array<javalangObject>);
						public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./org.json.JSONObject.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class Image extends javalangObject {
					public getbase64(): string;
					public setCreatedAt(param0: string): void;
					public constructor();
					public constructor(param0: orgjsonJSONObject);
					public getCreatedAt(): string;
					public setUri(param0: string): void;
					public getFilename(): string;
					public setbase64(param0: string): void;
					public getContentType(): string;
					public getUri(): string;
					public setContentType(param0: string): void;
					public setFilename(param0: string): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
/// <reference path="./org.json.JSONArray.d.ts" />
/// <reference path="./org.json.JSONObject.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class JSONHelper extends javalangObject {
					public constructor();
					public static toJSONObject(param0: javalangObject): orgjsonJSONObject;
					public static toJSONArray(param0: javautilArrayList<any>): orgjsonJSONArray;
					public static init(param0: javalangObject, param1: orgjsonJSONObject): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class MainMenuItem extends javalangObject {
					public constructor(param0: string, param1: string, param2: androidcontentIntent);
					public description(): string;
					public setInitAction(param0: com.telerik.widget.feedback.MainMenuItem.InitAction): void;
					public getInitAction(): com.telerik.widget.feedback.MainMenuItem.InitAction;
					public title(): string;
					public intent(): androidcontentIntent;
				}
				export module MainMenuItem {
					export class InitAction extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.feedback.MainMenuItem$InitAction interface with the provided implementation.
						 */
						public constructor(implementation: {
							init(param0: androidcontentContext): void;
						});
						public init(param0: androidcontentContext): void;
					}
				}
			}
		}
	}
}

import javalangException = java.lang.Exception;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./android.widget.Filter.d.ts" />
/// <reference path="./com.telerik.widget.feedback.BitmapResolver.d.ts" />
/// <reference path="./com.telerik.widget.feedback.MainMenuItem.d.ts" />
/// <reference path="./com.telerik.widget.feedback.RadFeedback.d.ts" />
/// <reference path="./java.lang.Exception.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./org.json.JSONObject.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class RadFeedback extends javalangObject implements androidwidgetAdapterViewOnItemClickListener {
					public serviceUri(): string;
					public static instance(): com.telerik.widget.feedback.RadFeedback;
					public show(param0: androidcontentContext): void;
					public getBitmapResolver(): com.telerik.widget.feedback.BitmapResolver;
					public init(param0: string, param1: string, param2: string): void;
					public setOnFeedbackFinishedListener(param0: com.telerik.widget.feedback.RadFeedback.OnSendFeedbackFinishedListener): void;
					public apiKey(): string;
					public setBitmapResolver(param0: com.telerik.widget.feedback.BitmapResolver): void;
					public setAdditionalContent(param0: orgjsonJSONObject): void;
					public onItemClick(param0: androidwidgetAdapterView<any>, param1: androidviewView, param2: number, param3: number): void;
					public showSendFeedback(param0: androidcontentContext): void;
				}
				export module RadFeedback {
					export class MainMenuAdapter extends androidwidgetArrayAdapter<any> {
						public isEnabled(param0: number): boolean;
						public areAllItemsEnabled(): boolean;
						public constructor();
						public getFilter(): androidwidgetFilter;
						public getItem(param0: number): javalangObject;
						public constructor(param0: androidcontentContext, param1: number);
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: javautilList<any>);
						public getView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
						public constructor(param0: androidcontentContext, param1: number, param2: javautilList<any>);
						public getCount(): number;
						public setDropDownViewTheme(param0: androidcontentresResourcesTheme): void;
						public getDropDownViewTheme(): androidcontentresResourcesTheme;
						public getViewTypeCount(): number;
						public constructor(param0: com.telerik.widget.feedback.RadFeedback, param1: javautilArrayList<any>, param2: androidcontentContext, param3: number);
						public getPosition(param0: javalangObject): number;
						public getItemId(param0: number): number;
						public getPosition(param0: com.telerik.widget.feedback.MainMenuItem): number;
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: native.Array<javalangObject>);
						public getItem(param0: number): com.telerik.widget.feedback.MainMenuItem;
						public constructor(param0: androidcontentContext, param1: number, param2: number);
						public constructor(param0: androidcontentContext, param1: number, param2: native.Array<javalangObject>);
						public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					}
					export class OnAuthorPromptConfirmedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.feedback.RadFeedback$OnAuthorPromptConfirmedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onAuthorPromptConfirmed(): void;
						});
						public onAuthorPromptConfirmed(): void;
					}
					export class OnItemsDeliveredCallback extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.feedback.RadFeedback$OnItemsDeliveredCallback interface with the provided implementation.
						 */
						public constructor(implementation: {
							onItemsDelivered(param0: javalangException, param1: javautilArrayList<any>): void;
						});
						public onItemsDelivered(param0: javalangException, param1: javautilArrayList<any>): void;
					}
					export class OnSendFeedbackFinishedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.feedback.RadFeedback$OnSendFeedbackFinishedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							sendFeedbackFinished(): void;
						});
						public sendFeedbackFinished(): void;
					}
					export class OnSubmitFeedbackFinishedCallback extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.feedback.RadFeedback$OnSubmitFeedbackFinishedCallback interface with the provided implementation.
						 */
						public constructor(implementation: {
							onSubmitFinished(param0: javalangException): void;
						});
						public onSubmitFinished(param0: javalangException): void;
					}
					export class RequestResult extends javalangObject {
						public results: javautilArrayList<any>;
						public exception: javalangException;
					}
				}
			}
		}
	}
}

import androidviewViewOnTouchListener = android.view.View.OnTouchListener;
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class SendFeedbackActivity extends androidsupportv7appActionBarActivity implements androidviewViewOnTouchListener, com.telerik.widget.feedback.CommentEditText.OnKeyPreImeListener {
					public onSupportActionModeStarted(param0: androidsupportv7viewActionMode): void;
					public onKeyPreIme(param0: number, param1: androidviewKeyEvent): void;
					public onTouch(param0: androidviewView, param1: androidviewMotionEvent): boolean;
					public onCreate(param0: androidosBundle): void;
					public onDestroy(): void;
					public onRestoreInstanceState(param0: androidosBundle): void;
					public onSaveInstanceState(param0: androidosBundle): void;
					public onCreateOptionsMenu(param0: androidviewMenu): boolean;
					public constructor();
					public onSupportActionModeFinished(param0: androidsupportv7viewActionMode): void;
					public getSupportParentActivityIntent(): androidcontentIntent;
					public onPause(): void;
					public onRequestPermissionsResult(param0: number, param1: native.Array<string>, param2: native.Array<number>): void;
					public onWindowStartingSupportActionMode(param0: androidsupportv7viewActionModeCallback): androidsupportv7viewActionMode;
					public getDrawerToggleDelegate(): androidsupportv7appActionBarDrawerToggleDelegate;
					public onOptionsItemSelected(param0: androidviewMenuItem): boolean;
				}
			}
		}
	}
}

/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./org.json.JSONObject.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class SystemInfo extends javalangObject {
					public getOSVersion(): string;
					public getAppId(): string;
					public setHeightInPixels(param0: string): void;
					public getModel(): string;
					public getWidthInPixels(): string;
					public setWidthInPixels(param0: string): void;
					public toJson(): orgjsonJSONObject;
					public setModel(param0: string): void;
					public setUuid(param0: string): void;
					public setAppId(param0: string): void;
					public init(param0: orgjsonJSONObject): void;
					public getAppVersion(): string;
					public setAppVersion(param0: string): void;
					public constructor();
					public constructor(param0: orgjsonJSONObject);
					public getUuid(): string;
					public setOSVersion(param0: string): void;
					public getHeightInPixels(): string;
				}
			}
		}
	}
}

import androidsupportv4appFragmentStatePagerAdapter = android.support.v4.app.FragmentStatePagerAdapter;
import androidsupportv4appFragmentManager = android.support.v4.app.FragmentManager;
/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v4.app.Fragment.d.ts" />
/// <reference path="./android.support.v4.app.FragmentManager.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.view.Menu.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.widget.feedback.ViewFeedbackActivity.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class ViewFeedbackActivity extends androidsupportv7appActionBarActivity {
					public onCreateOptionsMenu(param0: androidviewMenu): boolean;
					public constructor();
					public onSupportActionModeStarted(param0: androidsupportv7viewActionMode): void;
					public onSupportActionModeFinished(param0: androidsupportv7viewActionMode): void;
					public getSupportParentActivityIntent(): androidcontentIntent;
					public onRequestPermissionsResult(param0: number, param1: native.Array<string>, param2: native.Array<number>): void;
					public onWindowStartingSupportActionMode(param0: androidsupportv7viewActionModeCallback): androidsupportv7viewActionMode;
					public onCreate(param0: androidosBundle): void;
					public onDestroy(): void;
					public getDrawerToggleDelegate(): androidsupportv7appActionBarDrawerToggleDelegate;
					public onOptionsItemSelected(param0: androidviewMenuItem): boolean;
				}
				export module ViewFeedbackActivity {
					export class FeedbackListsAdapter extends androidsupportv4appFragmentStatePagerAdapter {
						public setPrimaryItem(param0: androidviewView, param1: number, param2: javalangObject): void;
						public setPrimaryItem(param0: androidviewViewGroup, param1: number, param2: javalangObject): void;
						public constructor();
						public constructor(param0: com.telerik.widget.feedback.ViewFeedbackActivity, param1: androidsupportv4appFragmentManager);
						public getItem(param0: number): androidsupportv4appFragment;
						public getCount(): number;
						public constructor(param0: androidsupportv4appFragmentManager);
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Intent.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v7.view.ActionMode.d.ts" />
/// <reference path="./android.view.MenuItem.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module feedback {
				export class ViewFeedbackItemActivity extends androidsupportv7appActionBarActivity {
					public constructor();
					public onSupportActionModeStarted(param0: androidsupportv7viewActionMode): void;
					public onSupportActionModeFinished(param0: androidsupportv7viewActionMode): void;
					public getSupportParentActivityIntent(): androidcontentIntent;
					public onRequestPermissionsResult(param0: number, param1: native.Array<string>, param2: native.Array<number>): void;
					public onWindowStartingSupportActionMode(param0: androidsupportv7viewActionModeCallback): androidsupportv7viewActionMode;
					public onCreate(param0: androidosBundle): void;
					public onDestroy(): void;
					public getDrawerToggleDelegate(): androidsupportv7appActionBarDrawerToggleDelegate;
					public onOptionsItemSelected(param0: androidviewMenuItem): boolean;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module gauge {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.TypedArray.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.TextView.d.ts" />
/// <reference path="./com.telerik.widget.scales.GaugeScale.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module gauge {
				export abstract class RadGaugeView extends androidviewViewGroup {
					public scales: javautilArrayList<any>;
					public title: androidwidgetTextView;
					public subtitle: androidwidgetTextView;
					public titleHorizontalOffset: number;
					public titleVerticalOffset: number;
					public subtitleHorizontalOffset: number;
					public subtitleVerticalOffset: number;
					public fillColor: number;
					public fillPaint: androidgraphicsPaint;
					public getTitle(): androidwidgetTextView;
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public focusSearch(param0: number): androidviewView;
					public bringChildToFront(param0: androidviewView): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public isLayoutRequested(): boolean;
					public removeScale(param0: number): void;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public onAttachedToWindow(): void;
					public getParentForAccessibility(): androidviewViewParent;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public getSubtitle(): androidwidgetTextView;
					public removeAllScales(): void;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public addScale(param0: number, param1: com.telerik.widget.scales.GaugeScale): void;
					public addScale(param0: com.telerik.widget.scales.GaugeScale): void;
					public getLayoutDirection(): number;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public initWithXml(param0: androidcontentresTypedArray): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public setSubtitle(param0: androidwidgetTextView): void;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public getScales(): javautilArrayList<any>;
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public requestFitSystemWindows(): void;
					public removeScale(param0: com.telerik.widget.scales.GaugeScale): void;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public isTextAlignmentResolved(): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public setTitle(param0: androidwidgetTextView): void;
					public getSubtitleHorizontalOffset(): number;
					public onDraw(param0: androidgraphicsCanvas): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public requestArrange(): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public addView(param0: androidviewView, param1: number): void;
					public getTitleHorizontalOffset(): number;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public sendAccessibilityEvent(param0: number): void;
					public animateGauge(): void;
					public requestLayout(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public removeView(param0: androidviewView): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public setTitleVerticalOffset(param0: number): void;
					public setFillPaint(param0: androidgraphicsPaint): void;
					public canResolveLayoutDirection(): boolean;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public setScales(param0: javautilArrayList<any>): void;
					public setTitleHorizontalOffset(param0: number): void;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public requestRender(): void;
					public init(): void;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public setSubtitleHorizontalOffset(param0: number): void;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public setSubtitleVerticalOffset(param0: number): void;
					public getFillPaint(): androidgraphicsPaint;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public constructor(param0: androidcontentContext);
					public getSubtitleVerticalOffset(): number;
					public getFillColor(): number;
					public setFillColor(param0: number): void;
					public addView(param0: androidviewView): void;
					public getTitleVerticalOffset(): number;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module gauge {
				export class RadRadialGaugeView extends com.telerik.widget.gauge.RadGaugeView {
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public focusSearch(param0: number): androidviewView;
					public bringChildToFront(param0: androidviewView): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public isLayoutRequested(): boolean;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public getParentForAccessibility(): androidviewViewParent;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public getLayoutDirection(): number;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public requestFitSystemWindows(): void;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public isTextAlignmentResolved(): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public addView(param0: androidviewView, param1: number): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public removeView(param0: androidviewView): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public canResolveLayoutDirection(): boolean;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public constructor(param0: androidcontentContext);
					public addView(param0: androidviewView): void;
				}
			}
		}
	}
}

import androidviewanimationAnimation = android.view.animation.Animation;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.TypedArray.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.view.animation.Animation.d.ts" />
/// <reference path="./com.telerik.widget.indicators.GaugeBarIndicatorCapMode.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module indicators {
				export abstract class GaugeBarIndicator extends com.telerik.widget.indicators.GaugeIndicator {
					public barWidth: number;
					public minimum: number;
					public maximum: number;
					public location: number;
					public animationStartValue: number;
					public drawMaximum: number;
					public cap: com.telerik.widget.indicators.GaugeBarIndicatorCapMode;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public getBarWidth(): number;
					public setRange(param0: number, param1: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public getCap(): com.telerik.widget.indicators.GaugeBarIndicatorCapMode;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public setBarWidth(param0: number): void;
					public onSaveInstanceState(): androidosParcelable;
					public getAnimationStartValue(): number;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public startAnimation(param0: androidviewanimationAnimation): void;
					public sendAccessibilityEvent(param0: number): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public getLocation(): number;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public getMinimum(): number;
					public setupValueAnimator(): void;
					public setMinimum(param0: number): void;
					public setLocation(param0: number): void;
					public startAnimation(): void;
					public setCap(param0: com.telerik.widget.indicators.GaugeBarIndicatorCapMode): void;
					public init(): void;
					public initWithXml(param0: androidcontentresTypedArray): void;
					public setMaximum(param0: number): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public getMaximum(): number;
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public setAnimationStartValue(param0: number): void;
					public constructor(param0: androidcontentContext);
				}
				export module GaugeBarIndicator {
					export class SavedState extends androidviewViewBaseSavedState {
						public static CREATOR: androidosParcelableCreator<any>;
						public describeContents(): number;
						public writeToParcel(param0: androidosParcel, param1: number): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module indicators {
				export class GaugeBarIndicatorCapMode extends javalangEnum<any> {
					public static ROUND: com.telerik.widget.indicators.GaugeBarIndicatorCapMode;
					public static EDGE: com.telerik.widget.indicators.GaugeBarIndicatorCapMode;
					public static valueOf(param0: string): com.telerik.widget.indicators.GaugeBarIndicatorCapMode;
					public static values(): native.Array<com.telerik.widget.indicators.GaugeBarIndicatorCapMode>;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

import androidanimationTimeInterpolator = android.animation.TimeInterpolator;
import androidanimationValueAnimator = android.animation.ValueAnimator;
/// <reference path="./android.animation.TimeInterpolator.d.ts" />
/// <reference path="./android.animation.ValueAnimator.d.ts" />
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.TypedArray.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.view.animation.Animation.d.ts" />
/// <reference path="./com.telerik.widget.indicators.GaugeIndicator.d.ts" />
/// <reference path="./com.telerik.widget.scales.GaugeScale.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module indicators {
				export abstract class GaugeIndicator extends androidviewView {
					public scale: com.telerik.widget.scales.GaugeScale;
					public strokePaint: androidgraphicsPaint;
					public strokeColor: number;
					public strokeWidth: number;
					public fillPaint: androidgraphicsPaint;
					public fillColor: number;
					public animated: boolean;
					public animationDuration: number;
					public animator: androidanimationValueAnimator;
					public interpolator: androidanimationTimeInterpolator;
					public renderSuspended: boolean;
					public onValueChangedListener: com.telerik.widget.indicators.GaugeIndicator.OnValueChangedListener;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public setAnimated(param0: boolean): void;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public isAnimated(): boolean;
					public getScale(): com.telerik.widget.scales.GaugeScale;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public startAnimation(param0: androidviewanimationAnimation): void;
					public setInterpolator(param0: androidanimationTimeInterpolator): void;
					public getOnValueChangedListener(): com.telerik.widget.indicators.GaugeIndicator.OnValueChangedListener;
					public sendAccessibilityEvent(param0: number): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public setScale(param0: com.telerik.widget.scales.GaugeScale): void;
					public getStrokeWidth(): number;
					public getInterpolator(): androidanimationTimeInterpolator;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public setFillPaint(param0: androidgraphicsPaint): void;
					public setupValueAnimator(): void;
					public startAnimation(): void;
					public setOnValueChangedListener(param0: com.telerik.widget.indicators.GaugeIndicator.OnValueChangedListener): void;
					public requestRender(): void;
					public init(): void;
					public initWithXml(param0: androidcontentresTypedArray): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public getAnimationDuration(): number;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public getStrokePaint(): androidgraphicsPaint;
					public getFillPaint(): androidgraphicsPaint;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public setStrokeColor(param0: number): void;
					public constructor(param0: androidcontentContext);
					public setAnimationDuration(param0: number): void;
					public setStrokePaint(param0: androidgraphicsPaint): void;
					public getStrokeColor(): number;
					public getFillColor(): number;
					public setFillColor(param0: number): void;
					public setStrokeWidth(param0: number): void;
				}
				export module GaugeIndicator {
					export class OnValueChangedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.indicators.GaugeIndicator$OnValueChangedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							valueChanged(param0: com.telerik.widget.indicators.GaugeIndicator): void;
						});
						public valueChanged(param0: com.telerik.widget.indicators.GaugeIndicator): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module indicators {
				export class GaugeRadialBarIndicator extends com.telerik.widget.indicators.GaugeBarIndicator {
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public onDraw(param0: androidgraphicsCanvas): void;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public init(): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public constructor(param0: androidcontentContext);
					public sendAccessibilityEvent(param0: number): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.TypedArray.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.view.animation.Animation.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module indicators {
				export class GaugeRadialNeedle extends com.telerik.widget.indicators.GaugeIndicator {
					public drawValue: number;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public getCircleRadius(): number;
					public setTopWidth(param0: number): void;
					public setCircleRadius(param0: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public onDraw(param0: androidgraphicsCanvas): void;
					public getLength(): number;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public getOffset(): number;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public getBottomWidth(): number;
					public getCircleInnerRadius(): number;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public onSaveInstanceState(): androidosParcelable;
					public getValue(): number;
					public setOffset(param0: number): void;
					public getAnimationStartValue(): number;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public startAnimation(param0: androidviewanimationAnimation): void;
					public setCircleStrokeColor(param0: number): void;
					public sendAccessibilityEvent(param0: number): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public setCircleFillPaint(param0: androidgraphicsPaint): void;
					public getCircleStrokeColor(): number;
					public setupValueAnimator(): void;
					public getTopWidth(): number;
					public startAnimation(): void;
					public getCircleFillPaint(): androidgraphicsPaint;
					public init(): void;
					public getCircleFillColor(): number;
					public initWithXml(param0: androidcontentresTypedArray): void;
					public setLength(param0: number): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public setCircleFillColor(param0: number): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getCircleStrokePaint(): androidgraphicsPaint;
					public setValue(param0: number): void;
					public setBottomWidth(param0: number): void;
					public setAnimationStartValue(param0: number): void;
					public setCircleStrokePaint(param0: androidgraphicsPaint): void;
					public constructor(param0: androidcontentContext);
					public setCircleInnerRadius(param0: number): void;
				}
				export module GaugeRadialNeedle {
					export class SavedState extends androidviewViewBaseSavedState {
						public static CREATOR: androidosParcelableCreator<any>;
						public describeContents(): number;
						public writeToParcel(param0: androidosParcel, param1: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class BuildConfig extends javalangObject {
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class CollapsedViewHolder extends com.telerik.widget.list.ListViewHolder {
					public constructor(param0: androidviewView);
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class CollapsibleGroupsBehavior extends com.telerik.widget.list.ListViewBehavior {
					public onTapUp(param0: androidviewMotionEvent): void;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public getExpandImageResource(): number;
					public changeIsGroupCollapsed(param0: javalangObject): void;
					public addListener(param0: com.telerik.widget.list.CollapsibleGroupsBehavior.CollapseGroupListener): void;
					public isGroupCollapsed(param0: javalangObject): boolean;
					public setCollapseImageResource(param0: number): void;
					public getCollapseImageResource(): number;
					public setExpandImageResource(param0: number): void;
					public onSaveInstanceState(param0: androidosParcelable): void;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public constructor();
					public expandAll(): void;
					public removeListener(param0: com.telerik.widget.list.CollapsibleGroupsBehavior.CollapseGroupListener): void;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public collapseAll(): void;
					public constructor(param0: number);
				}
				export module CollapsibleGroupsBehavior {
					export class CollapseGroupListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.CollapsibleGroupsBehavior$CollapseGroupListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onGroupCollapsed(param0: javalangObject): void;
							onGroupExpanded(param0: javalangObject): void;
						});
						public onGroupExpanded(param0: javalangObject): void;
						public onGroupCollapsed(param0: javalangObject): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class CurrentPositionChangeListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.list.CurrentPositionChangeListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onCurrentPositionChanged(param0: number, param1: number): void;
					});
					public onCurrentPositionChanged(param0: number, param1: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./any.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.support.v7.widget.helper.ItemTouchHelper.d.ts" />
/// <reference path="./android.support.v7.widget.helper.ItemTouchUIUtil.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export module helper {
					export class ItemTouchHelper extends android.support.v7.widget.RecyclerView.ItemDecoration implements android.support.v7.widget.RecyclerView.OnChildAttachStateChangeListener {
						public static UP: number;
						public static DOWN: number;
						public static LEFT: number;
						public static RIGHT: number;
						public static START: number;
						public static END: number;
						public static ACTION_STATE_IDLE: number;
						public static ACTION_STATE_SWIPE: number;
						public static ACTION_STATE_DRAG: number;
						public static ANIMATION_TYPE_SWIPE_SUCCESS: number;
						public static ANIMATION_TYPE_SWIPE_CANCEL: number;
						public static ANIMATION_TYPE_DRAG: number;
						public onDrawOver(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView, param2: android.support.v7.widget.RecyclerView.State): void;
						public constructor();
						public onDraw(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView): void;
						public getItemOffsets(param0: android.graphics.Rect, param1: android.view.View, param2: android.support.v7.widget.RecyclerView, param3: android.support.v7.widget.RecyclerView.State): void;
						public onDrawOver(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView): void;
						public onDraw(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView, param2: android.support.v7.widget.RecyclerView.State): void;
						public startDrag(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public getItemOffsets(param0: android.graphics.Rect, param1: number, param2: android.support.v7.widget.RecyclerView): void;
						public constructor(param0: android.support.v7.widget.helper.ItemTouchHelper.Callback);
						public startSwipe(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public onChildViewAttachedToWindow(param0: android.view.View): void;
						public attachToRecyclerView(param0: android.support.v7.widget.RecyclerView): void;
						public onChildViewDetachedFromWindow(param0: android.view.View): void;
					}
					export module ItemTouchHelper {
						export abstract class Callback extends javalangObject {
							public static DEFAULT_DRAG_ANIMATION_DURATION: number;
							public static DEFAULT_SWIPE_ANIMATION_DURATION: number;
							public getAnimationDuration(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number, param3: number): number;
							public interpolateOutOfBoundsScroll(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number, param3: number, param4: number): number;
							public static makeMovementFlags(param0: number, param1: number): number;
							public getSwipeVelocityThreshold(param0: number): number;
							public getMovementFlags(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.ViewHolder): number;
							public onChildDraw(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView, param2: android.support.v7.widget.RecyclerView.ViewHolder, param3: number, param4: number, param5: number, param6: boolean): void;
							public chooseDropTarget(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: javautilList<any>, param2: number, param3: number): android.support.v7.widget.RecyclerView.ViewHolder;
							public getSwipeEscapeVelocity(param0: number): number;
							public isItemViewSwipeEnabled(): boolean;
							public clearView(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.ViewHolder): void;
							public getMoveThreshold(param0: android.support.v7.widget.RecyclerView.ViewHolder): number;
							public constructor();
							public onSelectedChanged(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: number): void;
							public onSwiped(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: number): void;
							public static getDefaultUIUtil(): any;
							public static makeFlag(param0: number, param1: number): number;
							public getBoundingBoxMargin(): number;
							public canDropOver(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.ViewHolder, param2: android.support.v7.widget.RecyclerView.ViewHolder): boolean;
							public convertToAbsoluteDirection(param0: number, param1: number): number;
							public onMoved(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.ViewHolder, param2: number, param3: android.support.v7.widget.RecyclerView.ViewHolder, param4: number, param5: number, param6: number): void;
							public onChildDrawOver(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView, param2: android.support.v7.widget.RecyclerView.ViewHolder, param3: number, param4: number, param5: number, param6: boolean): void;
							public onMove(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.ViewHolder, param2: android.support.v7.widget.RecyclerView.ViewHolder): boolean;
							public getSwipeThreshold(param0: android.support.v7.widget.RecyclerView.ViewHolder): number;
							public static convertToRelativeDirection(param0: number, param1: number): number;
							public isLongPressDragEnabled(): boolean;
						}
						export class ItemTouchHelperGestureListener extends android.view.GestureDetector.SimpleOnGestureListener {
							public onFling(param0: android.view.MotionEvent, param1: android.view.MotionEvent, param2: number, param3: number): boolean;
							public onDoubleTapEvent(param0: android.view.MotionEvent): boolean;
							public onContextClick(param0: android.view.MotionEvent): boolean;
							public onSingleTapUp(param0: android.view.MotionEvent): boolean;
							public onScroll(param0: android.view.MotionEvent, param1: android.view.MotionEvent, param2: number, param3: number): boolean;
							public onSingleTapConfirmed(param0: android.view.MotionEvent): boolean;
							public onDoubleTap(param0: android.view.MotionEvent): boolean;
							public onShowPress(param0: android.view.MotionEvent): void;
							public onLongPress(param0: android.view.MotionEvent): void;
							public onDown(param0: android.view.MotionEvent): boolean;
						}
						export class RecoverAnimation extends javalangObject {
							public mIsPendingCleanup: boolean;
							public cancel(): void;
							public onAnimationCancel(param0: any): void;
							public setFraction(param0: number): void;
							public setDuration(param0: number): void;
							public onAnimationStart(param0: any): void;
							public start(): void;
							public constructor(param0: android.support.v7.widget.helper.ItemTouchHelper, param1: android.support.v7.widget.RecyclerView.ViewHolder, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number);
							public onAnimationRepeat(param0: any): void;
							public onAnimationEnd(param0: any): void;
							public update(): void;
						}
						export abstract class SimpleCallback extends android.support.v7.widget.helper.ItemTouchHelper.Callback {
							public constructor();
							public constructor(param0: number, param1: number);
							public getSwipeDirs(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.ViewHolder): number;
							public getMovementFlags(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.ViewHolder): number;
							public getDragDirs(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.ViewHolder): number;
							public setDefaultSwipeDirs(param0: number): void;
							public setDefaultDragDirs(param0: number): void;
						}
						export class ViewDropHandler extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.v7.widget.helper.ItemTouchHelper$ViewDropHandler interface with the provided implementation.
							 */
							public constructor(implementation: {
								prepareForDrop(param0: android.view.View, param1: android.view.View, param2: number, param3: number): void;
							});
							public prepareForDrop(param0: android.view.View, param1: android.view.View, param2: number, param3: number): void;
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class StaggeredGridLayoutManager extends android.support.v7.widget.RecyclerView.LayoutManager {
					public static TAG: string;
					public static HORIZONTAL: number;
					public static VERTICAL: number;
					public static GAP_HANDLING_NONE: number;
					public static GAP_HANDLING_LAZY: number;
					public static GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS: number;
					public setMeasuredDimension(param0: number, param1: number): void;
					public findLastCompletelyVisibleItemPositions(param0: native.Array<number>): native.Array<number>;
					public computeVerticalScrollOffset(param0: android.support.v7.widget.RecyclerView.State): number;
					public onItemsChanged(param0: android.support.v7.widget.RecyclerView): void;
					public onItemsUpdated(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
					public invalidateSpanAssignments(): void;
					public computeHorizontalScrollRange(param0: android.support.v7.widget.RecyclerView.State): number;
					public supportsPredictiveItemAnimations(): boolean;
					public checkLayoutParams(param0: android.support.v7.widget.RecyclerView.LayoutParams): boolean;
					public setReverseLayout(param0: boolean): void;
					public scrollToPositionWithOffset(param0: number, param1: number): void;
					public findFirstCompletelyVisibleItemPositions(param0: native.Array<number>): native.Array<number>;
					public scrollToPosition(param0: number): void;
					public onItemsAdded(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
					public scrollVerticallyBy(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler, param2: android.support.v7.widget.RecyclerView.State): number;
					public constructor();
					public getRowCountForAccessibility(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): number;
					public computeHorizontalScrollOffset(param0: android.support.v7.widget.RecyclerView.State): number;
					public getOrientation(): number;
					public constructor(param0: number, param1: number);
					public canScrollVertically(): boolean;
					public onScrollStateChanged(param0: number): void;
					public offsetChildrenHorizontal(param0: number): void;
					public getSpanCount(): number;
					public onFocusSearchFailed(param0: android.view.View, param1: number, param2: android.support.v7.widget.RecyclerView.Recycler, param3: android.support.v7.widget.RecyclerView.State): android.view.View;
					public generateDefaultLayoutParams(): android.support.v7.widget.RecyclerView.LayoutParams;
					public setOrientation(param0: number): void;
					public findFirstVisibleItemPositions(param0: native.Array<number>): native.Array<number>;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public setGapStrategy(param0: number): void;
					public getGapStrategy(): number;
					public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.support.v7.widget.RecyclerView.LayoutParams;
					public onItemsRemoved(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
					public canScrollHorizontally(): boolean;
					public offsetChildrenVertical(param0: number): void;
					public onDetachedFromWindow(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.Recycler): void;
					public onSaveInstanceState(): android.os.Parcelable;
					public onInitializeAccessibilityEvent(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: android.view.accessibility.AccessibilityEvent): void;
					public computeHorizontalScrollExtent(param0: android.support.v7.widget.RecyclerView.State): number;
					public onItemsMoved(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number, param3: number): void;
					public onInitializeAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): void;
					public assertNotInLayoutOrScroll(param0: string): void;
					public getReverseLayout(): boolean;
					public onInitializeAccessibilityNodeInfoForItem(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: android.view.View, param3: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat): void;
					public scrollHorizontallyBy(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler, param2: android.support.v7.widget.RecyclerView.State): number;
					public computeVerticalScrollRange(param0: android.support.v7.widget.RecyclerView.State): number;
					public setSpanCount(param0: number): void;
					public smoothScrollToPosition(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.State, param2: number): void;
					public onDetachedFromWindow(param0: android.support.v7.widget.RecyclerView): void;
					public onRestoreInstanceState(param0: android.os.Parcelable): void;
					public generateLayoutParams(param0: android.content.Context, param1: android.util.AttributeSet): android.support.v7.widget.RecyclerView.LayoutParams;
					public setMeasuredDimension(param0: android.graphics.Rect, param1: number, param2: number): void;
					public computeVerticalScrollExtent(param0: android.support.v7.widget.RecyclerView.State): number;
					public getColumnCountForAccessibility(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): number;
					public onItemsUpdated(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number, param3: javalangObject): void;
					public onLayoutChildren(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): void;
					public findLastVisibleItemPositions(param0: native.Array<number>): native.Array<number>;
				}
				export module StaggeredGridLayoutManager {
					export class AnchorInfo extends javalangObject {
					}
					export class LayoutParams extends android.support.v7.widget.RecyclerView.LayoutParams {
						public static INVALID_SPAN_ID: number;
						public constructor(param0: android.view.ViewGroup.MarginLayoutParams);
						public constructor(param0: android.view.ViewGroup.LayoutParams);
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public isFullSpan(): boolean;
						public getSpanIndex(): number;
						public constructor(param0: android.support.v7.widget.RecyclerView.LayoutParams);
						public constructor(param0: number, param1: number);
						public setFullSpan(param0: boolean): void;
					}
					export class LazySpanLookup extends javalangObject {
						public addFullSpanItem(param0: android.support.v7.widget.StaggeredGridLayoutManager.LazySpanLookup.FullSpanItem): void;
						public getFirstFullSpanItemInRange(param0: number, param1: number, param2: number, param3: boolean): android.support.v7.widget.StaggeredGridLayoutManager.LazySpanLookup.FullSpanItem;
						public getFullSpanItem(param0: number): android.support.v7.widget.StaggeredGridLayoutManager.LazySpanLookup.FullSpanItem;
					}
					export module LazySpanLookup {
						export class FullSpanItem extends javalangObject implements android.os.Parcelable {
							public static CREATOR: android.os.Parcelable.Creator<any>;
							public constructor();
							public describeContents(): number;
							public toString(): string;
							public writeToParcel(param0: android.os.Parcel, param1: number): void;
							public constructor(param0: android.os.Parcel);
						}
					}
					export class SavedState extends javalangObject implements android.os.Parcelable {
						public static CREATOR: android.os.Parcelable.Creator<any>;
						public constructor();
						public describeContents(): number;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public constructor(param0: android.support.v7.widget.StaggeredGridLayoutManager.SavedState);
					}
					export class Span extends javalangObject {
						public getFocusableViewAfter(param0: number, param1: number): android.view.View;
						public findLastCompletelyVisibleItemPosition(): number;
						public findFirstCompletelyVisibleItemPosition(): number;
						public getDeletedSize(): number;
						public findFirstVisibleItemPosition(): number;
						public findLastVisibleItemPosition(): number;
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.design.widget.ValueAnimatorCompat.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
declare module android {
	export module support {
		export module design {
			export module widget {
				export class ValueAnimatorCompat extends javalangObject {
					public setUpdateListener(param0: android.support.design.widget.ValueAnimatorCompat.AnimatorUpdateListener): void;
					public setFloatValues(param0: number, param1: number): void;
					public getAnimatedFraction(): number;
					public setInterpolator(param0: android.view.animation.Interpolator): void;
					public cancel(): void;
					public setDuration(param0: number): void;
					public start(): void;
					public setIntValues(param0: number, param1: number): void;
					public getAnimatedFloatValue(): number;
					public end(): void;
					public getDuration(): number;
					public getAnimatedIntValue(): number;
					public setListener(param0: android.support.design.widget.ValueAnimatorCompat.AnimatorListener): void;
					public isRunning(): boolean;
				}
				export module ValueAnimatorCompat {
					export class AnimatorListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.design.widget.ValueAnimatorCompat$AnimatorListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onAnimationStart(param0: android.support.design.widget.ValueAnimatorCompat): void;
							onAnimationEnd(param0: android.support.design.widget.ValueAnimatorCompat): void;
							onAnimationCancel(param0: android.support.design.widget.ValueAnimatorCompat): void;
						});
						public onAnimationStart(param0: android.support.design.widget.ValueAnimatorCompat): void;
						public onAnimationEnd(param0: android.support.design.widget.ValueAnimatorCompat): void;
						public onAnimationCancel(param0: android.support.design.widget.ValueAnimatorCompat): void;
					}
					export class AnimatorListenerAdapter extends javalangObject implements android.support.design.widget.ValueAnimatorCompat.AnimatorListener {
						public onAnimationStart(param0: android.support.design.widget.ValueAnimatorCompat): void;
						public onAnimationEnd(param0: android.support.design.widget.ValueAnimatorCompat): void;
						public onAnimationCancel(param0: android.support.design.widget.ValueAnimatorCompat): void;
					}
					export class AnimatorUpdateListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.design.widget.ValueAnimatorCompat$AnimatorUpdateListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onAnimationUpdate(param0: android.support.design.widget.ValueAnimatorCompat): void;
						});
						public onAnimationUpdate(param0: android.support.design.widget.ValueAnimatorCompat): void;
					}
					export class Creator extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.design.widget.ValueAnimatorCompat$Creator interface with the provided implementation.
						 */
						public constructor(implementation: {
							createAnimator(): android.support.design.widget.ValueAnimatorCompat;
						});
						public createAnimator(): android.support.design.widget.ValueAnimatorCompat;
					}
					export abstract class Impl extends javalangObject {
					}
					export module Impl {
						export class AnimatorListenerProxy extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.design.widget.ValueAnimatorCompat$Impl$AnimatorListenerProxy interface with the provided implementation.
							 */
							public constructor(implementation: {
								onAnimationStart(): void;
								onAnimationEnd(): void;
								onAnimationCancel(): void;
							});
							public onAnimationEnd(): void;
							public onAnimationCancel(): void;
							public onAnimationStart(): void;
						}
						export class AnimatorUpdateListenerProxy extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.design.widget.ValueAnimatorCompat$Impl$AnimatorUpdateListenerProxy interface with the provided implementation.
							 */
							public constructor(implementation: {
								onAnimationUpdate(): void;
							});
							public onAnimationUpdate(): void;
						}
					}
				}
			}
		}
	}


}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class GridLayoutManager extends android.support.v7.widget.LinearLayoutManager {
					public static DEFAULT_SPAN_COUNT: number;
					public setMeasuredDimension(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: number);
					public onItemsChanged(param0: android.support.v7.widget.RecyclerView): void;
					public onItemsUpdated(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
					public onItemsMoved(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number, param3: number): void;
					public setSpanSizeLookup(param0: android.support.v7.widget.GridLayoutManager.SpanSizeLookup): void;
					public supportsPredictiveItemAnimations(): boolean;
					public checkLayoutParams(param0: android.support.v7.widget.RecyclerView.LayoutParams): boolean;
					public constructor(param0: android.content.Context, param1: number, param2: number, param3: boolean);
					public onItemsAdded(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
					public scrollVerticallyBy(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler, param2: android.support.v7.widget.RecyclerView.State): number;
					public onInitializeAccessibilityNodeInfoForItem(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: android.view.View, param3: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat): void;
					public scrollHorizontallyBy(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler, param2: android.support.v7.widget.RecyclerView.State): number;
					public constructor();
					public getRowCountForAccessibility(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): number;
					public prepareForDrop(param0: android.view.View, param1: android.view.View, param2: number, param3: number): void;
					public setSpanCount(param0: number): void;
					public setStackFromEnd(param0: boolean): void;
					public getSpanCount(): number;
					public onFocusSearchFailed(param0: android.view.View, param1: number, param2: android.support.v7.widget.RecyclerView.Recycler, param3: android.support.v7.widget.RecyclerView.State): android.view.View;
					public constructor(param0: android.content.Context, param1: number, param2: boolean);
					public generateDefaultLayoutParams(): android.support.v7.widget.RecyclerView.LayoutParams;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public generateLayoutParams(param0: android.content.Context, param1: android.util.AttributeSet): android.support.v7.widget.RecyclerView.LayoutParams;
					public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.support.v7.widget.RecyclerView.LayoutParams;
					public setMeasuredDimension(param0: android.graphics.Rect, param1: number, param2: number): void;
					public onItemsRemoved(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
					public constructor(param0: android.content.Context);
					public getSpanSizeLookup(): android.support.v7.widget.GridLayoutManager.SpanSizeLookup;
					public getColumnCountForAccessibility(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): number;
					public onItemsUpdated(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number, param3: javalangObject): void;
					public onLayoutChildren(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): void;
				}
				export module GridLayoutManager {
					export class DefaultSpanSizeLookup extends android.support.v7.widget.GridLayoutManager.SpanSizeLookup {
						public getSpanIndex(param0: number, param1: number): number;
						public getSpanSize(param0: number): number;
						public constructor();
					}
					export class LayoutParams extends android.support.v7.widget.RecyclerView.LayoutParams {
						public static INVALID_SPAN_ID: number;
						public constructor(param0: android.view.ViewGroup.MarginLayoutParams);
						public constructor(param0: android.view.ViewGroup.LayoutParams);
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public getSpanIndex(): number;
						public getSpanSize(): number;
						public constructor(param0: android.support.v7.widget.RecyclerView.LayoutParams);
						public constructor(param0: number, param1: number);
					}
					export abstract class SpanSizeLookup extends javalangObject {
						public getSpanIndex(param0: number, param1: number): number;
						public getSpanSize(param0: number): number;
						public constructor();
						public invalidateSpanIndexCache(): void;
						public setSpanIndexCacheEnabled(param0: boolean): void;
						public getSpanGroupIndex(param0: number, param1: number): number;
						public isSpanIndexCacheEnabled(): boolean;
					}
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class LayoutState extends javalangObject {
					public toString(): string;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class LinearLayoutManager extends android.support.v7.widget.RecyclerView.LayoutManager implements android.support.v7.widget.helper.ItemTouchHelper.ViewDropHandler {
					public static HORIZONTAL: number;
					public static VERTICAL: number;
					public static INVALID_OFFSET: number;
					public onInitializeAccessibilityEvent(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: android.view.accessibility.AccessibilityEvent): void;
					public computeVerticalScrollOffset(param0: android.support.v7.widget.RecyclerView.State): number;
					public computeHorizontalScrollExtent(param0: android.support.v7.widget.RecyclerView.State): number;
					public computeScrollVectorForPosition(param0: number): android.graphics.PointF;
					public findLastCompletelyVisibleItemPosition(): number;
					public onInitializeAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): void;
					public computeHorizontalScrollRange(param0: android.support.v7.widget.RecyclerView.State): number;
					public assertNotInLayoutOrScroll(param0: string): void;
					public getReverseLayout(): boolean;
					public supportsPredictiveItemAnimations(): boolean;
					public setReverseLayout(param0: boolean): void;
					public scrollToPositionWithOffset(param0: number, param1: number): void;
					public setRecycleChildrenOnDetach(param0: boolean): void;
					public scrollToPosition(param0: number): void;
					public setSmoothScrollbarEnabled(param0: boolean): void;
					public scrollVerticallyBy(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler, param2: android.support.v7.widget.RecyclerView.State): number;
					public scrollHorizontallyBy(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler, param2: android.support.v7.widget.RecyclerView.State): number;
					public findLastVisibleItemPosition(): number;
					public getStackFromEnd(): boolean;
					public computeVerticalScrollRange(param0: android.support.v7.widget.RecyclerView.State): number;
					public constructor();
					public findFirstCompletelyVisibleItemPosition(): number;
					public prepareForDrop(param0: android.view.View, param1: android.view.View, param2: number, param3: number): void;
					public getRecycleChildrenOnDetach(): boolean;
					public findViewByPosition(param0: number): android.view.View;
					public computeHorizontalScrollOffset(param0: android.support.v7.widget.RecyclerView.State): number;
					public setStackFromEnd(param0: boolean): void;
					public smoothScrollToPosition(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.State, param2: number): void;
					public getOrientation(): number;
					public onDetachedFromWindow(param0: android.support.v7.widget.RecyclerView): void;
					public canScrollVertically(): boolean;
					public isLayoutRTL(): boolean;
					public getExtraLayoutSpace(param0: android.support.v7.widget.RecyclerView.State): number;
					public onFocusSearchFailed(param0: android.view.View, param1: number, param2: android.support.v7.widget.RecyclerView.Recycler, param3: android.support.v7.widget.RecyclerView.State): android.view.View;
					public constructor(param0: android.content.Context, param1: number, param2: boolean);
					public generateDefaultLayoutParams(): android.support.v7.widget.RecyclerView.LayoutParams;
					public onRestoreInstanceState(param0: android.os.Parcelable): void;
					public setOrientation(param0: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public isSmoothScrollbarEnabled(): boolean;
					public findFirstVisibleItemPosition(): number;
					public canScrollHorizontally(): boolean;
					public constructor(param0: android.content.Context);
					public computeVerticalScrollExtent(param0: android.support.v7.widget.RecyclerView.State): number;
					public onDetachedFromWindow(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.Recycler): void;
					public onLayoutChildren(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): void;
					public onSaveInstanceState(): android.os.Parcelable;
				}
				export module LinearLayoutManager {
					export class AnchorInfo extends javalangObject {
						public assignFromViewAndKeepVisibleRect(param0: android.view.View): void;
						public assignFromView(param0: android.view.View): void;
						public toString(): string;
					}
					export class LayoutChunkResult extends javalangObject {
						public mConsumed: number;
						public mFinished: boolean;
						public mIgnoreConsumed: boolean;
						public mFocusable: boolean;
						public constructor();
					}
					export class LayoutState extends javalangObject {
						public nextViewInLimitedList(param0: android.view.View): android.view.View;
						public assignPositionFromScrapList(): void;
						public assignPositionFromScrapList(param0: android.view.View): void;
					}
					export class SavedState extends javalangObject implements android.os.Parcelable {
						public static CREATOR: android.os.Parcelable.Creator<any>;
						public constructor();
						public describeContents(): number;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
						public constructor(param0: android.support.v7.widget.LinearLayoutManager.SavedState);
					}
				}
			}
		}
	}
}

import androidsupportv7widgetRecyclerViewLayoutParams = android.support.v7.widget.RecyclerView.LayoutParams;
import androidsupportv7widgetRecyclerView = android.support.v7.widget.RecyclerView;
import androidsupportv7widgetRecyclerViewState = android.support.v7.widget.RecyclerView.State;
import androidsupportv7widgetRecyclerViewRecycler = android.support.v7.widget.RecyclerView.Recycler;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.list.PerspectiveChangeInfo.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class DeckOfCardsLayoutManager extends com.telerik.widget.list.SlideLayoutManagerBase {
					public static HORIZONTAL: number;
					public static VERTICAL: number;
					public setPerspectiveItemsCount(param0: number): void;
					public constructor(param0: androidcontentContext, param1: number, param2: boolean);
					public computeVerticalScrollOffset(param0: androidsupportv7widgetRecyclerViewState): number;
					public scaleXForIndex(param0: number): number;
					public alphaForIndex(param0: number): number;
					public isAutoDissolveFrontView(): boolean;
					public computeHorizontalScrollExtent(param0: androidsupportv7widgetRecyclerViewState): number;
					public elevationForIndex(param0: number): number;
					public canScroll(param0: number): boolean;
					public nextIndex(param0: number): number;
					public fill(param0: number, param1: androidsupportv7widgetRecyclerViewRecycler, param2: androidsupportv7widgetRecyclerViewState): void;
					public smoothScrollToPosition(param0: androidsupportv7widgetRecyclerView, param1: androidsupportv7widgetRecyclerViewState, param2: number): void;
					public scaleYForIndex(param0: number): number;
					public calculateFrontViewSize(): void;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public setAutoDissolveFrontView(param0: boolean): void;
					public onSaveInstanceState(): androidosParcelable;
					public constructor();
					public calculateScrollProgress(): number;
					public translationXForIndex(param0: number): number;
					public translationYForIndex(param0: number): number;
					public computeVerticalScrollRange(param0: androidsupportv7widgetRecyclerViewState): number;
					public computeScrollVectorForPosition(param0: number): androidgraphicsPointF;
					public getDirection(param0: number): number;
					public previousItemsCount(): number;
					public computeHorizontalScrollOffset(param0: androidsupportv7widgetRecyclerViewState): number;
					public handleItemRemoved(param0: number, param1: androidsupportv7widgetRecyclerViewRecycler, param2: androidsupportv7widgetRecyclerViewState): void;
					public layoutView(param0: androidviewView): void;
					public previousIndex(param0: number): number;
					public generateDefaultLayoutParams(): androidsupportv7widgetRecyclerViewLayoutParams;
					public animationDuration(): number;
					public layoutIndexForAdapterPosition(param0: number): number;
					public computeVerticalScrollExtent(param0: androidsupportv7widgetRecyclerViewState): number;
					public nextItemsCount(): number;
					public computeHorizontalScrollRange(param0: androidsupportv7widgetRecyclerViewState): number;
					public constructor(param0: androidcontentContext);
					public perspective(): com.telerik.widget.list.PerspectiveChangeInfo;
					public getPerspectiveItemsCount(): number;
					public adapterPositionForLayoutIndex(param0: number): number;
				}
			}
		}
	}
}

import androidsupportv7widgetRecyclerViewViewHolder = android.support.v7.widget.RecyclerView.ViewHolder;
/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class FadeItemAnimator extends com.telerik.widget.list.ListViewItemAnimator {
					public getAlpha(): number;
					public constructor();
					public addAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): androidsupportv4viewViewPropertyAnimatorCompat;
					public animateViewAddedPrepare(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAnimationAddCancelled(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public removeAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): androidsupportv4viewViewPropertyAnimatorCompat;
					public onAnimationAddEnded(param0: androidsupportv4viewViewPropertyAnimatorCompat, param1: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAnimationRemoveEnded(param0: androidsupportv4viewViewPropertyAnimatorCompat, param1: androidsupportv7widgetRecyclerViewViewHolder): void;
					public setAlpha(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.list.ListViewItemAnimator.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ItemAnimatorSet extends com.telerik.widget.list.ListViewItemAnimator {
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public constructor();
					public removeAnimator(param0: com.telerik.widget.list.ListViewItemAnimator): void;
					public clearAnimators(): void;
					public animateViewAddedImpl(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public animateViewRemovedImpl(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public animateViewAddedPrepare(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public endAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public addAnimator(param0: com.telerik.widget.list.ListViewItemAnimator): void;
				}
			}
		}
	}
}

import androidgraphicsdrawableBitmapDrawable = android.graphics.drawable.BitmapDrawable;
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.drawable.BitmapDrawable.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ItemReorderBehavior extends com.telerik.widget.list.ListViewBehavior {
					public endReorder(param0: boolean): void;
					public removeListener(param0: com.telerik.widget.list.ItemReorderBehavior.ItemReorderListener): void;
					public onLongPress(param0: androidviewMotionEvent): void;
					public getScrollValue(): number;
					public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public setScrollValue(param0: number): void;
					public isInProgress(): boolean;
					public startReorder(param0: number, param1: number): void;
					public moveReorderImage(param0: number, param1: number, param2: number, param3: number): void;
					public constructor();
					public onDispatchDraw(param0: androidgraphicsCanvas): void;
					public onLongPressDragEnded(param0: boolean): boolean;
					public onLongPressDrag(param0: number, param1: number, param2: number, param3: number): void;
					public addListener(param0: com.telerik.widget.list.ItemReorderBehavior.ItemReorderListener): void;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public createReorderImage(param0: androidviewView): androidgraphicsdrawableBitmapDrawable;
				}
				export module ItemReorderBehavior {
					export class ItemReorderListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.ItemReorderBehavior$ItemReorderListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onReorderStarted(param0: number): void;
							onReorderItem(param0: number, param1: number): void;
							onReorderFinished(): void;
						});
						public onReorderFinished(): void;
						public onReorderStarted(param0: number): void;
						public onReorderItem(param0: number, param1: number): void;
					}
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v4 {
			export module view {
				export class ScrollingView extends javalangObject {
					/**
					 * Constructs a new instance of the android.support.v4.view.ScrollingView interface with the provided implementation.
					 */
					public constructor(implementation: {
						computeHorizontalScrollRange(): number;
						computeHorizontalScrollOffset(): number;
						computeHorizontalScrollExtent(): number;
						computeVerticalScrollRange(): number;
						computeVerticalScrollOffset(): number;
						computeVerticalScrollExtent(): number;
					});
					public computeVerticalScrollRange(): number;
					public computeVerticalScrollExtent(): number;
					public computeHorizontalScrollRange(): number;
					public computeHorizontalScrollExtent(): number;
					public computeHorizontalScrollOffset(): number;
					public computeVerticalScrollOffset(): number;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.PointF.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerViewAccessibilityDelegate.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.util.SparseArray.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class RecyclerView extends android.view.ViewGroup implements android.support.v4.view.ScrollingView, android.support.v4.view.NestedScrollingChild {
					public static HORIZONTAL: number;
					public static VERTICAL: number;
					public static NO_POSITION: number;
					public static NO_ID: number;
					public static INVALID_TYPE: number;
					public static TOUCH_SLOP_DEFAULT: number;
					public static TOUCH_SLOP_PAGING: number;
					public static SCROLL_STATE_IDLE: number;
					public static SCROLL_STATE_DRAGGING: number;
					public static SCROLL_STATE_SETTLING: number;
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public onDraw(param0: android.graphics.Canvas): void;
					public getChildDrawingOrder(param0: number, param1: number): number;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public addItemDecoration(param0: android.support.v7.widget.RecyclerView.ItemDecoration): void;
					public getChildAdapterPosition(param0: android.view.View): number;
					public scrollToPosition(param0: number): void;
					public isTextDirectionResolved(): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public removeItemDecoration(param0: android.support.v7.widget.RecyclerView.ItemDecoration): void;
					public onChildDetachedFromWindow(param0: android.view.View): void;
					public addView(param0: android.view.View, param1: number): void;
					public stopNestedScroll(): void;
					public computeHorizontalScrollExtent(): number;
					public getMinFlingVelocity(): number;
					public setAdapter(param0: android.support.v7.widget.RecyclerView.Adapter): void;
					public getAdapter(): android.support.v7.widget.RecyclerView.Adapter;
					public removeOnChildAttachStateChangeListener(param0: android.support.v7.widget.RecyclerView.OnChildAttachStateChangeListener): void;
					public onTouchEvent(param0: android.view.MotionEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public setRecycledViewPool(param0: android.support.v7.widget.RecyclerView.RecycledViewPool): void;
					public offsetChildrenHorizontal(param0: number): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public isComputingLayout(): boolean;
					public getLayoutDirection(): number;
					public addItemDecoration(param0: android.support.v7.widget.RecyclerView.ItemDecoration, param1: number): void;
					public getParentForAccessibility(): android.view.ViewParent;
					public onChildAttachedToWindow(param0: android.view.View): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public removeDetachedView(param0: android.view.View, param1: boolean): void;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public offsetChildrenVertical(param0: number): void;
					public dispatchNestedFling(param0: number, param1: number, param2: boolean): boolean;
					public childDrawableStateChanged(param0: android.view.View): void;
					public setScrollingTouchSlop(param0: number): void;
					public scrollTo(param0: number, param1: number): void;
					public onGenericMotionEvent(param0: android.view.MotionEvent): boolean;
					public focusSearch(param0: number): android.view.View;
					public getRecycledViewPool(): android.support.v7.widget.RecyclerView.RecycledViewPool;
					public onInterceptTouchEvent(param0: android.view.MotionEvent): boolean;
					public removeOnItemTouchListener(param0: android.support.v7.widget.RecyclerView.OnItemTouchListener): void;
					public isTextAlignmentResolved(): boolean;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public invalidateItemDecorations(): void;
					public isAnimating(): boolean;
					public getChildItemId(param0: android.view.View): number;
					public canResolveTextAlignment(): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public findViewHolderForLayoutPosition(param0: number): android.support.v7.widget.RecyclerView.ViewHolder;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public getChildPosition(param0: android.view.View): number;
					public getChildViewHolder(param0: android.view.View): android.support.v7.widget.RecyclerView.ViewHolder;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public addFocusables(param0: javautilArrayList<any>, param1: number, param2: number): void;
					public setNestedScrollingEnabled(param0: boolean): void;
					public generateDefaultLayoutParams(): android.view.ViewGroup.LayoutParams;
					public stopScroll(): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public hasPendingAdapterUpdates(): boolean;
					public onDetachedFromWindow(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public addFocusables(param0: javautilArrayList<any>, param1: number): void;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public getItemAnimator(): android.support.v7.widget.RecyclerView.ItemAnimator;
					public computeVerticalScrollRange(): number;
					public getTextAlignment(): number;
					public onRestoreInstanceState(param0: android.os.Parcelable): void;
					public onScrolled(param0: number, param1: number): void;
					public setItemAnimator(param0: android.support.v7.widget.RecyclerView.ItemAnimator): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public smoothScrollToPosition(param0: number): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public dispatchSaveInstanceState(param0: android.util.SparseArray<any>): void;
					public isNestedScrollingEnabled(): boolean;
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public checkLayoutParams(param0: android.view.ViewGroup.LayoutParams): boolean;
					public getChildLayoutPosition(param0: android.view.View): number;
					public dispatchNestedPreFling(param0: number, param1: number): boolean;
					public computeHorizontalScrollOffset(): number;
					public setHasFixedSize(param0: boolean): void;
					public findContainingViewHolder(param0: android.view.View): android.support.v7.widget.RecyclerView.ViewHolder;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public getScrollState(): number;
					public dispatchNestedPreScroll(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): boolean;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public computeHorizontalScrollRange(): number;
					public isLayoutRequested(): boolean;
					public onAttachedToWindow(): void;
					public clearChildFocus(param0: android.view.View): void;
					public setAccessibilityDelegateCompat(param0: android.support.v7.widget.RecyclerViewAccessibilityDelegate): void;
					public findViewHolderForItemId(param0: number): android.support.v7.widget.RecyclerView.ViewHolder;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public swapAdapter(param0: android.support.v7.widget.RecyclerView.Adapter, param1: boolean): void;
					public generateLayoutParams(param0: android.util.AttributeSet): android.view.ViewGroup.LayoutParams;
					public isLayoutDirectionResolved(): boolean;
					public setItemViewCacheSize(param0: number): void;
					public computeVerticalScrollExtent(): number;
					public setChildDrawingOrderCallback(param0: android.support.v7.widget.RecyclerView.ChildDrawingOrderCallback): void;
					public addOnChildAttachStateChangeListener(param0: android.support.v7.widget.RecyclerView.OnChildAttachStateChangeListener): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public bringChildToFront(param0: android.view.View): void;
					public onScrollStateChanged(param0: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public getCompatAccessibilityDelegate(): android.support.v7.widget.RecyclerViewAccessibilityDelegate;
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public getLayoutManager(): android.support.v7.widget.RecyclerView.LayoutManager;
					public computeVerticalScrollOffset(): number;
					public dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: native.Array<number>): boolean;
					public findContainingItemView(param0: android.view.View): android.view.View;
					public setLayoutFrozen(param0: boolean): void;
					public dispatchRestoreInstanceState(param0: android.util.SparseArray<any>): void;
					public clearOnChildAttachStateChangeListeners(): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public setLayoutManager(param0: android.support.v7.widget.RecyclerView.LayoutManager): void;
					public requestFitSystemWindows(): void;
					public findViewHolderForAdapterPosition(param0: number): android.support.v7.widget.RecyclerView.ViewHolder;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public onSaveInstanceState(): android.os.Parcelable;
					public isAttachedToWindow(): boolean;
					public requestTransparentRegion(param0: android.view.View): void;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public scrollBy(param0: number, param1: number): void;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public getBaseline(): number;
					public findChildViewUnder(param0: number, param1: number): android.view.View;
					public clearOnScrollListeners(): void;
					public addOnScrollListener(param0: android.support.v7.widget.RecyclerView.OnScrollListener): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public setClipToPadding(param0: boolean): void;
					public fling(param0: number, param1: number): boolean;
					public onStopNestedScroll(param0: android.view.View): void;
					public canResolveLayoutDirection(): boolean;
					public findViewHolderForPosition(param0: number): android.support.v7.widget.RecyclerView.ViewHolder;
					public removeView(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public hasFixedSize(): boolean;
					public isLayoutFrozen(): boolean;
					public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.view.ViewGroup.LayoutParams;
					public setOnScrollListener(param0: android.support.v7.widget.RecyclerView.OnScrollListener): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public onSizeChanged(param0: number, param1: number, param2: number, param3: number): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public getMaxFlingVelocity(): number;
					public focusableViewAvailable(param0: android.view.View): void;
					public setRecyclerListener(param0: android.support.v7.widget.RecyclerView.RecyclerListener): void;
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public smoothScrollBy(param0: number, param1: number): void;
					public drawChild(param0: android.graphics.Canvas, param1: android.view.View, param2: number): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
					public setViewCacheExtension(param0: android.support.v7.widget.RecyclerView.ViewCacheExtension): void;
					public addOnItemTouchListener(param0: android.support.v7.widget.RecyclerView.OnItemTouchListener): void;
					public startNestedScroll(param0: number): boolean;
					public hasNestedScrollingParent(): boolean;
					public removeOnScrollListener(param0: android.support.v7.widget.RecyclerView.OnScrollListener): void;
				}
				export module RecyclerView {
					export abstract class Adapter extends javalangObject {
						public notifyItemMoved(param0: number, param1: number): void;
						public setHasStableIds(param0: boolean): void;
						public unregisterAdapterDataObserver(param0: android.support.v7.widget.RecyclerView.AdapterDataObserver): void;
						public createViewHolder(param0: android.view.ViewGroup, param1: number): android.support.v7.widget.RecyclerView.ViewHolder;
						public hasStableIds(): boolean;
						public onCreateViewHolder(param0: android.view.ViewGroup, param1: number): android.support.v7.widget.RecyclerView.ViewHolder;
						public bindViewHolder(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: number): void;
						public onBindViewHolder(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: number, param2: javautilList<any>): void;
						public onFailedToRecycleView(param0: android.support.v7.widget.RecyclerView.ViewHolder): boolean;
						public getItemId(param0: number): number;
						public onViewRecycled(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public notifyItemChanged(param0: number): void;
						public notifyItemInserted(param0: number): void;
						public onAttachedToRecyclerView(param0: android.support.v7.widget.RecyclerView): void;
						public constructor();
						public hasObservers(): boolean;
						public onViewAttachedToWindow(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public onViewDetachedFromWindow(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public onBindViewHolder(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: number): void;
						public getItemViewType(param0: number): number;
						public notifyItemRangeChanged(param0: number, param1: number): void;
						public notifyItemRangeChanged(param0: number, param1: number, param2: javalangObject): void;
						public notifyItemRangeRemoved(param0: number, param1: number): void;
						public onDetachedFromRecyclerView(param0: android.support.v7.widget.RecyclerView): void;
						public notifyDataSetChanged(): void;
						public notifyItemRangeInserted(param0: number, param1: number): void;
						public getItemCount(): number;
						public notifyItemChanged(param0: number, param1: javalangObject): void;
						public notifyItemRemoved(param0: number): void;
						public registerAdapterDataObserver(param0: android.support.v7.widget.RecyclerView.AdapterDataObserver): void;
					}
					export class AdapterDataObservable extends android.database.Observable<any> {
						public notifyItemMoved(param0: number, param1: number): void;
						public hasObservers(): boolean;
						public notifyItemRangeInserted(param0: number, param1: number): void;
						public notifyItemRangeChanged(param0: number, param1: number): void;
						public notifyItemRangeChanged(param0: number, param1: number, param2: javalangObject): void;
						public notifyChanged(): void;
						public notifyItemRangeRemoved(param0: number, param1: number): void;
					}
					export abstract class AdapterDataObserver extends javalangObject {
						public onItemRangeChanged(param0: number, param1: number, param2: javalangObject): void;
						public constructor();
						public onChanged(): void;
						public onItemRangeMoved(param0: number, param1: number, param2: number): void;
						public onItemRangeChanged(param0: number, param1: number): void;
						public onItemRangeInserted(param0: number, param1: number): void;
						public onItemRangeRemoved(param0: number, param1: number): void;
					}
					export class ChildDrawingOrderCallback extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.RecyclerView$ChildDrawingOrderCallback interface with the provided implementation.
						 */
						public constructor(implementation: {
							onGetChildDrawingOrder(param0: number, param1: number): number;
						});
						public onGetChildDrawingOrder(param0: number, param1: number): number;
					}
					export abstract class ItemAnimator extends javalangObject {
						public static FLAG_CHANGED: number;
						public static FLAG_REMOVED: number;
						public static FLAG_INVALIDATED: number;
						public static FLAG_MOVED: number;
						public static FLAG_APPEARED_IN_PRE_LAYOUT: number;
						public setMoveDuration(param0: number): void;
						public animatePersistence(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo, param2: android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo): boolean;
						public dispatchAnimationStarted(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public getMoveDuration(): number;
						public endAnimations(): void;
						public animateAppearance(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo, param2: android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo): boolean;
						public isRunning(): boolean;
						public runPendingAnimations(): void;
						public animateDisappearance(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo, param2: android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo): boolean;
						public onAnimationFinished(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public getAddDuration(): number;
						public setAddDuration(param0: number): void;
						public canReuseUpdatedViewHolder(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: javautilList<any>): boolean;
						public setChangeDuration(param0: number): void;
						public recordPostLayoutInformation(param0: android.support.v7.widget.RecyclerView.State, param1: android.support.v7.widget.RecyclerView.ViewHolder): android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
						public recordPreLayoutInformation(param0: android.support.v7.widget.RecyclerView.State, param1: android.support.v7.widget.RecyclerView.ViewHolder, param2: number, param3: javautilList<any>): android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
						public dispatchAnimationsFinished(): void;
						public getChangeDuration(): number;
						public constructor();
						public obtainHolderInfo(): android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
						public dispatchAnimationFinished(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public canReuseUpdatedViewHolder(param0: android.support.v7.widget.RecyclerView.ViewHolder): boolean;
						public endAnimation(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public setRemoveDuration(param0: number): void;
						public animateChange(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: android.support.v7.widget.RecyclerView.ViewHolder, param2: android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo, param3: android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo): boolean;
						public onAnimationStarted(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public isRunning(param0: android.support.v7.widget.RecyclerView.ItemAnimator.ItemAnimatorFinishedListener): boolean;
						public getRemoveDuration(): number;
					}
					export module ItemAnimator {
						export class AdapterChanges extends javalangObject implements javalangannotationAnnotation {
							/**
							 * Constructs a new instance of the android.support.v7.widget.RecyclerView$ItemAnimator$AdapterChanges interface with the provided implementation.
							 */
							public constructor(implementation: {
								annotationType(): javalangClass<any>;
								equals(param0: javalangObject): boolean;
								hashCode(): number;
								toString(): string;
							});
							public annotationType(): javalangClass<any>;
							public hashCode(): number;
							public toString(): string;
							public equals(param0: javalangObject): boolean;
						}
						export class ItemAnimatorFinishedListener extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.v7.widget.RecyclerView$ItemAnimator$ItemAnimatorFinishedListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onAnimationsFinished(): void;
							});
							public onAnimationsFinished(): void;
						}
						export class ItemAnimatorListener extends javalangObject {
							/**
							 * Constructs a new instance of the android.support.v7.widget.RecyclerView$ItemAnimator$ItemAnimatorListener interface with the provided implementation.
							 */
							public constructor(implementation: {
								onAnimationFinished(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
							});
							public onAnimationFinished(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						}
						export class ItemHolderInfo extends javalangObject {
							public left: number;
							public top: number;
							public right: number;
							public bottom: number;
							public changeFlags: number;
							public constructor();
							public setFrom(param0: android.support.v7.widget.RecyclerView.ViewHolder, param1: number): android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
							public setFrom(param0: android.support.v7.widget.RecyclerView.ViewHolder): android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
						}
					}
					export class ItemAnimatorRestoreListener extends javalangObject implements android.support.v7.widget.RecyclerView.ItemAnimator.ItemAnimatorListener {
						public onAnimationFinished(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
					}
					export abstract class ItemDecoration extends javalangObject {
						public onDrawOver(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView, param2: android.support.v7.widget.RecyclerView.State): void;
						public constructor();
						public onDraw(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView): void;
						public getItemOffsets(param0: android.graphics.Rect, param1: android.view.View, param2: android.support.v7.widget.RecyclerView, param3: android.support.v7.widget.RecyclerView.State): void;
						public onDraw(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView, param2: android.support.v7.widget.RecyclerView.State): void;
						public onDrawOver(param0: android.graphics.Canvas, param1: android.support.v7.widget.RecyclerView): void;
						public getItemOffsets(param0: android.graphics.Rect, param1: number, param2: android.support.v7.widget.RecyclerView): void;
					}
					export abstract class LayoutManager extends javalangObject {
						public onMeasure(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: number, param3: number): void;
						public isLayoutHierarchical(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): boolean;
						public measureChildWithMargins(param0: android.view.View, param1: number, param2: number): void;
						public onItemsRemoved(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
						public getPaddingBottom(): number;
						public onSaveInstanceState(): android.os.Parcelable;
						public onInitializeAccessibilityNodeInfoForItem(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: android.view.View, param3: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat): void;
						public addView(param0: android.view.View): void;
						public computeVerticalScrollExtent(param0: android.support.v7.widget.RecyclerView.State): number;
						public getRowCountForAccessibility(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): number;
						public layoutDecorated(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						public generateDefaultLayoutParams(): android.support.v7.widget.RecyclerView.LayoutParams;
						public constructor();
						public onDetachedFromWindow(param0: android.support.v7.widget.RecyclerView): void;
						public postOnAnimation(param0: javalangRunnable): void;
						public isAutoMeasureEnabled(): boolean;
						public onItemsAdded(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
						public getDecoratedBottom(param0: android.view.View): number;
						public isSmoothScrolling(): boolean;
						public detachAndScrapAttachedViews(param0: android.support.v7.widget.RecyclerView.Recycler): void;
						public getFocusedChild(): android.view.View;
						public requestLayout(): void;
						public onItemsMoved(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number, param3: number): void;
						public attachView(param0: android.view.View, param1: number): void;
						public removeAndRecycleAllViews(param0: android.support.v7.widget.RecyclerView.Recycler): void;
						public static getChildMeasureSpec(param0: number, param1: number, param2: number, param3: boolean): number;
						public generateLayoutParams(param0: android.content.Context, param1: android.util.AttributeSet): android.support.v7.widget.RecyclerView.LayoutParams;
						public getPaddingTop(): number;
						public computeHorizontalScrollOffset(param0: android.support.v7.widget.RecyclerView.State): number;
						public onAddFocusables(param0: android.support.v7.widget.RecyclerView, param1: javautilArrayList<any>, param2: number, param3: number): boolean;
						public getMinimumWidth(): number;
						public removeViewAt(param0: number): void;
						public getPaddingLeft(): number;
						public setMeasuredDimension(param0: number, param1: number): void;
						public isFocused(): boolean;
						public onItemsUpdated(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number, param3: javalangObject): void;
						public getDecoratedLeft(param0: android.view.View): number;
						public scrollHorizontallyBy(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler, param2: android.support.v7.widget.RecyclerView.State): number;
						public isMeasurementCacheEnabled(): boolean;
						public removeAndRecycleViewAt(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler): void;
						public assertInLayoutOrScroll(param0: string): void;
						public performAccessibilityAction(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: number, param3: android.os.Bundle): boolean;
						public onItemsChanged(param0: android.support.v7.widget.RecyclerView): void;
						public canScrollVertically(): boolean;
						public onDetachedFromWindow(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.Recycler): void;
						public getChildCount(): number;
						public getRightDecorationWidth(param0: android.view.View): number;
						public getWidthMode(): number;
						public getHeight(): number;
						public calculateItemDecorationsForChild(param0: android.view.View, param1: android.graphics.Rect): void;
						public supportsPredictiveItemAnimations(): boolean;
						public removeAllViews(): void;
						public onScrollStateChanged(param0: number): void;
						public getItemCount(): number;
						public getColumnCountForAccessibility(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): number;
						public findContainingItemView(param0: android.view.View): android.view.View;
						public removeAndRecycleView(param0: android.view.View, param1: android.support.v7.widget.RecyclerView.Recycler): void;
						public requestChildRectangleOnScreen(param0: android.support.v7.widget.RecyclerView, param1: android.view.View, param2: android.graphics.Rect, param3: boolean): boolean;
						public startSmoothScroll(param0: android.support.v7.widget.RecyclerView.SmoothScroller): void;
						public getLayoutDirection(): number;
						public getPosition(param0: android.view.View): number;
						public checkLayoutParams(param0: android.support.v7.widget.RecyclerView.LayoutParams): boolean;
						public detachAndScrapViewAt(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler): void;
						public setMeasurementCacheEnabled(param0: boolean): void;
						public computeHorizontalScrollExtent(param0: android.support.v7.widget.RecyclerView.State): number;
						public getItemViewType(param0: android.view.View): number;
						public generateLayoutParams(param0: android.view.ViewGroup.LayoutParams): android.support.v7.widget.RecyclerView.LayoutParams;
						public getBaseline(): number;
						public getTopDecorationHeight(param0: android.view.View): number;
						public setAutoMeasureEnabled(param0: boolean): void;
						public removeCallbacks(param0: javalangRunnable): boolean;
						public onRequestChildFocus(param0: android.support.v7.widget.RecyclerView, param1: android.view.View, param2: android.view.View): boolean;
						public addDisappearingView(param0: android.view.View, param1: number): void;
						public onInitializeAccessibilityEvent(param0: android.view.accessibility.AccessibilityEvent): void;
						public getPaddingRight(): number;
						public getChildAt(param0: number): android.view.View;
						public ignoreView(param0: android.view.View): void;
						public onInitializeAccessibilityEvent(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: android.view.accessibility.AccessibilityEvent): void;
						public offsetChildrenHorizontal(param0: number): void;
						public onFocusSearchFailed(param0: android.view.View, param1: number, param2: android.support.v7.widget.RecyclerView.Recycler, param3: android.support.v7.widget.RecyclerView.State): android.view.View;
						public onAdapterChanged(param0: android.support.v7.widget.RecyclerView.Adapter, param1: android.support.v7.widget.RecyclerView.Adapter): void;
						public removeView(param0: android.view.View): void;
						public detachAndScrapView(param0: android.view.View, param1: android.support.v7.widget.RecyclerView.Recycler): void;
						public onInitializeAccessibilityNodeInfo(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat): void;
						public getPaddingEnd(): number;
						public onLayoutChildren(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): void;
						public computeVerticalScrollRange(param0: android.support.v7.widget.RecyclerView.State): number;
						public getClipToPadding(): boolean;
						public onRequestChildFocus(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.State, param2: android.view.View, param3: android.view.View): boolean;
						public attachView(param0: android.view.View, param1: number, param2: android.support.v7.widget.RecyclerView.LayoutParams): void;
						public static getChildMeasureSpec(param0: number, param1: number, param2: number, param3: number, param4: boolean): number;
						public isAttachedToWindow(): boolean;
						public addView(param0: android.view.View, param1: number): void;
						public attachView(param0: android.view.View): void;
						public setMeasuredDimension(param0: android.graphics.Rect, param1: number, param2: number): void;
						public removeDetachedView(param0: android.view.View): void;
						public endAnimation(param0: android.view.View): void;
						public offsetChildrenVertical(param0: number): void;
						public static getProperties(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number): android.support.v7.widget.RecyclerView.LayoutManager.Properties;
						public moveView(param0: number, param1: number): void;
						public getHeightMode(): number;
						public computeVerticalScrollOffset(param0: android.support.v7.widget.RecyclerView.State): number;
						public scrollToPosition(param0: number): void;
						public scrollVerticallyBy(param0: number, param1: android.support.v7.widget.RecyclerView.Recycler, param2: android.support.v7.widget.RecyclerView.State): number;
						public assertNotInLayoutOrScroll(param0: string): void;
						public getDecoratedTop(param0: android.view.View): number;
						public onInterceptFocusSearch(param0: android.view.View, param1: number): android.view.View;
						public requestSimpleAnimationsInNextLayout(): void;
						public smoothScrollToPosition(param0: android.support.v7.widget.RecyclerView, param1: android.support.v7.widget.RecyclerView.State, param2: number): void;
						public computeHorizontalScrollRange(param0: android.support.v7.widget.RecyclerView.State): number;
						public performAccessibilityActionForItem(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State, param2: android.view.View, param3: number, param4: android.os.Bundle): boolean;
						public onItemsUpdated(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
						public getSelectionModeForAccessibility(param0: android.support.v7.widget.RecyclerView.Recycler, param1: android.support.v7.widget.RecyclerView.State): number;
						public hasFocus(): boolean;
						public getMinimumHeight(): number;
						public detachView(param0: android.view.View): void;
						public stopIgnoringView(param0: android.view.View): void;
						public measureChild(param0: android.view.View, param1: number, param2: number): void;
						public getBottomDecorationHeight(param0: android.view.View): number;
						public onAttachedToWindow(param0: android.support.v7.widget.RecyclerView): void;
						public getDecoratedMeasuredHeight(param0: android.view.View): number;
						public canScrollHorizontally(): boolean;
						public detachViewAt(param0: number): void;
						public static chooseSize(param0: number, param1: number, param2: number): number;
						public getWidth(): number;
						public addDisappearingView(param0: android.view.View): void;
						public getPaddingStart(): number;
						public getDecoratedRight(param0: android.view.View): number;
						public getLeftDecorationWidth(param0: android.view.View): number;
						public getDecoratedMeasuredWidth(param0: android.view.View): number;
						public onRestoreInstanceState(param0: android.os.Parcelable): void;
						public findViewByPosition(param0: number): android.view.View;
					}
					export module LayoutManager {
						export class Properties extends javalangObject {
							public orientation: number;
							public spanCount: number;
							public reverseLayout: boolean;
							public stackFromEnd: boolean;
							public constructor();
						}
					}
					export class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
						public constructor(param0: android.view.ViewGroup.MarginLayoutParams);
						public isItemChanged(): boolean;
						public constructor(param0: android.view.ViewGroup.LayoutParams);
						public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
						public isItemRemoved(): boolean;
						public getViewPosition(): number;
						public getViewAdapterPosition(): number;
						public isViewInvalid(): boolean;
						public constructor(param0: android.support.v7.widget.RecyclerView.LayoutParams);
						public getViewLayoutPosition(): number;
						public viewNeedsUpdate(): boolean;
						public constructor(param0: number, param1: number);
					}
					export class OnChildAttachStateChangeListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.RecyclerView$OnChildAttachStateChangeListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onChildViewAttachedToWindow(param0: android.view.View): void;
							onChildViewDetachedFromWindow(param0: android.view.View): void;
						});
						public onChildViewAttachedToWindow(param0: android.view.View): void;
						public onChildViewDetachedFromWindow(param0: android.view.View): void;
					}
					export class OnItemTouchListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.RecyclerView$OnItemTouchListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onInterceptTouchEvent(param0: android.support.v7.widget.RecyclerView, param1: android.view.MotionEvent): boolean;
							onTouchEvent(param0: android.support.v7.widget.RecyclerView, param1: android.view.MotionEvent): void;
							onRequestDisallowInterceptTouchEvent(param0: boolean): void;
						});
						public onInterceptTouchEvent(param0: android.support.v7.widget.RecyclerView, param1: android.view.MotionEvent): boolean;
						public onTouchEvent(param0: android.support.v7.widget.RecyclerView, param1: android.view.MotionEvent): void;
						public onRequestDisallowInterceptTouchEvent(param0: boolean): void;
					}
					export abstract class OnScrollListener extends javalangObject {
						public constructor();
						public onScrolled(param0: android.support.v7.widget.RecyclerView, param1: number, param2: number): void;
						public onScrollStateChanged(param0: android.support.v7.widget.RecyclerView, param1: number): void;
					}
					export class RecycledViewPool extends javalangObject {
						public constructor();
						public putRecycledView(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						public clear(): void;
						public setMaxRecycledViews(param0: number, param1: number): void;
						public getRecycledView(param0: number): android.support.v7.widget.RecyclerView.ViewHolder;
					}
					export class Recycler extends javalangObject {
						public getViewForPosition(param0: number): android.view.View;
						public recycleView(param0: android.view.View): void;
						public constructor(param0: android.support.v7.widget.RecyclerView);
						public setViewCacheSize(param0: number): void;
						public getScrapList(): javautilList<any>;
						public clear(): void;
						public bindViewToPosition(param0: android.view.View, param1: number): void;
						public convertPreLayoutPositionToPostLayout(param0: number): number;
					}
					export class RecyclerListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v7.widget.RecyclerView$RecyclerListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onViewRecycled(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
						});
						public onViewRecycled(param0: android.support.v7.widget.RecyclerView.ViewHolder): void;
					}
					export class RecyclerViewDataObserver extends android.support.v7.widget.RecyclerView.AdapterDataObserver {
						public onItemRangeChanged(param0: number, param1: number, param2: javalangObject): void;
						public onChanged(): void;
						public onItemRangeMoved(param0: number, param1: number, param2: number): void;
						public onItemRangeChanged(param0: number, param1: number): void;
						public onItemRangeInserted(param0: number, param1: number): void;
						public onItemRangeRemoved(param0: number, param1: number): void;
					}
					export class SavedState extends android.view.View.BaseSavedState {
						public static CREATOR: android.os.Parcelable.Creator<any>;
						public describeContents(): number;
						public writeToParcel(param0: android.os.Parcel, param1: number): void;
					}
					export class SimpleOnItemTouchListener extends javalangObject implements android.support.v7.widget.RecyclerView.OnItemTouchListener {
						public constructor();
						public onInterceptTouchEvent(param0: android.support.v7.widget.RecyclerView, param1: android.view.MotionEvent): boolean;
						public onTouchEvent(param0: android.support.v7.widget.RecyclerView, param1: android.view.MotionEvent): void;
						public onRequestDisallowInterceptTouchEvent(param0: boolean): void;
					}
					export abstract class SmoothScroller extends javalangObject {
						public onTargetFound(param0: android.view.View, param1: android.support.v7.widget.RecyclerView.State, param2: android.support.v7.widget.RecyclerView.SmoothScroller.Action): void;
						public constructor();
						public getChildCount(): number;
						public getLayoutManager(): android.support.v7.widget.RecyclerView.LayoutManager;
						public onSeekTargetStep(param0: number, param1: number, param2: android.support.v7.widget.RecyclerView.State, param3: android.support.v7.widget.RecyclerView.SmoothScroller.Action): void;
						public onChildAttachedToWindow(param0: android.view.View): void;
						public stop(): void;
						public isRunning(): boolean;
						public onStop(): void;
						public setTargetPosition(param0: number): void;
						public getChildPosition(param0: android.view.View): number;
						public instantScrollToPosition(param0: number): void;
						public isPendingInitialRun(): boolean;
						public normalize(param0: android.graphics.PointF): void;
						public getTargetPosition(): number;
						public findViewByPosition(param0: number): android.view.View;
						public onStart(): void;
					}
					export module SmoothScroller {
						export class Action extends javalangObject {
							public static UNDEFINED_DURATION: number;
							public constructor(param0: number, param1: number);
							public setDuration(param0: number): void;
							public getInterpolator(): android.view.animation.Interpolator;
							public setDy(param0: number): void;
							public update(param0: number, param1: number, param2: number, param3: android.view.animation.Interpolator): void;
							public getDx(): number;
							public constructor(param0: number, param1: number, param2: number);
							public constructor(param0: number, param1: number, param2: number, param3: android.view.animation.Interpolator);
							public setDx(param0: number): void;
							public getDy(): number;
							public setInterpolator(param0: android.view.animation.Interpolator): void;
							public getDuration(): number;
							public jumpTo(param0: number): void;
						}
					}
					export class State extends javalangObject {
						public constructor();
						public isMeasuring(): boolean;
						public toString(): string;
						public getTargetScrollPosition(): number;
						public willRunPredictiveAnimations(): boolean;
						public get(param0: number): javalangObject;
						public hasTargetScrollPosition(): boolean;
						public willRunSimpleAnimations(): boolean;
						public getItemCount(): number;
						public didStructureChange(): boolean;
						public isPreLayout(): boolean;
						public remove(param0: number): void;
						public put(param0: number, param1: javalangObject): void;
					}
					export abstract class ViewCacheExtension extends javalangObject {
						public constructor();
						public getViewForPositionAndType(param0: android.support.v7.widget.RecyclerView.Recycler, param1: number, param2: number): android.view.View;
					}
					export class ViewFlinger extends javalangObject implements javalangRunnable {
						public smoothScrollBy(param0: number, param1: number, param2: number): void;
						public run(): void;
						public constructor(param0: android.support.v7.widget.RecyclerView);
						public smoothScrollBy(param0: number, param1: number, param2: number, param3: number): void;
						public smoothScrollBy(param0: number, param1: number): void;
						public smoothScrollBy(param0: number, param1: number, param2: number, param3: android.view.animation.Interpolator): void;
						public fling(param0: number, param1: number): void;
						public stop(): void;
					}
					export abstract class ViewHolder extends javalangObject {
						public itemView: android.view.View;
						public isRecyclable(): boolean;
						public getAdapterPosition(): number;
						public constructor(param0: android.view.View);
						public getItemViewType(): number;
						public setIsRecyclable(param0: boolean): void;
						public getPosition(): number;
						public getLayoutPosition(): number;
						public getOldPosition(): number;
						public toString(): string;
						public getItemId(): number;
					}
				}
			}
		}
	}
}


/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
declare module android {
	export module support {
		export module v7 {
			export module widget {
				export class RecyclerViewAccessibilityDelegate extends android.support.v4.view.AccessibilityDelegateCompat {
					public performAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public constructor();
					public onInitializeAccessibilityNodeInfo(param0: android.view.View, param1: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat): void;
					public constructor(param0: android.support.v7.widget.RecyclerView);
					public onInitializeAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): void;
				}
			}
		}
	}
}

/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewHolder.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ListViewAdapter extends androidsupportv7widgetRecyclerViewAdapter {
					public static ITEM_VIEW_TYPE_HEADER: number;
					public static ITEM_VIEW_TYPE_FOOTER: number;
					public static ITEM_VIEW_TYPE_TOP_INDICATOR: number;
					public static ITEM_VIEW_TYPE_BOTTOM_INDICATOR: number;
					public static ITEM_VIEW_TYPE_SWIPE_CONTENT: number;
					public static ITEM_VIEW_TYPE_EMPTY_CONTENT: number;
					public static ITEM_VIEW_TYPE_COLLAPSED: number;
					public static INVALID_ID: number;
					public constructor(param0: javautilList<any>);
					public getPosition(param0: javalangObject): number;
					public reorderItem(param0: number, param1: number): boolean;
					public notifySwipeExecuteFinished(): void;
					public remove(param0: javalangObject): boolean;
					public notifyRefreshFinished(): void;
					public onCreateSwipeContentHolder(param0: androidviewViewGroup): com.telerik.widget.list.ListViewHolder;
					public notifyLoadingFinished(): void;
					public canReorder(param0: number): boolean;
					public remove(param0: number): javalangObject;
					public getItemId(param0: javalangObject): number;
					public updateSwipeLayoutParams(param0: com.telerik.widget.list.ListViewHolder, param1: boolean): void;
					public canDeselect(param0: number): boolean;
					public add(param0: number, param1: javalangObject): void;
					public onCreateViewHolder(param0: androidviewViewGroup, param1: number): com.telerik.widget.list.ListViewHolder;
					public getItems(): javautilList<any>;
					public getItem(param0: number): javalangObject;
					public updateMainLayoutParams(param0: com.telerik.widget.list.ListViewHolder, param1: boolean): void;
					public onBindViewHolder(param0: com.telerik.widget.list.ListViewHolder, param1: number): void;
					public add(param0: javalangObject): void;
					public getPosition(param0: number): number;
					public canSelect(param0: number): boolean;
					public getItemCount(): number;
					public updateLayoutParams(param0: com.telerik.widget.list.ListViewHolder, param1: boolean): void;
					public onBindSwipeContentHolder(param0: com.telerik.widget.list.ListViewHolder, param1: number): void;
					public getItemId(param0: number): number;
					public setItems(param0: javautilList<any>): void;
					public canSwipe(param0: number): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewHolder.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ListViewBehavior extends javalangObject {
					public bindViewHolder(param0: com.telerik.widget.list.ListViewHolder, param1: number): void;
					public onTapUp(param0: androidviewMotionEvent): void;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public onLongPress(param0: androidviewMotionEvent): void;
					public onScrolled(param0: number, param1: number): void;
					public owner(): com.telerik.widget.list.RadListView;
					public createViewHolder(param0: androidviewViewGroup, param1: number): com.telerik.widget.list.ListViewHolder;
					public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public getItemViewType(param0: number, param1: number): number;
					public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
					public isInProgress(): boolean;
					public onSaveInstanceState(param0: androidosParcelable): void;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public onActionUpOrCancel(param0: boolean): boolean;
					public constructor();
					public onDispatchDraw(param0: androidgraphicsCanvas): void;
					public onLongPressDragEnded(param0: boolean): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public onLongPressDrag(param0: number, param1: number, param2: number, param3: number): void;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public managesViewHolders(): boolean;
					public onShortPressDrag(param0: number, param1: number, param2: number, param3: number): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.android.common.Function2.d.ts" />
/// <reference path="./com.telerik.android.data.DataChangeInfo.d.ts" />
/// <reference path="./com.telerik.android.data.DataItem.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewHolder.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ListViewDataSourceAdapter extends com.telerik.widget.list.ListViewAdapter implements com.telerik.android.data.DataChangedListener {
					public static ITEM_VIEW_TYPE_GROUP: number;
					public addSortDescriptor(param0: com.telerik.android.common.Function2): void;
					public remove(param0: javalangObject, param1: boolean): boolean;
					public onBindGroupViewHolder(param0: com.telerik.widget.list.ListViewHolder, param1: javalangObject): void;
					public constructor(param0: javautilList<any>);
					public getHeaderPosition(param0: number): number;
					public getDataItem(param0: number): com.telerik.android.data.DataItem;
					public getPosition(param0: javalangObject): number;
					public clearFilterDescriptors(): void;
					public reorderItem(param0: number, param1: number): boolean;
					public clearSortDescriptors(): void;
					public remove(param0: javalangObject): boolean;
					public invalidateDescriptors(): void;
					public getGroupViewType(param0: javalangObject): number;
					public onBindItemViewHolder(param0: com.telerik.widget.list.ListViewHolder, param1: javalangObject): void;
					public add(param0: number, param1: javalangObject, param2: boolean): void;
					public getItemViewType(param0: javalangObject): number;
					public getItemViewType(param0: number): number;
					public add(param0: javalangObject, param1: boolean): void;
					public canReorder(param0: number): boolean;
					public remove(param0: number): javalangObject;
					public dataChanged(param0: com.telerik.android.data.DataChangeInfo): void;
					public getItemId(param0: javalangObject): number;
					public addGroupDescriptor(param0: com.telerik.android.common.Function): void;
					public add(param0: number, param1: javalangObject): void;
					public getBaseItemCount(): number;
					public onCreateViewHolder(param0: androidviewViewGroup, param1: number): com.telerik.widget.list.ListViewHolder;
					public removeFilterDescriptor(param0: com.telerik.android.common.Function): void;
					public getItem(param0: number): javalangObject;
					public onCreateGroupViewHolder(param0: androidviewViewGroup, param1: number): com.telerik.widget.list.ListViewHolder;
					public onBindViewHolder(param0: com.telerik.widget.list.ListViewHolder, param1: number): void;
					public removeGroupDescriptor(param0: com.telerik.android.common.Function): void;
					public add(param0: javalangObject): void;
					public isGroupHeader(param0: number): boolean;
					public clearGroupDescriptors(): void;
					public removeSortDescriptor(param0: com.telerik.android.common.Function2): void;
					public addFilterDescriptor(param0: com.telerik.android.common.Function): void;
					public remove(param0: number, param1: boolean): javalangObject;
					public getPosition(param0: number): number;
					public canSelect(param0: number): boolean;
					public getItemCount(): number;
					public onCreateItemViewHolder(param0: androidviewViewGroup, param1: number): com.telerik.widget.list.ListViewHolder;
					public getItemId(param0: number): number;
					public setItems(param0: javautilList<any>): void;
					public canSwipe(param0: number): boolean;
				}
			}
		}
	}
}

import androidviewGestureDetectorSimpleOnGestureListener = android.view.GestureDetector.SimpleOnGestureListener;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ListViewGestureListener extends androidviewGestureDetectorSimpleOnGestureListener {
					public owner: com.telerik.widget.list.RadListView;
					public onTapUp(param0: androidviewMotionEvent): void;
					public onScroll(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public onDown(param0: androidviewMotionEvent): boolean;
					public onLongPress(param0: androidviewMotionEvent): void;
					public onSingleTapUp(param0: androidviewMotionEvent): boolean;
					public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public onShowPress(param0: androidviewMotionEvent): void;
					public onSingleTapConfirmed(param0: androidviewMotionEvent): boolean;
					public onActionUpOrCancel(param0: boolean): boolean;
					public onDoubleTap(param0: androidviewMotionEvent): boolean;
					public onDoubleTapEvent(param0: androidviewMotionEvent): boolean;
					public constructor();
					public onLongPressDragEnded(param0: boolean): boolean;
					public onInterceptTouchEvent(param0: com.telerik.widget.list.RadListView, param1: androidviewMotionEvent): boolean;
					public onLongPressDrag(param0: number, param1: number, param2: number, param3: number): void;
					public constructor(param0: androidcontentContext);
					public onShortPressDrag(param0: number, param1: number, param2: number, param3: number): boolean;
					public onTouchEvent(param0: com.telerik.widget.list.RadListView, param1: androidviewMotionEvent): boolean;
					public onContextClick(param0: androidviewMotionEvent): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ListViewHolder extends androidsupportv7widgetRecyclerViewViewHolder {
					public nsView: any;
					public constructor(param0: androidviewView);
				}
			}
		}
	}
}

import javautilHashSet = java.util.HashSet;
/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
/// <reference path="./java.util.HashSet.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export abstract class ListViewItemAnimator extends androidsupportv7widgetRecyclerView.ItemAnimator {
					public static ADD: number;
					public static REMOVE: number;
					public owner: com.telerik.widget.list.RadListView;
					public mAddAnimations: javautilArrayList<any>;
					public mRemoveAnimations: javautilArrayList<any>;
					public alreadyAppearedViews: javautilHashSet<any>;
					public getType(): number;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public animateViewAppearedImpl(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public animateViewAddedImpl(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public animateViewRemovedImpl(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public removeAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): androidsupportv4viewViewPropertyAnimatorCompat;
					public onMeasure(): void;
					public onAnimationRemoveEnded(param0: androidsupportv4viewViewPropertyAnimatorCompat, param1: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAnimationAddEnded(param0: androidsupportv4viewViewPropertyAnimatorCompat, param1: androidsupportv7widgetRecyclerViewViewHolder): void;
					public animateMove(param0: androidsupportv7widgetRecyclerViewViewHolder, param1: number, param2: number, param3: number, param4: number): boolean;
					public animateViewDisappearedImpl(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public constructor();
					public onAnimationRemoveStarted(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public setType(param0: number): void;
					public animateRemove(param0: androidsupportv7widgetRecyclerViewViewHolder): boolean;
					public animateViewRemoved(param0: androidsupportv7widgetRecyclerViewViewHolder): boolean;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public endAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public animateViewAdded(param0: androidsupportv7widgetRecyclerViewViewHolder): boolean;
					public endAnimations(): void;
					public animateViewDisappeared(param0: androidsupportv7widgetRecyclerViewViewHolder): boolean;
					public runPendingAnimations(): void;
					public animateViewAddedPrepare(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAnimationAddCancelled(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public dispatchFinishedWhenDone(): void;
					public onAnimationAddStarted(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					//public animateChange(param0: androidsupportv7widgetRecyclerViewViewHolder, param1: androidsupportv7widgetRecyclerViewViewHolder, param2: number, param3: number, param4: number, param5: number): boolean;
					public onEndAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public animateViewAppeared(param0: androidsupportv7widgetRecyclerViewViewHolder): boolean;
					public addAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): androidsupportv4viewViewPropertyAnimatorCompat;
					public animateChangeImpl(param0: com.telerik.widget.list.ListViewItemAnimator.ChangeInfo): void;
					public isRunning(): boolean;
					public animateAdd(param0: androidsupportv7widgetRecyclerViewViewHolder): boolean;
					public animateMoveImpl(param0: androidsupportv7widgetRecyclerViewViewHolder, param1: number, param2: number, param3: number, param4: number): void;
					public onAnimationRemoveCancelled(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
				}
				export module ListViewItemAnimator {
					export class ChangeInfo extends javalangObject {
						public oldHolder: androidsupportv7widgetRecyclerViewViewHolder;
						public newHolder: androidsupportv7widgetRecyclerViewViewHolder;
						public fromX: number;
						public fromY: number;
						public toX: number;
						public toY: number;
						public toString(): string;
					}
					export class MoveInfo extends javalangObject {
						public holder: androidsupportv7widgetRecyclerViewViewHolder;
						public fromX: number;
						public fromY: number;
						public toX: number;
						public toY: number;
						public constructor(param0: androidsupportv7widgetRecyclerViewViewHolder, param1: number, param2: number, param3: number, param4: number);
					}
					export class VpaListenerAdapter extends javalangObject {
						public onAnimationCancel(param0: androidviewView): void;
						public constructor();
						public onAnimationEnd(param0: androidviewView): void;
						public onAnimationStart(param0: androidviewView): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.widget.TextView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ListViewTextHolder extends com.telerik.widget.list.ListViewHolder {
					public textView: androidwidgetTextView;
					public constructor(param0: androidviewView);
					public constructor(param0: androidviewView, param1: number);
				}
			}
		}
	}
}

import androidsupportv7widgetRecyclerViewAdapterDataObserver = android.support.v7.widget.RecyclerView.AdapterDataObserver;
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.android.data.SelectionService.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewHolder.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewWrapperAdapter.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ListViewWrapperAdapter extends com.telerik.widget.list.ListViewAdapter {
					public getItemId(param0: javalangObject): number;
					public addRefreshListener(param0: com.telerik.widget.list.SwipeRefreshBehavior.RefreshListener): void;
					public unregisterAdapterDataObserver(param0: androidsupportv7widgetRecyclerViewAdapterDataObserver): void;
					public handleSwipeStart(param0: number, param1: number, param2: number): void;
					public onCreateViewHolder(param0: androidviewViewGroup, param1: number): com.telerik.widget.list.ListViewHolder;
					public removeRefreshListener(param0: com.telerik.widget.list.SwipeRefreshBehavior.RefreshListener): void;
					public getItems(): javautilList<any>;
					public getPosition(param0: javalangObject): number;
					public reorderItem(param0: number, param1: number): boolean;
					public onBindViewHolder(param0: com.telerik.widget.list.ListViewHolder, param1: number): void;
					public removeLoadingListener(param0: com.telerik.widget.list.LoadOnDemandBehavior.LoadingListener): void;
					public selectionService(): com.telerik.android.data.SelectionService;
					public removeSwipeExecuteDismissedListener(param0: com.telerik.widget.list.SwipeExecuteBehavior.SwipeExecuteDismissedListener): void;
					public getPosition(param0: number): number;
					public addLoadingListener(param0: com.telerik.widget.list.LoadOnDemandBehavior.LoadingListener): void;
					public getItemCount(): number;
					public addSwipeExecuteDismissedListener(param0: com.telerik.widget.list.SwipeExecuteBehavior.SwipeExecuteDismissedListener): void;
					public getItemViewType(param0: number): number;
					public getItemId(param0: number): number;
					public registerAdapterDataObserver(param0: androidsupportv7widgetRecyclerViewAdapterDataObserver): void;
				}
				export module ListViewWrapperAdapter {
					export class WrappedDataObserver {
						public onItemRangeChanged(param0: number, param1: number, param2: javalangObject): void;
						public onChanged(): void;
						public onItemRangeMoved(param0: number, param1: number, param2: number): void;
						public constructor(param0: com.telerik.widget.list.ListViewWrapperAdapter, param1: androidsupportv7widgetRecyclerViewAdapterDataObserver);
						public onItemRangeChanged(param0: number, param1: number): void;
						public onItemRangeInserted(param0: number, param1: number): void;
						public onItemRangeRemoved(param0: number, param1: number): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class LoadOnDemandBehavior extends com.telerik.widget.list.ListViewBehavior {
					public setEnabled(param0: boolean): void;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public removeListener(param0: com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandListener): void;
					public setMaxRemainingItems(param0: number): void;
					public getMode(): com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandMode;
					public setMode(param0: com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandMode): void;
					public startLoad(): void;
					public addListener(param0: com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandListener): void;
					public isInProgress(): boolean;
					public endLoad(): void;
					public constructor();
					public getMaxRemainingItems(): number;
					public constructor(param0: androidviewView, param1: androidviewView);
					public isEnabled(): boolean;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
				}
				export module LoadOnDemandBehavior {
					export class LoadOnDemandListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.LoadOnDemandBehavior$LoadOnDemandListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onLoadStarted(): void;
							onLoadFinished(): void;
						});
						public onLoadFinished(): void;
						public onLoadStarted(): void;
					}
					export class LoadOnDemandMode extends javalangEnum<any> {
						public static MANUAL: com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandMode;
						public static AUTOMATIC: com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandMode;
						public static valueOf(param0: string): com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandMode;
						public static values(): native.Array<com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandMode>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					}
					export class LoadingListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.LoadOnDemandBehavior$LoadingListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onLoadingRequested(): void;
							onLoadingFinished(): void;
						});
						public onLoadingRequested(): void;
						public onLoadingFinished(): void;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.list.DeckOfCardsLayoutManager.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class PerspectiveChangeInfo extends javalangObject {
					public static DEFAULT_DURATION: number;
					public static DEFAULT_ALPHA: number;
					public static DEFAULT_TRANSLATION: number;
					public static DEFAULT_ELEVATION: number;
					public getAlpha(): number;
					public getTranslateTop(): number;
					public getTranslateStart(): number;
					public getElevation(): number;
					public setElevation(param0: number): void;
					public setTranslateEnd(param0: number): void;
					public constructor(param0: com.telerik.widget.list.DeckOfCardsLayoutManager);
					public setAlpha(param0: number): void;
					public setTranslateTop(param0: number): void;
					public getAnimationDuration(): number;
					public getTranslateEnd(): number;
					public setTranslateStart(param0: number): void;
					public setTranslateBottom(param0: number): void;
					public setAnimationDuration(param0: number): void;
					public getTranslateBottom(): number;
				}
			}
		}
	}
}

import androidsupportv7widgetRecyclerViewLayoutManager = android.support.v7.widget.RecyclerView.LayoutManager;
import androidsupportv7widgetRecyclerViewAdapter = android.support.v7.widget.RecyclerView.Adapter;
import androidsupportv7widgetRecyclerViewItemAnimator = android.support.v7.widget.RecyclerView.ItemAnimator;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewBehavior.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewGestureListener.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class RadListView extends androidsupportv7widgetRecyclerView {
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public onTouchEvent(param0: androidviewMotionEvent): boolean;
					public setAdapter(param0: androidsupportv7widgetRecyclerViewAdapter): void;
					public getHeaderView(): androidviewView;
					public dispatchDraw(param0: androidgraphicsCanvas): void;
					public swapAdapter(param0: androidsupportv7widgetRecyclerViewAdapter, param1: boolean): void;
					public addIsEmptyChangedListener(param0: com.telerik.widget.list.RadListView.IsEmptyChangedListener): void;
					public getEmptyContent(): androidviewView;
					public onAttachedToWindow(): void;
					public setEmptyContent(param0: androidviewView): void;
					public removeIsEmptyChangedListener(param0: com.telerik.widget.list.RadListView.IsEmptyChangedListener): void;
					public scrollToPosition(param0: number): void;
					public scrollToPosition(param0: number, snapMode: number): void;
					public setEmptyContentEnabled(param0: boolean): void;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public onSaveInstanceState(): androidosParcelable;
					public setFooterView(param0: androidviewView): void;
					public getFooterView(): androidviewView;
					public setHeaderView(param0: androidviewView): void;
					public setGestureListener(param0: com.telerik.widget.list.ListViewGestureListener): void;
					public onMeasure(param0: number, param1: number): void;
					public addItemClickListener(param0: com.telerik.widget.list.RadListView.ItemClickListener): void;
					public onScrolled(param0: number, param1: number): void;
					public clearBehaviors(): void;
					public addBehavior(param0: com.telerik.widget.list.ListViewBehavior): void;
					public removeItemClickListener(param0: com.telerik.widget.list.RadListView.ItemClickListener): void;
					public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
					public scrollToStart(): void;
					public smoothScrollToPosition(position: number, snapMode: number): void;
					public smoothScrollToPosition(position: number);
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scrollToEnd(): void;
					public removeBehavior(param0: com.telerik.widget.list.ListViewBehavior): void;
					public setLayoutManager(param0: androidsupportv7widgetRecyclerViewLayoutManager): void;
					public getChildAdapterPosition(param0: androidviewView): number;
					public getAdapter(): androidsupportv7widgetRecyclerViewAdapter;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public constructor(param0: androidcontentContext);
					public setItemAnimator(param0: androidsupportv7widgetRecyclerViewItemAnimator): void;
					public isEmptyContentEnabled(): boolean;
					public getGestureListener(): com.telerik.widget.list.ListViewGestureListener;
				}
				export module RadListView {
					export class IsEmptyChangedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.RadListView$IsEmptyChangedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onChanged(param0: boolean): void;
						});
						public onChanged(param0: boolean): void;
					}
					export class ItemClickListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.RadListView$ItemClickListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onItemClick(param0: number, param1: androidviewMotionEvent): void;
							onItemLongClick(param0: number, param1: androidviewMotionEvent): void;
						});
						public onItemClick(param0: number, param1: androidviewMotionEvent): void;
						public onItemLongClick(param0: number, param1: androidviewMotionEvent): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ReorderWithHandlesBehavior extends com.telerik.widget.list.ItemReorderBehavior {
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public endReorder(param0: boolean): void;
					public onLongPress(param0: androidviewMotionEvent): void;
					public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public isInProgress(): boolean;
					public onActionUpOrCancel(param0: boolean): boolean;
					public constructor();
					public resolveHandleViewForCoordinates(param0: number, param1: number): androidviewView;
					public onLongPressDragEnded(param0: boolean): boolean;
					public onLongPressDrag(param0: number, param1: number, param2: number, param3: number): void;
					public getReorderHandleOverride(param0: androidviewViewGroup): androidviewView;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public onShortPressDrag(param0: number, param1: number, param2: number, param3: number): boolean;
					public constructor(param0: number);
				}
			}
		}
	}
}

/// <reference path="./android.support.v7.widget.LinearSmoothScroller.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class SnappingSmoothScroller extends android.support.v7.widget.LinearSmoothScroller {
					public static SNAP_NONE: number;
					public static SNAP_CENTER: number;
					public static SNAP_TOP: number;
					public static SNAP_BOTTOM: number;
					public getSnapMode(): number;
					public setSnapMode(value: number);
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class ScaleItemAnimator extends com.telerik.widget.list.ListViewItemAnimator {
					public getScaleY(): number;
					public setScaleX(param0: number): void;
					public animateViewAddedPrepare(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAnimationAddCancelled(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public removeAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): androidsupportv4viewViewPropertyAnimatorCompat;
					public onAnimationAddEnded(param0: androidsupportv4viewViewPropertyAnimatorCompat, param1: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAnimationRemoveEnded(param0: androidsupportv4viewViewPropertyAnimatorCompat, param1: androidsupportv7widgetRecyclerViewViewHolder): void;
					public getScaleX(): number;
					public constructor();
					public onEndAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public setScaleY(param0: number): void;
					public addAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): androidsupportv4viewViewPropertyAnimatorCompat;
					public endAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class SelectionBehavior extends com.telerik.widget.list.ListViewBehavior implements com.telerik.widget.list.ItemReorderBehavior.ItemReorderListener, com.telerik.widget.list.SwipeExecuteBehavior.SwipeExecuteListener, com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsListener {
					public onTapUp(param0: androidviewMotionEvent): void;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public onReorderFinished(): void;
					public onSwipeProgressChanged(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
					public onLongPress(param0: androidviewMotionEvent): void;
					public getIsSelected(param0: number): boolean;
					public selectedItems(): javautilList<any>;
					public setSelectionOnLongPress(param0: com.telerik.widget.list.SelectionBehavior.SelectionOnTouch): void;
					public onSwipeStarted(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
					public changeIsSelected(param0: number, param1: boolean): void;
					public addListener(param0: com.telerik.widget.list.SelectionBehavior.SelectionChangedListener): void;
					public onSwipeEnded(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public constructor();
					public getSelectionOnLongPress(): com.telerik.widget.list.SelectionBehavior.SelectionOnTouch;
					public onSwipeStateChanged(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState, param1: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState): void;
					public onSwipeStarted(param0: number): void;
					public onReorderStarted(param0: number): void;
					public onSwipeProgressChanged(param0: number, param1: number, param2: androidviewView): void;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public startSelection(): void;
					public getSelectionMode(): com.telerik.widget.list.SelectionBehavior.SelectionMode;
					public endSelection(): void;
					public setSelectionMode(param0: com.telerik.widget.list.SelectionBehavior.SelectionMode): void;
					public onExecuteFinished(param0: number): void;
					public removeListener(param0: com.telerik.widget.list.SelectionBehavior.SelectionChangedListener): void;
					public getSelectionOnTouch(): com.telerik.widget.list.SelectionBehavior.SelectionOnTouch;
					public onReorderItem(param0: number, param1: number): void;
					public onSwipeEnded(param0: number, param1: number): void;
					public isInProgress(): boolean;
					public onSaveInstanceState(param0: androidosParcelable): void;
					public onExecuteFinished(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
					public setSelectionOnTouch(param0: com.telerik.widget.list.SelectionBehavior.SelectionOnTouch): void;
					public changeIsSelected(param0: number): void;
				}
				export module SelectionBehavior {
					export class SelectionChangedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.SelectionBehavior$SelectionChangedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onSelectionStarted(): void;
							onItemIsSelectedChanged(param0: number, param1: boolean): void;
							onSelectionEnded(): void;
						});
						public onSelectionStarted(): void;
						public onSelectionEnded(): void;
						public onItemIsSelectedChanged(param0: number, param1: boolean): void;
					}
					export class SelectionMode extends javalangEnum<any> {
						public static MULTIPLE: com.telerik.widget.list.SelectionBehavior.SelectionMode;
						public static SINGLE: com.telerik.widget.list.SelectionBehavior.SelectionMode;
						public static valueOf(param0: string): com.telerik.widget.list.SelectionBehavior.SelectionMode;
						public static values(): native.Array<com.telerik.widget.list.SelectionBehavior.SelectionMode>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					}
					export class SelectionOnTouch extends javalangEnum<any> {
						public static NEVER: com.telerik.widget.list.SelectionBehavior.SelectionOnTouch;
						public static ALWAYS: com.telerik.widget.list.SelectionBehavior.SelectionOnTouch;
						public static AFTER_START: com.telerik.widget.list.SelectionBehavior.SelectionOnTouch;
						public static values(): native.Array<com.telerik.widget.list.SelectionBehavior.SelectionOnTouch>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
						public static valueOf(param0: string): com.telerik.widget.list.SelectionBehavior.SelectionOnTouch;
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v4.view.ViewPropertyAnimatorCompat.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class SlideItemAnimator extends com.telerik.widget.list.ListViewItemAnimator {
					public static DIRECTION_LEFT: number;
					public static DIRECTION_TOP: number;
					public static DIRECTION_RIGHT: number;
					public static DIRECTION_BOTTOM: number;
					public setAnimateInDirection(param0: number): void;
					public getAnimateInDirection(): number;
					public setAnimateOutDirection(param0: number): void;
					public constructor();
					public addAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): androidsupportv4viewViewPropertyAnimatorCompat;
					public getAnimateOutDirection(): number;
					public animateViewAddedPrepare(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAnimationAddCancelled(param0: androidsupportv7widgetRecyclerViewViewHolder): void;
					public removeAnimation(param0: androidsupportv7widgetRecyclerViewViewHolder): androidsupportv4viewViewPropertyAnimatorCompat;
					public onAnimationAddEnded(param0: androidsupportv4viewViewPropertyAnimatorCompat, param1: androidsupportv7widgetRecyclerViewViewHolder): void;
					public onAnimationRemoveEnded(param0: androidsupportv4viewViewPropertyAnimatorCompat, param1: androidsupportv7widgetRecyclerViewViewHolder): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class SlideLayoutManager extends com.telerik.widget.list.SlideLayoutManagerBase {
					public static HORIZONTAL: number;
					public static VERTICAL: number;
					public scrollViews(param0: number, param1: number): void;
					public scaleXForIndex(param0: number): number;
					public previousItemsCount(): number;
					public isScrollOnTap(): boolean;
					public alphaForIndex(param0: number): number;
					public setPreviousItemPreview(param0: number): void;
					public constructor(param0: androidcontentContext, param1: number);
					public scaleYForIndex(param0: number): number;
					public setNextItemPreview(param0: number): void;
					public layoutView(param0: androidviewView): void;
					public setScrollOnTap(param0: boolean): void;
					public calculateFrontViewSize(): void;
					public setItemSpacing(param0: number): void;
					public nextItemsCount(): number;
					public translationZForIndex(param0: number): number;
					public constructor();
					public getTransitionMode(): com.telerik.widget.list.SlideLayoutManager.Transition;
					public translationXForIndex(param0: number): number;
					public translationYForIndex(param0: number): number;
					public getNextItemPreview(): number;
					public getPreviousItemPreview(): number;
					public setTransitionMode(param0: com.telerik.widget.list.SlideLayoutManager.Transition): void;
					public constructor(param0: androidcontentContext);
					public getItemSpacing(): number;
				}
				export module SlideLayoutManager {
					export class Transition extends javalangEnum<any> {
						public static SLIDE_AWAY: com.telerik.widget.list.SlideLayoutManager.Transition;
						public static SLIDE_OVER: com.telerik.widget.list.SlideLayoutManager.Transition;
						public static valueOf(param0: string): com.telerik.widget.list.SlideLayoutManager.Transition;
						public static values(): native.Array<com.telerik.widget.list.SlideLayoutManager.Transition>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					}
				}
			}
		}
	}
}

/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.animation.Interpolator.d.ts" />
/// <reference path="./com.telerik.widget.list.CurrentPositionChangeListener.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export abstract class SlideLayoutManagerBase {
					public frontViewWidth: number;
					public frontViewHeight: number;
					public frontViewPosition: number;
					public scaleXForIndex(param0: number): number;
					public alphaForIndex(param0: number): number;
					public elevationForIndex(param0: number): number;
					public onItemsAdded(param0: androidsupportv7widgetRecyclerView, param1: number, param2: number): void;
					public supportsPredictiveItemAnimations(): boolean;
					public fillAtEnd(param0: androidsupportv7widgetRecyclerViewRecycler, param1: androidsupportv7widgetRecyclerViewState, param2: number): void;
					public canScroll(param0: number): boolean;
					public nextIndex(param0: number): number;
					public scaleYForIndex(param0: number): number;
					public scrollToPosition(param0: number): void;
					public getStateItemCount(): number;
					public animationInterpolator(): androidviewanimationInterpolator;
					public translationZForIndex(param0: number): number;
					public constructor();
					public calculateScrollProgress(): number;
					public translationXForIndex(param0: number): number;
					public translationYForIndex(param0: number): number;
					public isScrollEnabled(): boolean;
					public onAdapterChanged(param0: androidsupportv7widgetRecyclerViewAdapter, param1: androidsupportv7widgetRecyclerViewAdapter): void;
					public scrollHorizontallyBy(param0: number, param1: androidsupportv7widgetRecyclerViewRecycler, param2: androidsupportv7widgetRecyclerViewState): number;
					public getOrientation(): number;
					public getDirection(param0: number): number;
					public setScrollEnabled(param0: boolean): void;
					public canScrollVertically(): boolean;
					public scrollViews(param0: number, param1: number): void;
					public onScrollStateChanged(param0: number): void;
					public onItemsChanged(param0: androidsupportv7widgetRecyclerView): void;
					public setOrientation(param0: number): void;
					public fillAtStart(param0: androidsupportv7widgetRecyclerViewRecycler, param1: androidsupportv7widgetRecyclerViewState, param2: number): void;
					public canScrollHorizontally(): boolean;
					public generateDefaultLayoutParams(): androidsupportv7widgetRecyclerViewLayoutParams;
					public onLayoutChildren(param0: androidsupportv7widgetRecyclerViewRecycler, param1: androidsupportv7widgetRecyclerViewState): void;
					public layoutIndexForAdapterPosition(param0: number): number;
					public applyLayoutTransformations(param0: androidviewView, param1: number, param2: boolean): void;
					public scrollVerticallyBy(param0: number, param1: androidsupportv7widgetRecyclerViewRecycler, param2: androidsupportv7widgetRecyclerViewState): number;
					public rotationXForIndex(param0: number): number;
					public addListener(param0: com.telerik.widget.list.CurrentPositionChangeListener): void;
					public scrollToPrevious(): void;
					public findEndOffset(): number;
					public onItemsMoved(param0: androidsupportv7widgetRecyclerView, param1: number, param2: number, param3: number): void;
					public fillAtEnd(param0: androidsupportv7widgetRecyclerViewRecycler, param1: androidsupportv7widgetRecyclerViewState): void;
					public fill(param0: number, param1: androidsupportv7widgetRecyclerViewRecycler, param2: androidsupportv7widgetRecyclerViewState): void;
					public calculateFrontViewSize(): void;
					public onItemsUpdated(param0: androidsupportv7widgetRecyclerView, param1: number, param2: number): void;
					public fillAll(param0: androidsupportv7widgetRecyclerViewRecycler, param1: androidsupportv7widgetRecyclerViewState): void;
					public removeListener(param0: com.telerik.widget.list.CurrentPositionChangeListener): void;
					public fillAtStart(param0: androidsupportv7widgetRecyclerViewRecycler, param1: androidsupportv7widgetRecyclerViewState): void;
					public getCurrentPosition(): number;
					public setCurrentPosition(param0: number): void;
					public previousItemsCount(): number;
					public findStartOffset(): number;
					public scrollToNext(): void;
					public updateViewLayoutParams(param0: androidviewView, param1: number, param2: number): void;
					public onItemsRemoved(param0: androidsupportv7widgetRecyclerView, param1: number, param2: number): void;
					public handleItemRemoved(param0: number, param1: androidsupportv7widgetRecyclerViewRecycler, param2: androidsupportv7widgetRecyclerViewState): void;
					public layoutView(param0: androidviewView): void;
					public previousIndex(param0: number): number;
					public animationDuration(): number;
					public rotationForIndex(param0: number): number;
					public nextItemsCount(): number;
					public rotationYForIndex(param0: number): number;
					public notifyListeners(param0: number, param1: number): void;
					public adapterPositionForLayoutIndex(param0: number): number;
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class StickyHeaderBehavior extends com.telerik.widget.list.ListViewBehavior {
					public stickyHeaderImage: androidgraphicsdrawableDrawable;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public getStickyImageForPosition(param0: number): androidgraphicsdrawableDrawable;
					public getViewForPosition(param0: number): androidviewView;
					public constructor();
					public onDispatchDraw(param0: androidgraphicsCanvas): void;
					public onScrolled(param0: number, param1: number): void;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public createImageFromView(param0: androidviewView): androidgraphicsdrawableDrawable;
					public getItemHeaderPosition(param0: number): number;
					public invalidate(): void;
				}
			}
		}
	}
}

/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./com.telerik.widget.list.ListViewHolder.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class SwipeActionsBehavior extends com.telerik.widget.list.ListViewBehavior {
					public static DEFAULT_SWIPE_OFFSET: number;
					public static DEFAULT_SWIPE_LIMIT: number;
					public bindViewHolder(param0: com.telerik.widget.list.ListViewHolder, param1: number): void;
					public onTapUp(param0: androidviewMotionEvent): void;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public addListener(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsListener): void;
					public onLongPress(param0: androidviewMotionEvent): void;
					public setSwipeLimitStart(param0: number): void;
					public createViewHolder(param0: androidviewViewGroup, param1: number): com.telerik.widget.list.ListViewHolder;
					public getItemViewType(param0: number, param1: number): number;
					public endExecute(): void;
					public endExecute(param0: boolean): void;
					public getSwipeState(): com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState;
					public constructor();
					public getDockMode(): com.telerik.widget.list.SwipeActionsBehavior.SwipeDockMode;
					public setSwipeThresholdStart(param0: number): void;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public setSwipeLimitEnd(param0: number): void;
					public managesViewHolders(): boolean;
					public onShortPressDrag(param0: number, param1: number, param2: number, param3: number): boolean;
					public getSwipeLimitEnd(): number;
					public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public setSwipeThresholdEnd(param0: number): void;
					public isInProgress(): boolean;
					public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
					public onActionUpOrCancel(param0: boolean): boolean;
					public removeListener(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsListener): void;
					public getSwipeLimitStart(): number;
					public setDockMode(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeDockMode): void;
				}
				export module SwipeActionsBehavior {
					export class DockContext extends javalangObject {
					}
					export class SwipeActionEvent extends javalangObject {
						public swipedItemPosition(): number;
						public mainView(): androidviewView;
						public swipePositionWhenReleased(): number;
						public isThresholdPassed(): boolean;
						public swipeView(): androidviewView;
						public currentOffset(): number;
					}
					export class SwipeActionsListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.SwipeActionsBehavior$SwipeActionsListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onSwipeStarted(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
							onSwipeProgressChanged(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
							onSwipeEnded(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
							onExecuteFinished(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
							onSwipeStateChanged(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState, param1: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState): void;
						});
						public onSwipeStarted(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
						public onSwipeEnded(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
						public onSwipeStateChanged(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState, param1: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState): void;
						public onSwipeProgressChanged(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
						public onExecuteFinished(param0: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionEvent): void;
					}
					export class SwipeActionsState extends javalangEnum<any> {
						public static IDLE: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState;
						public static SWIPING: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState;
						public static RESETTING: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState;
						public static ACTIVE: com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState;
						public static values(): native.Array<com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState>;
						public static valueOf(param0: string): com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsState;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					}
					export class SwipeDockMode extends javalangEnum<any> {
						public static DockAtLimit: com.telerik.widget.list.SwipeActionsBehavior.SwipeDockMode;
						public static DockAtThreshold: com.telerik.widget.list.SwipeActionsBehavior.SwipeDockMode;
						public static valueOf(param0: string): com.telerik.widget.list.SwipeActionsBehavior.SwipeDockMode;
						public static values(): native.Array<com.telerik.widget.list.SwipeActionsBehavior.SwipeDockMode>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					}
					export class SwipeExecuteDataObserver {
						public onChanged(): void;
						public onItemRangeRemoved(param0: number, param1: number): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class SwipeExecuteBehavior extends com.telerik.widget.list.ListViewBehavior {
					public static DEFAULT_SWIPE_OFFSET: number;
					public static DEFAULT_SWIPE_LIMIT: number;
					public onTapUp(param0: androidviewMotionEvent): void;
					public clearSwipeDrawables(): void;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public onLongPress(param0: androidviewMotionEvent): void;
					public setSwipeLimitStart(param0: number): void;
					public endExecute(): void;
					public constructor();
					public onDispatchDraw(param0: androidgraphicsCanvas): void;
					public startSwipe(param0: number, param1: number): void;
					public ensureWithinSwipeLimits(param0: number): number;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
					public setSwipeLimitEnd(param0: number): void;
					public onShortPressDrag(param0: number, param1: number, param2: number, param3: number): boolean;
					public removeSwipeDrawable(param0: number): boolean;
					public getSwipeOffset(): number;
					public getSwipeLimitEnd(): number;
					public removeListener(param0: com.telerik.widget.list.SwipeExecuteBehavior.SwipeExecuteListener): void;
					public onFling(param0: androidviewMotionEvent, param1: androidviewMotionEvent, param2: number, param3: number): boolean;
					public moveSwipe(param0: number, param1: number, param2: number, param3: number): void;
					public isInProgress(): boolean;
					public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
					public setAutoDissolve(param0: boolean): void;
					public endSwipe(): void;
					public addListener(param0: com.telerik.widget.list.SwipeExecuteBehavior.SwipeExecuteListener): void;
					public onActionUpOrCancel(param0: boolean): boolean;
					public addSwipeDrawable(param0: number, param1: androidgraphicsdrawableDrawable): void;
					public setSwipeOffset(param0: number): void;
					public createSwipeImage(param0: androidviewView): androidgraphicsdrawableDrawable;
					public isAutoDissolve(): boolean;
					public getSwipeLimitStart(): number;
				}
				export module SwipeExecuteBehavior {
					export class EventInfo extends javalangObject {
					}
					export class SwipeExecuteDataObserver {
						public onChanged(): void;
						public onItemRangeRemoved(param0: number, param1: number): void;
					}
					export class SwipeExecuteDismissedListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.SwipeExecuteBehavior$SwipeExecuteDismissedListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onSwipeContentDismissed(): void;
						});
						public onSwipeContentDismissed(): void;
					}
					export class SwipeExecuteListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.SwipeExecuteBehavior$SwipeExecuteListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onSwipeStarted(param0: number): void;
							onSwipeProgressChanged(param0: number, param1: number, param2: androidviewView): void;
							onSwipeEnded(param0: number, param1: number): void;
							onExecuteFinished(param0: number): void;
						});
						public onSwipeEnded(param0: number, param1: number): void;
						public onSwipeStarted(param0: number): void;
						public onExecuteFinished(param0: number): void;
						public onSwipeProgressChanged(param0: number, param1: number, param2: androidviewView): void;
					}
					export class SwipeState extends javalangEnum<any> {
						public static IDLE: com.telerik.widget.list.SwipeExecuteBehavior.SwipeState;
						public static STARTED: com.telerik.widget.list.SwipeExecuteBehavior.SwipeState;
						public static ENDED: com.telerik.widget.list.SwipeExecuteBehavior.SwipeState;
						public static valueOf(param0: string): com.telerik.widget.list.SwipeExecuteBehavior.SwipeState;
						public static values(): native.Array<com.telerik.widget.list.SwipeExecuteBehavior.SwipeState>;
						public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class SwipeLayout extends androidviewViewGroup {
					public generateLayoutParams(param0: androidviewViewGroupLayoutParams): androidviewViewGroupLayoutParams;
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public focusSearch(param0: number): androidviewView;
					public bringChildToFront(param0: androidviewView): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public isLayoutRequested(): boolean;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public getParentForAccessibility(): androidviewViewParent;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public getLayoutDirection(): number;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public generateLayoutParams(param0: androidutilAttributeSet): androidviewViewGroupLayoutParams;
					public focusableViewAvailable(param0: androidviewView): void;
					public checkLayoutParams(param0: androidviewViewGroupLayoutParams): boolean;
					public requestFitSystemWindows(): void;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public isTextAlignmentResolved(): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public static layoutChild(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public addView(param0: androidviewView, param1: number): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public removeView(param0: androidviewView): void;
					public onMeasure(param0: number, param1: number): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public canResolveLayoutDirection(): boolean;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public setMainView(param0: androidviewView): void;
					public shouldDelayChildPressedState(): boolean;
					public setSwipeView(param0: androidviewView): void;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public constructor(param0: androidcontentContext);
					public addView(param0: androidviewView): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module widget {
				export class SwipeRefreshLayout extends android.view.ViewGroup implements android.support.v4.view.NestedScrollingParent, android.support.v4.view.NestedScrollingChild {
					public static LARGE: number;
					public static DEFAULT: number;
					public mFrom: number;
					public mOriginalOffsetTop: number;
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onKeyUp(param0: number, param1: android.view.KeyEvent): boolean;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback, param2: number): android.view.ActionMode;
					public startActionModeForChild(param0: android.view.View, param1: android.view.ActionMode.Callback): android.view.ActionMode;
					public sendAccessibilityEventUnchecked(param0: android.view.accessibility.AccessibilityEvent): void;
					public getChildDrawingOrder(param0: number, param1: number): number;
					public dispatchNestedPreScroll(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): boolean;
					public notifySubtreeAccessibilityStateChanged(param0: android.view.View, param1: android.view.View, param2: number): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: android.graphics.Rect): android.view.ViewParent;
					public isLayoutRequested(): boolean;
					public clearChildFocus(param0: android.view.View): void;
					public isRefreshing(): boolean;
					public isTextDirectionResolved(): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public showContextMenuForChild(param0: android.view.View): boolean;
					public isLayoutDirectionResolved(): boolean;
					public addView(param0: android.view.View, param1: number): void;
					public stopNestedScroll(): void;
					public setOnRefreshListener(param0: android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener): void;
					public requestChildFocus(param0: android.view.View, param1: android.view.View): void;
					public onTouchEvent(param0: android.view.MotionEvent): boolean;
					public scheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable, param2: number): void;
					public setRefreshing(param0: boolean): void;
					public bringChildToFront(param0: android.view.View): void;
					public updateViewLayout(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public getLayoutDirection(): number;
					public getParentForAccessibility(): android.view.ViewParent;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number, param3: number);
					public addView(param0: android.view.View, param1: number, param2: number): void;
					public createContextMenu(param0: android.view.ContextMenu): void;
					public setColorSchemeResources(param0: native.Array<number>): void;
					public dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: native.Array<number>): boolean;
					public addView(param0: android.view.View, param1: android.view.ViewGroup.LayoutParams): void;
					public dispatchNestedFling(param0: number, param1: number, param2: boolean): boolean;
					public childDrawableStateChanged(param0: android.view.View): void;
					public getChildVisibleRect(param0: android.view.View, param1: android.graphics.Rect, param2: android.graphics.Point): boolean;
					public getTextDirection(): number;
					public requestFitSystemWindows(): void;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
					public focusSearch(param0: number): android.view.View;
					public setProgressBackgroundColorSchemeColor(param0: number): void;
					public onInterceptTouchEvent(param0: android.view.MotionEvent): boolean;
					public setProgressViewEndTarget(param0: boolean, param1: number): void;
					public isTextAlignmentResolved(): boolean;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public requestTransparentRegion(param0: android.view.View): void;
					public onKeyDown(param0: number, param1: android.view.KeyEvent): boolean;
					public setSize(param0: number): void;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public setProgressBackgroundColor(param0: number): void;
					public canResolveTextAlignment(): boolean;
					public setColorScheme(param0: native.Array<number>): void;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public canResolveTextDirection(): boolean;
					public addView(param0: android.view.View, param1: number, param2: android.view.ViewGroup.LayoutParams): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public onKeyMultiple(param0: number, param1: number, param2: android.view.KeyEvent): boolean;
					public requestChildRectangleOnScreen(param0: android.view.View, param1: android.graphics.Rect, param2: boolean): boolean;
					public setProgressBackgroundColorSchemeResource(param0: number): void;
					public getParent(): android.view.ViewParent;
					public childHasTransientStateChanged(param0: android.view.View, param1: boolean): void;
					public onKeyLongPress(param0: number, param1: android.view.KeyEvent): boolean;
					public setColorSchemeColors(param0: native.Array<number>): void;
					public setNestedScrollingEnabled(param0: boolean): void;
					public setDistanceToTriggerSync(param0: number): void;
					public onStopNestedScroll(param0: android.view.View): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public onDetachedFromWindow(): void;
					public onMeasure(param0: number, param1: number): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet, param2: number);
					public canResolveLayoutDirection(): boolean;
					public onNestedPrePerformAccessibilityAction(param0: android.view.View, param1: number, param2: android.os.Bundle): boolean;
					public removeView(param0: android.view.View): void;
					public getTextAlignment(): number;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable, param1: javalangRunnable): void;
					public invalidateChild(param0: android.view.View, param1: android.graphics.Rect): void;
					public invalidateDrawable(param0: android.graphics.drawable.Drawable): void;
					public recomputeViewAttributes(param0: android.view.View): void;
					public canChildScrollUp(): boolean;
					public focusableViewAvailable(param0: android.view.View): void;
					public unscheduleDrawable(param0: android.graphics.drawable.Drawable): void;
					public constructor(param0: android.content.Context);
					public getNestedScrollAxes(): number;
					public isNestedScrollingEnabled(): boolean;
					public addView(param0: android.view.View): void;
					public constructor(param0: android.content.Context, param1: android.util.AttributeSet);
					public focusSearch(param0: android.view.View, param1: number): android.view.View;
					public dispatchNestedPreFling(param0: number, param1: number): boolean;
					public setProgressViewOffset(param0: boolean, param1: number, param2: number): void;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public requestSendAccessibilityEvent(param0: android.view.View, param1: android.view.accessibility.AccessibilityEvent): boolean;
					public startNestedScroll(param0: number): boolean;
					public hasNestedScrollingParent(): boolean;
					public getProgressCircleDiameter(): number;
				}
				export module SwipeRefreshLayout {
					export class OnRefreshListener extends javalangObject {
						/**
						 * Constructs a new instance of the android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onRefresh(): void;
						});
						public onRefresh(): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module view {
				export class NestedScrollingParent extends javalangObject {
					/**
					 * Constructs a new instance of the android.support.v4.view.NestedScrollingParent interface with the provided implementation.
					 */
					public constructor(implementation: {
						onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
						onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
						onStopNestedScroll(param0: android.view.View): void;
						onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
						onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
						onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
						onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
						getNestedScrollAxes(): number;
					});
					public onNestedFling(param0: android.view.View, param1: number, param2: number, param3: boolean): boolean;
					public onNestedPreFling(param0: android.view.View, param1: number, param2: number): boolean;
					public onNestedPreScroll(param0: android.view.View, param1: number, param2: number, param3: native.Array<number>): void;
					public getNestedScrollAxes(): number;
					public onStartNestedScroll(param0: android.view.View, param1: android.view.View, param2: number): boolean;
					public onNestedScroll(param0: android.view.View, param1: number, param2: number, param3: number, param4: number): void;
					public onStopNestedScroll(param0: android.view.View): void;
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module view {
				export class NestedScrollingParentHelper extends javalangObject {
					public getNestedScrollAxes(): number;
					public onStopNestedScroll(param0: android.view.View): void;
					public constructor(param0: android.view.ViewGroup);
					public onNestedScrollAccepted(param0: android.view.View, param1: android.view.View, param2: number): void;
				}
			}
		}
	}
}

declare module android {
	export module support {
		export module v4 {
			export module view {
				export class NestedScrollingChild extends javalangObject {
					/**
					 * Constructs a new instance of the android.support.v4.view.NestedScrollingChild interface with the provided implementation.
					 */
					public constructor(implementation: {
						setNestedScrollingEnabled(param0: boolean): void;
						isNestedScrollingEnabled(): boolean;
						startNestedScroll(param0: number): boolean;
						stopNestedScroll(): void;
						hasNestedScrollingParent(): boolean;
						dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: native.Array<number>): boolean;
						dispatchNestedPreScroll(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): boolean;
						dispatchNestedFling(param0: number, param1: number, param2: boolean): boolean;
						dispatchNestedPreFling(param0: number, param1: number): boolean;
					});
					public dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: native.Array<number>): boolean;
					public isNestedScrollingEnabled(): boolean;
					public dispatchNestedFling(param0: number, param1: number, param2: boolean): boolean;
					public stopNestedScroll(): void;
					public dispatchNestedPreScroll(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): boolean;
					public setNestedScrollingEnabled(param0: boolean): void;
					public dispatchNestedPreFling(param0: number, param1: number): boolean;
					public startNestedScroll(param0: number): boolean;
					public hasNestedScrollingParent(): boolean;
				}
			}
		}
	}
}

/// <reference path="./android.view.View.d.ts" />
declare module android {
	export module support {
		export module v4 {
			export module view {
				export class NestedScrollingChildHelper extends javalangObject {
					public onDetachedFromWindow(): void;
					public dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: native.Array<number>): boolean;
					public isNestedScrollingEnabled(): boolean;
					public dispatchNestedFling(param0: number, param1: number, param2: boolean): boolean;
					public stopNestedScroll(): void;
					public dispatchNestedPreScroll(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): boolean;
					public setNestedScrollingEnabled(param0: boolean): void;
					public dispatchNestedPreFling(param0: number, param1: number): boolean;
					public constructor(param0: android.view.View);
					public startNestedScroll(param0: number): boolean;
					public hasNestedScrollingParent(): boolean;
					public onStopNestedScroll(param0: android.view.View): void;
				}
			}
		}
	}
}

import androidsupportv4widgetSwipeRefreshLayout = android.support.v4.widget.SwipeRefreshLayout;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.support.v4.widget.SwipeRefreshLayout.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.widget.list.RadListView.d.ts" />
/// <reference path="./com.telerik.widget.list.SwipeRefreshBehavior.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class SwipeRefreshBehavior extends com.telerik.widget.list.ListViewBehavior {
					public endRefresh(param0: boolean): void;
					public removeListener(param0: com.telerik.widget.list.SwipeRefreshBehavior.SwipeRefreshListener): void;
					public onDetached(param0: com.telerik.widget.list.RadListView): void;
					public init(param0: androidcontentContext): void;
					public insertRefreshLayout(param0: com.telerik.widget.list.RadListView, param1: androidsupportv4widgetSwipeRefreshLayout): void;
					public startRefresh(): void;
					public onLongPress(param0: androidviewMotionEvent): void;
					public owner(): com.telerik.widget.list.RadListView;
					public addListener(param0: com.telerik.widget.list.SwipeRefreshBehavior.SwipeRefreshListener): void;
					public isInProgress(): boolean;
					public onActionUpOrCancel(param0: boolean): boolean;
					public constructor();
					public swipeRefresh(): androidsupportv4widgetSwipeRefreshLayout;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public onAttached(param0: com.telerik.widget.list.RadListView): void;
				}
				export module SwipeRefreshBehavior {
					export class RefreshListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.SwipeRefreshBehavior$RefreshListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onRefreshFinished(): void;
						});
						public onRefreshFinished(): void;
					}
					export class SwipeRefreshIndicator extends androidsupportv4widgetSwipeRefreshLayout {
						public isLayoutRequested(): boolean;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public focusableViewAvailable(param0: androidviewView): void;
						public dispatchNestedPreScroll(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): boolean;
						public canResolveLayoutDirection(): boolean;
						public showContextMenuForChild(param0: androidviewView): boolean;
						public onTouchEvent(param0: androidviewMotionEvent): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public childDrawableStateChanged(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public requestTransparentRegion(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public getParent(): androidviewViewParent;
						public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
						public dispatchNestedPreFling(param0: number, param1: number): boolean;
						public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
						public isTextAlignmentResolved(): boolean;
						public dispatchNestedScroll(param0: number, param1: number, param2: number, param3: number, param4: native.Array<number>): boolean;
						public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
						public getNestedScrollAxes(): number;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
						public onMeasure(param0: number, param1: number): void;
						public recomputeViewAttributes(param0: androidviewView): void;
						public getTextDirection(): number;
						public setNestedScrollingEnabled(param0: boolean): void;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
						public hasNestedScrollingParent(): boolean;
						public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
						public clearChildFocus(param0: androidviewView): void;
						public isNestedScrollingEnabled(): boolean;
						public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
						public getParentForAccessibility(): androidviewViewParent;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public isLayoutDirectionResolved(): boolean;
						public startNestedScroll(param0: number): boolean;
						public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
						public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public requestLayout(): void;
						public constructor(param0: androidcontentContext);
						public isTextDirectionResolved(): boolean;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public focusSearch(param0: number): androidviewView;
						public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
						public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
						public addView(param0: androidviewView, param1: number): void;
						public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
						public constructor(param0: com.telerik.widget.list.SwipeRefreshBehavior, param1: androidcontentContext);
						public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public dispatchNestedFling(param0: number, param1: number, param2: boolean): boolean;
						public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
						public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public createContextMenu(param0: androidviewContextMenu): void;
						public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
						public removeView(param0: androidviewView): void;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public requestFitSystemWindows(): void;
						public stopNestedScroll(): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
						public onStopNestedScroll(param0: androidviewView): void;
						public bringChildToFront(param0: androidviewView): void;
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public focusSearch(param0: androidviewView, param1: number): androidviewView;
						public addView(param0: androidviewView): void;
						public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
						public getTextAlignment(): number;
						public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
						public addView(param0: androidviewView, param1: number, param2: number): void;
						public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
					export class SwipeRefreshListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.list.SwipeRefreshBehavior$SwipeRefreshListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onRefreshRequested(): void;
						});
						public onRefreshRequested(): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.support.v7.widget.RecyclerView.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module list {
				export class WrapLayoutManager {
					public static HORIZONTAL: number;
					public static VERTICAL: number;
					public getGravity(): number;
					public computeVerticalScrollOffset(param0: androidsupportv7widgetRecyclerViewState): number;
					public onItemsMoved(param0: androidsupportv7widgetRecyclerView, param1: number, param2: number, param3: number): void;
					public computeHorizontalScrollExtent(param0: androidsupportv7widgetRecyclerViewState): number;
					public onItemsAdded(param0: androidsupportv7widgetRecyclerView, param1: number, param2: number): void;
					public constructor(param0: androidcontentContext, param1: number);
					public scrollToPosition(param0: number): void;
					public computeVerticalScrollRange(param0: androidsupportv7widgetRecyclerViewState): number;
					public scrollHorizontallyBy(param0: number, param1: androidsupportv7widgetRecyclerViewRecycler, param2: androidsupportv7widgetRecyclerViewState): number;
					public onAdapterChanged(param0: androidsupportv7widgetRecyclerViewAdapter, param1: androidsupportv7widgetRecyclerViewAdapter): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public getLineSpacing(): number;
					public canScrollVertically(): boolean;
					public setMinimumItemSpacing(param0: number): void;
					public onItemsChanged(param0: androidsupportv7widgetRecyclerView): void;
					public setGravity(param0: number): void;
					public onItemsRemoved(param0: androidsupportv7widgetRecyclerView, param1: number, param2: number): void;
					public computeHorizontalScrollOffset(param0: androidsupportv7widgetRecyclerViewState): number;
					public generateDefaultLayoutParams(): androidsupportv7widgetRecyclerViewLayoutParams;
					public onLayoutChildren(param0: androidsupportv7widgetRecyclerViewRecycler, param1: androidsupportv7widgetRecyclerViewState): void;
					public canScrollHorizontally(): boolean;
					public getMinimumItemSpacing(): number;
					public computeVerticalScrollExtent(param0: androidsupportv7widgetRecyclerViewState): number;
					public scrollVerticallyBy(param0: number, param1: androidsupportv7widgetRecyclerViewRecycler, param2: androidsupportv7widgetRecyclerViewState): number;
					public computeHorizontalScrollRange(param0: androidsupportv7widgetRecyclerViewState): number;
					public constructor(param0: androidcontentContext);
					public setLineSpacing(param0: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./com.telerik.widget.numberpicker.RadNumberPicker.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module numberpicker {
				export class NumberPickerInstanceState extends androidviewViewBaseSavedState {
					public static CREATOR: androidosParcelableCreator<any>;
					public value: number;
					public constructor(param0: androidosParcelable, param1: com.telerik.widget.numberpicker.RadNumberPicker);
					public constructor(param0: androidosParcel);
					public describeContents(): number;
					public constructor(param0: androidosParcelable);
					public writeToParcel(param0: androidosParcel, param1: number): void;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.android.common.Function.d.ts" />
/// <reference path="./com.telerik.widget.dataform.engine.PropertyChangedListener.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module numberpicker {
				export class RadNumberPicker extends androidwidgetFrameLayout implements androidviewViewOnClickListener {
					public setValueToStringConverter(param0: com.telerik.android.common.Function): void;
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public onClick(param0: androidviewView): void;
					public focusSearch(param0: number): androidviewView;
					public bringChildToFront(param0: androidviewView): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public isLayoutRequested(): boolean;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public onAttachedToWindow(): void;
					public getParentForAccessibility(): androidviewViewParent;
					public setPluralFormatString(param0: string): void;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public onSaveInstanceState(): androidosParcelable;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public getZeroFormatString(): string;
					public increaseView(): androidviewView;
					public rootView(): androidviewView;
					public getLayoutDirection(): number;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public setStep(param0: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public requestFitSystemWindows(): void;
					public getSingleFormatString(): string;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public isTextAlignmentResolved(): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public addPropertyChangedListener(param0: com.telerik.widget.dataform.engine.PropertyChangedListener): void;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public addView(param0: androidviewView, param1: number): void;
					public labelView(): androidviewView;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public onRestoreInstanceState(param0: androidosParcelable): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public setSingleFormatString(param0: string): void;
					public getValue(): number;
					public getValueToStringConverter(): com.telerik.android.common.Function;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public removeView(param0: androidviewView): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public canResolveLayoutDirection(): boolean;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getMinimum(): number;
					public getTextAlignment(): number;
					public decreaseView(): androidviewView;
					public setMinimum(param0: number): void;
					public removePropertyChangedListener(param0: com.telerik.widget.dataform.engine.PropertyChangedListener): void;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public setZeroFormatString(param0: string): void;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public getStep(): number;
					public setMaximum(param0: number): void;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public getPluralFormatString(): string;
					public getMaximum(): number;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public setValue(param0: number): void;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public constructor(param0: androidcontentContext);
					public addView(param0: androidviewView): void;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class ChartColor extends javalangObject {
					public static RED: number;
					public static BLACK: number;
					public static WHITE: number;
					public constructor();
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.android.common.ObservableCollection.d.ts" />
/// <reference path="./com.telerik.widget.chart.visualization.common.PresenterBase.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntry.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntryCollection.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class ChartPalette extends javalangObject implements com.telerik.android.common.CollectionChangeListener {
					public static PIE_FAMILY: string;
					public static AREA_FAMILY: string;
					public static BAR_FAMILY: string;
					public static LINE_FAMILY: string;
					public static POINT_FAMILY: string;
					public static OHLC_FAMILY: string;
					public static HORIZONTAL_AXIS_FAMILY: string;
					public static VERTICAL_AXIS_FAMILY: string;
					public static CARTESIAN_GRID_LINE_ANNOTATION: string;
					public static CARTESIAN_CUSTOM_ANNOTATION: string;
					public static CARTESIAN_PLOT_BAND_ANNOTATION: string;
					public static CARTESIAN_CHART_GRID: string;
					public static CARTESIAN_CHART_GRID_STRIPES: string;
					public static CARTESIAN_STROKED_ANNOTATION: string;
					public seriesEntries(): com.telerik.android.common.ObservableCollection;
					public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
					public constructor(param0: com.telerik.widget.palettes.ChartPalette);
					public getEntry(param0: com.telerik.widget.chart.visualization.common.PresenterBase, param1: number): com.telerik.widget.palettes.PaletteEntry;
					public clone(): javalangObject;
					public getEntry(param0: string): com.telerik.widget.palettes.PaletteEntry;
					public getEntry(param0: string, param1: number): com.telerik.widget.palettes.PaletteEntry;
					public constructor();
					public getEntry(param0: com.telerik.widget.chart.visualization.common.PresenterBase): com.telerik.widget.palettes.PaletteEntry;
					public clone(): com.telerik.widget.palettes.ChartPalette;
					public clonePalette(): com.telerik.widget.palettes.ChartPalette;
					public isPredefined(): boolean;
					public entriesForFamily(param0: string): com.telerik.widget.palettes.PaletteEntryCollection;
					public globalEntries(): com.telerik.android.common.ObservableCollection;
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
/// <reference path="./com.telerik.widget.palettes.PaletteEntryCollection.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class ChartPalettes extends javalangObject {
					public static init(param0: androidcontentContext): void;
					public static darkSelected(): com.telerik.widget.palettes.ChartPalette;
					public static lightSelected(param0: androidcontentContext): com.telerik.widget.palettes.ChartPalette;
					public static generatePalette(param0: com.telerik.widget.palettes.PaletteEntryCollection): com.telerik.widget.palettes.ChartPalette;
					public static context(): androidcontentContext;
					public static darkSelected(param0: androidcontentContext): com.telerik.widget.palettes.ChartPalette;
					public static lightSelected(): com.telerik.widget.palettes.ChartPalette;
					public static light(): com.telerik.widget.palettes.ChartPalette;
					public static dark(): com.telerik.widget.palettes.ChartPalette;
					public static dark(param0: androidcontentContext): com.telerik.widget.palettes.ChartPalette;
					public static light(param0: androidcontentContext): com.telerik.widget.palettes.ChartPalette;
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.palettes.ChartPalette.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class PaletteChangedListener extends javalangObject {
					/**
					 * Constructs a new instance of the com.telerik.widget.palettes.PaletteChangedListener interface with the provided implementation.
					 */
					public constructor(implementation: {
						onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
					});
					public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class PaletteEntry extends javalangObject {
					public getStrokeWidth(): number;
					public setCustomValue(param0: string, param1: javalangObject): void;
					public getAdditionalStroke(): number;
					public getCustomValue(param0: string, param1: string): string;
					public clone(): javalangObject;
					public setAdditionalStroke(param0: number): void;
					public clone(): com.telerik.widget.palettes.PaletteEntry;
					public getCustomValue(param0: string, param1: javalangObject): string;
					public setCustomValue(param0: string, param1: string): void;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number);
					public getAdditionalFill(): number;
					public setAdditionalFill(param0: number): void;
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public setFill(param0: number): void;
					public setStroke(param0: number): void;
					public constructor(param0: com.telerik.widget.palettes.PaletteEntry);
					public getFill(): number;
					public getStroke(): number;
					public constructor(param0: number);
					public setStrokeWidth(param0: number): void;
					public getCustomValue(param0: string): string;
					public constructor(param0: number, param1: number);
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.util.Collection.d.ts" />
/// <reference path="./java.util.Iterator.d.ts" />
/// <reference path="./java.util.List.d.ts" />
/// <reference path="./java.util.ListIterator.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class PaletteEntryCollection extends com.telerik.android.common.ObservableCollection {
					public clone(): javalangObject;
					public listIterator(param0: number): javautilListIterator<any>;
					public containsAll(param0: javautilCollection<any>): boolean;
					public isEmpty(): boolean;
					public retainAll(param0: javautilCollection<any>): boolean;
					public addAll(param0: javautilCollection<any>): boolean;
					public toArray(): native.Array<javalangObject>;
					public iterator(): javautilIterator<any>;
					public size(): number;
					public toArray(param0: native.Array<javalangObject>): native.Array<javalangObject>;
					public remove(param0: javalangObject): boolean;
					public removeAll(param0: javautilCollection<any>): boolean;
					public constructor();
					public indexOf(param0: javalangObject): number;
					public clear(): void;
					public lastIndexOf(param0: javalangObject): number;
					public setFamily(param0: string): void;
					public clone(): com.telerik.widget.palettes.PaletteEntryCollection;
					public hashCode(): number;
					public constructor(param0: number);
					public remove(param0: number): javalangObject;
					public add(param0: number, param1: javalangObject): void;
					public addAll(param0: number, param1: javautilCollection<any>): boolean;
					public equals(param0: javalangObject): boolean;
					public add(param0: javalangObject): boolean;
					public set(param0: number, param1: javalangObject): javalangObject;
					public getFamily(): string;
					public constructor(param0: com.telerik.widget.palettes.PaletteEntryCollection);
					public listIterator(): javautilListIterator<any>;
					public contains(param0: javalangObject): boolean;
					public subList(param0: number, param1: number): javautilList<any>;
					public get(param0: number): javalangObject;
					public constructor(param0: javautilCollection<any>);
				}
			}
		}
	}
}

/// <reference path="./com.telerik.android.common.ObservableCollection.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendInfoProvider extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendInfoProvider interface with the provided implementation.
						 */
						public constructor(implementation: {
							getLegendInfos(): com.telerik.android.common.ObservableCollection;
						});
						public getLegendInfos(): com.telerik.android.common.ObservableCollection;
					}
				}
			}
		}
	}
}

/// <reference path="./java.beans.PropertyChangeListener.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendItem extends javalangObject {
						public constructor(param0: javalangObject);
						public setTitle(param0: string): void;
						public getFillColor(): number;
						public representedItem(): javalangObject;
						public getStrokeColor(): number;
						public setFillColor(param0: number): void;
						public setPropertyChangeListener(param0: javabeansPropertyChangeListener): void;
						public setStrokeColor(param0: number): void;
						public getPropertyChangeListener(): javabeansPropertyChangeListener;
						public toString(): string;
						public getTitle(): string;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewGroup.d.ts" />
/// <reference path="./android.widget.Filter.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.RadLegendView.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.util.List.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendItemListAdapter extends androidwidgetArrayAdapter<any> {
						public isEnabled(param0: number): boolean;
						public areAllItemsEnabled(): boolean;
						public constructor();
						public getFilter(): androidwidgetFilter;
						public constructor(param0: androidcontentContext, param1: number);
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: javautilList<any>);
						public getView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
						public constructor(param0: androidcontentContext, param1: number, param2: javautilList<any>);
						public setDropDownViewTheme(param0: androidcontentresResourcesTheme): void;
						public getDropDownViewTheme(): androidcontentresResourcesTheme;
						public constructor(param0: androidcontentContext, param1: javautilList<any>, param2: com.telerik.widget.primitives.legend.RadLegendView);
						public getViewTypeCount(): number;
						public constructor(param0: androidcontentContext, param1: number, param2: number, param3: native.Array<javalangObject>);
						public constructor(param0: androidcontentContext, param1: number, param2: number);
						public constructor(param0: androidcontentContext, param1: number, param2: native.Array<javalangObject>);
						public getDropDownView(param0: number, param1: androidviewView, param2: androidviewViewGroup): androidviewView;
					}
				}
			}
		}
	}
}

/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectableListener.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendSelectable extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendSelectable interface with the provided implementation.
						 */
						public constructor(implementation: {
							setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
							getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
							setIsSelected(param0: boolean): void;
							getIsSelected(): boolean;
						});
						public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
						public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
						public setIsSelected(param0: boolean): void;
						public getIsSelected(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendSelectableListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendSelectableListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onLegendObjectSelected(param0: boolean): void;
						});
						public onLegendObjectSelected(param0: boolean): void;
					}
				}
			}
		}
	}
}

/// <reference path="./java.lang.Object.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendSelectionListener extends javalangObject {
						/**
						 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendSelectionListener interface with the provided implementation.
						 */
						public constructor(implementation: {
							onLegendItemSelected(param0: javalangObject): void;
						});
						public onLegendItemSelected(param0: javalangObject): void;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.TextView.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendItem.d.ts" />
/// <reference path="./java.beans.PropertyChangeEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class RadLegendItemView extends androidwidgetLinearLayout implements javabeansPropertyChangeListener, com.telerik.widget.primitives.legend.LegendSelectableListener {
						public isLayoutRequested(): boolean;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public focusableViewAvailable(param0: androidviewView): void;
						public canResolveLayoutDirection(): boolean;
						public showContextMenuForChild(param0: androidviewView): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public childDrawableStateChanged(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public propertyChange(param0: javabeansPropertyChangeEvent): void;
						public requestTransparentRegion(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public getLegendItem(): com.telerik.widget.primitives.legend.LegendItem;
						public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public getParent(): androidviewViewParent;
						public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
						public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
						public getTitleView(): androidwidgetTextView;
						public isTextAlignmentResolved(): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
						public recomputeViewAttributes(param0: androidviewView): void;
						public getTextDirection(): number;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
						public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
						public clearChildFocus(param0: androidviewView): void;
						public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
						public getParentForAccessibility(): androidviewViewParent;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public isLayoutDirectionResolved(): boolean;
						public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
						public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public onLegendObjectSelected(param0: boolean): void;
						public requestLayout(): void;
						public constructor(param0: androidcontentContext);
						public isTextDirectionResolved(): boolean;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public focusSearch(param0: number): androidviewView;
						public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
						public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
						public addView(param0: androidviewView, param1: number): void;
						public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
						public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
						public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public createContextMenu(param0: androidviewContextMenu): void;
						public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
						public removeView(param0: androidviewView): void;
						public getIconView(): androidviewView;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public requestFitSystemWindows(): void;
						public setLegendItem(param0: com.telerik.widget.primitives.legend.LegendItem): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
						public onStopNestedScroll(param0: androidviewView): void;
						public bringChildToFront(param0: androidviewView): void;
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public focusSearch(param0: androidviewView, param1: number): androidviewView;
						public addView(param0: androidviewView): void;
						public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
						public getTextAlignment(): number;
						public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
						public addView(param0: androidviewView, param1: number, param2: number): void;
						public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.widget.AdapterView.d.ts" />
/// <reference path="./android.widget.ArrayAdapter.d.ts" />
/// <reference path="./com.telerik.android.common.CollectionChangedEvent.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendInfoProvider.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectable.d.ts" />
/// <reference path="./com.telerik.widget.primitives.legend.LegendSelectionListener.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class RadLegendView extends androidwidgetFrameLayout implements com.telerik.android.common.CollectionChangeListener, androidwidgetAdapterViewOnItemClickListener {
						public isLayoutRequested(): boolean;
						public getLegendTitleView(): android.widget.TextView;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public focusableViewAvailable(param0: androidviewView): void;
						public createListViewAdapter(): androidwidgetArrayAdapter<any>;
						public canResolveLayoutDirection(): boolean;
						public addLegendItemSelectedListener(param0: com.telerik.widget.primitives.legend.LegendSelectionListener): void;
						public showContextMenuForChild(param0: androidviewView): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public childDrawableStateChanged(param0: androidviewView): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public requestTransparentRegion(param0: androidviewView): void;
						public getLegendProvider(): com.telerik.widget.primitives.legend.LegendInfoProvider;
						public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public getParent(): androidviewViewParent;
						public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
						public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
						public isTextAlignmentResolved(): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
						public recomputeViewAttributes(param0: androidviewView): void;
						public getTextDirection(): number;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
						public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
						public clearChildFocus(param0: androidviewView): void;
						public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
						public getParentForAccessibility(): androidviewViewParent;
						public setLegendProvider(param0: com.telerik.widget.primitives.legend.LegendInfoProvider): void;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public isLayoutDirectionResolved(): boolean;
						public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
						public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public requestLayout(): void;
						public constructor(param0: androidcontentContext);
						public onItemClick(param0: androidwidgetAdapterView<any>, param1: androidviewView, param2: number, param3: number): void;
						public isTextDirectionResolved(): boolean;
						public setItemViewLayout(param0: number): void;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public focusSearch(param0: number): androidviewView;
						public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
						public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
						public addView(param0: androidviewView, param1: number): void;
						public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
						public onAttachedToWindow(): void;
						public removeLegendItemSelectedListener(param0: com.telerik.widget.primitives.legend.LegendSelectionListener): void;
						public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
						public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
						public getItemViewLayout(): number;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public createContextMenu(param0: androidviewContextMenu): void;
						public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
						public removeView(param0: androidviewView): void;
						public notifySelectedListeners(param0: com.telerik.widget.primitives.legend.LegendSelectable): void;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public requestFitSystemWindows(): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
						public onStopNestedScroll(param0: androidviewView): void;
						public bringChildToFront(param0: androidviewView): void;
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public focusSearch(param0: androidviewView, param1: number): androidviewView;
						public addView(param0: androidviewView): void;
						public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
						public getTextAlignment(): number;
						public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
						public addView(param0: androidviewView, param1: number, param2: number): void;
						public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
					}
				}
			}
		}
	}
}

import androidviewaccessibilityAccessibilityNodeInfo = android.view.accessibility.AccessibilityNodeInfo;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.os.Parcel.d.ts" />
/// <reference path="./android.os.Parcelable.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.MotionEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityNodeInfo.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module panels {
					export class RadScrollView extends androidwidgetFrameLayout {
						public static SCROLLING_MODE_VERTICAL: number;
						public static SCROLLING_MODE_HORIZONTAL: number;
						public isLayoutRequested(): boolean;
						public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
						public setSmoothScrollingEnabled(param0: boolean): void;
						public focusableViewAvailable(param0: androidviewView): void;
						public onTouchEvent(param0: androidviewMotionEvent): boolean;
						public fullScroll(param0: number): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
						public requestTransparentRegion(param0: androidviewView): void;
						public onGenericMotionEvent(param0: androidviewMotionEvent): boolean;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
						public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
						public onSizeChanged(param0: number, param1: number, param2: number, param3: number): void;
						public onInterceptTouchEvent(param0: androidviewMotionEvent): boolean;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
						public onMeasure(param0: number, param1: number): void;
						public getTextDirection(): number;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
						public getMaxHorizontalScrollAmount(): number;
						public smoothScrollTo(param0: number, param1: number): void;
						public clearChildFocus(param0: androidviewView): void;
						public measureChildWithMargins(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public smoothScrollBy(param0: number, param1: number): void;
						public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
						public getParentForAccessibility(): androidviewViewParent;
						public canResolveTextDirection(): boolean;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public getMaxVerticalScrollAmount(): number;
						public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
						public requestLayout(): void;
						public constructor(param0: androidcontentContext);
						public scrollTo(param0: number, param1: number): void;
						public isTextDirectionResolved(): boolean;
						public computeVerticalScrollRange(): number;
						public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
						public addView(param0: androidviewView, param1: number): void;
						public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
						public onAttachedToWindow(): void;
						public getTopFadingEdgeStrength(): number;
						public onRequestFocusInDescendants(param0: number, param1: androidgraphicsRect): boolean;
						public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
						public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
						public getScrollMode(): number;
						public createContextMenu(param0: androidviewContextMenu): void;
						public setFillViewport(param0: boolean): void;
						public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
						public requestFitSystemWindows(): void;
						public focusSearch(param0: androidviewView, param1: number): androidviewView;
						public getTextAlignment(): number;
						public addView(param0: androidviewView, param1: number, param2: number): void;
						public pageScroll(param0: number): boolean;
						public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public performAccessibilityAction(param0: number, param1: androidosBundle): boolean;
						public getLayoutDirection(): number;
						public canResolveTextAlignment(): boolean;
						public measureChild(param0: androidviewView, param1: number, param2: number): void;
						public canResolveLayoutDirection(): boolean;
						public showContextMenuForChild(param0: androidviewView): boolean;
						public sendAccessibilityEvent(param0: number): void;
						public childDrawableStateChanged(param0: androidviewView): void;
						public onSaveInstanceState(): androidosParcelable;
						public shouldDelayChildPressedState(): boolean;
						public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
						public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
						public getParent(): androidviewViewParent;
						public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
						public computeHorizontalScrollOffset(): number;
						public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
						public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
						public isTextAlignmentResolved(): boolean;
						public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
						public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
						public fling(param0: number, param1: number): void;
						public recomputeViewAttributes(param0: androidviewView): void;
						public computeVerticalScrollOffset(): number;
						public arrowScroll(param0: number): boolean;
						public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
						public onOverScrolled(param0: number, param1: number, param2: boolean, param3: boolean): void;
						public isLayoutDirectionResolved(): boolean;
						public onRestoreInstanceState(param0: androidosParcelable): void;
						public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
						public computeScrollDeltaToGetChildRectOnScreen(param0: androidgraphicsRect): androidgraphicsPoint;
						public isFillViewport(): boolean;
						public dispatchKeyEvent(param0: androidviewKeyEvent): boolean;
						public executeKeyEvent(param0: androidviewKeyEvent): boolean;
						public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
						public focusSearch(param0: number): androidviewView;
						public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
						public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
						public computeScroll(): void;
						public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
						public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
						public getLeftFadingEdgeStrength(): number;
						public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
						public onInitializeAccessibilityNodeInfo(param0: androidviewaccessibilityAccessibilityNodeInfo): void;
						public removeView(param0: androidviewView): void;
						public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
						public getRightFadingEdgeStrength(): number;
						public getBottomFadingEdgeStrength(): number;
						public setScrollMode(param0: number): void;
						public onDetachedFromWindow(): void;
						public onStopNestedScroll(param0: androidviewView): void;
						public bringChildToFront(param0: androidviewView): void;
						public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
						public addView(param0: androidviewView): void;
						public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
						public isSmoothScrollingEnabled(): boolean;
						public setOverScrollMode(param0: number): void;
						public computeHorizontalScrollRange(): number;
						public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
						public onInitializeAccessibilityEvent(param0: androidviewaccessibilityAccessibilityEvent): void;
					}
					export module RadScrollView {
						export class SavedState extends androidviewViewBaseSavedState {
							public xScrollPosition: number;
							public yScrollPosition: number;
							public static CREATOR: androidosParcelableCreator<any>;
							public describeContents(): number;
							public writeToParcel(param0: androidosParcel, param1: number): void;
							public constructor(param0: androidosParcelable);
							public toString(): string;
							public constructor(param0: androidosParcel);
						}
					}
				}
			}
		}
	}
}

/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.TypedArray.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module scales {
				export class GaugeRadialScale extends com.telerik.widget.scales.GaugeScale {
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public focusSearch(param0: number): androidviewView;
					public bringChildToFront(param0: androidviewView): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public isLayoutRequested(): boolean;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public getParentForAccessibility(): androidviewViewParent;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public isLayoutDirectionResolved(): boolean;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public setSweepAngle(param0: number): void;
					public getOnScreenValue(param0: number): number;
					public getLayoutDirection(): number;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public getRadius(): number;
					public initWithXml(param0: androidcontentresTypedArray): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public requestFitSystemWindows(): void;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public isTextAlignmentResolved(): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public getSweepAngle(): number;
					public onDraw(param0: androidgraphicsCanvas): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public addView(param0: androidviewView, param1: number): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public setStartAngle(param0: number): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public sendAccessibilityEvent(param0: number): void;
					public requestLayout(): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public removeView(param0: androidviewView): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public canResolveLayoutDirection(): boolean;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getLocation(param0: number): number;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public init(): void;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public getStartAngle(): number;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public setRadius(param0: number): void;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public constructor(param0: androidcontentContext);
					public addView(param0: androidviewView): void;
				}
			}
		}
	}
}

import javatextNumberFormat = java.text.NumberFormat;
/// <reference path="./android.content.Context.d.ts" />
/// <reference path="./android.content.res.TypedArray.d.ts" />
/// <reference path="./android.graphics.Canvas.d.ts" />
/// <reference path="./android.graphics.Paint.d.ts" />
/// <reference path="./android.graphics.Point.d.ts" />
/// <reference path="./android.graphics.Rect.d.ts" />
/// <reference path="./android.graphics.drawable.Drawable.d.ts" />
/// <reference path="./android.os.Bundle.d.ts" />
/// <reference path="./android.util.AttributeSet.d.ts" />
/// <reference path="./android.view.ActionMode.d.ts" />
/// <reference path="./android.view.ContextMenu.d.ts" />
/// <reference path="./android.view.KeyEvent.d.ts" />
/// <reference path="./android.view.View.d.ts" />
/// <reference path="./android.view.ViewParent.d.ts" />
/// <reference path="./android.view.accessibility.AccessibilityEvent.d.ts" />
/// <reference path="./com.telerik.widget.gauge.RadGaugeView.d.ts" />
/// <reference path="./com.telerik.widget.indicators.GaugeIndicator.d.ts" />
/// <reference path="./com.telerik.widget.scales.GaugeScaleLabelsLayoutMode.d.ts" />
/// <reference path="./com.telerik.widget.scales.GaugeScaleTicksLayoutMode.d.ts" />
/// <reference path="./java.lang.Runnable.d.ts" />
/// <reference path="./java.text.NumberFormat.d.ts" />
/// <reference path="./java.util.ArrayList.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module scales {
				export abstract class GaugeScale extends androidviewViewGroup {
					public owner: com.telerik.widget.gauge.RadGaugeView;
					public indicators: javautilArrayList<any>;
					public maximum: number;
					public minimum: number;
					public lineVisible: boolean;
					public fillPaint: androidgraphicsPaint;
					public fillColor: number;
					public strokePaint: androidgraphicsPaint;
					public strokeColor: number;
					public strokeWidth: number;
					public majorTicksFillPaint: androidgraphicsPaint;
					public majorTicksStrokePaint: androidgraphicsPaint;
					public majorTicksFillColor: number;
					public majorTicksStrokeColor: number;
					public minorTicksFillPaint: androidgraphicsPaint;
					public minorTicksStrokePaint: androidgraphicsPaint;
					public minorTicksFillColor: number;
					public minorTicksStrokeColor: number;
					public labelsPaint: androidgraphicsPaint;
					public labelsColor: number;
					public majorTicksCount: number;
					public minorTicksCount: number;
					public ticksVisible: boolean;
					public majorTicksWidth: number;
					public minorTicksWidth: number;
					public majorTicksHeight: number;
					public minorTicksHeight: number;
					public ticksOffset: number;
					public ticksLayoutMode: com.telerik.widget.scales.GaugeScaleTicksLayoutMode;
					public labelsVisible: boolean;
					public labelsCount: number;
					public labelsLayoutMode: com.telerik.widget.scales.GaugeScaleLabelsLayoutMode;
					public labelsOffset: number;
					public labelsFormat: javatextNumberFormat;
					public getMajorTicksWidth(): number;
					public recomputeViewAttributes(param0: androidviewView): void;
					public onNestedScrollAccepted(param0: androidviewView, param1: androidviewView, param2: number): void;
					public setMinorTicksWidth(param0: number): void;
					public getLabelsColor(): number;
					public bringChildToFront(param0: androidviewView): void;
					public removeAllIndicators(): void;
					public createContextMenu(param0: androidviewContextMenu): void;
					public onNestedPreScroll(param0: androidviewView, param1: number, param2: number, param3: native.Array<number>): void;
					public addView(param0: androidviewView, param1: number, param2: androidviewViewGroupLayoutParams): void;
					public isTextDirectionResolved(): boolean;
					public removeIndicator(param0: number): void;
					public getMinorTicksWidth(): number;
					public getStrokeWidth(): number;
					public isLabelsVisible(): boolean;
					public addIndicator(param0: number, param1: com.telerik.widget.indicators.GaugeIndicator): void;
					public setTicksOffset(param0: number): void;
					public getMajorTicksStrokeColor(): number;
					public getMajorTicksFillColor(): number;
					public getLayoutDirection(): number;
					public setMajorTicksFillPaint(param0: androidgraphicsPaint): void;
					public childHasTransientStateChanged(param0: androidviewView, param1: boolean): void;
					public setOwner(param0: com.telerik.widget.gauge.RadGaugeView): void;
					public getLabelsOffset(): number;
					public childDrawableStateChanged(param0: androidviewView): void;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet);
					public getTicksLayoutMode(): com.telerik.widget.scales.GaugeScaleTicksLayoutMode;
					public setLineVisible(param0: boolean): void;
					public focusableViewAvailable(param0: androidviewView): void;
					public setStrokePaint(param0: androidgraphicsPaint): void;
					public setLabelsOffset(param0: number): void;
					public getMajorTicksFillPaint(): androidgraphicsPaint;
					public isTextAlignmentResolved(): boolean;
					public isTicksVisible(): boolean;
					public onDraw(param0: androidgraphicsCanvas): void;
					public invalidateChildInParent(param0: native.Array<number>, param1: androidgraphicsRect): androidviewViewParent;
					public canResolveTextAlignment(): boolean;
					public getLabelsPaint(): androidgraphicsPaint;
					public onKeyMultiple(param0: number, param1: number, param2: androidviewKeyEvent): boolean;
					public onKeyDown(param0: number, param1: androidviewKeyEvent): boolean;
					public getOwner(): com.telerik.widget.gauge.RadGaugeView;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable): void;
					public requestArrange(): void;
					public getMajorTicksHeight(): number;
					public invalidateChild(param0: androidviewView, param1: androidgraphicsRect): void;
					public setMajorTicksStrokePaint(param0: androidgraphicsPaint): void;
					public onNestedFling(param0: androidviewView, param1: number, param2: number, param3: boolean): boolean;
					public onNestedScroll(param0: androidviewView, param1: number, param2: number, param3: number, param4: number): void;
					public getLabelsCount(): number;
					public sendAccessibilityEvent(param0: number): void;
					public addIndicator(param0: com.telerik.widget.indicators.GaugeIndicator): void;
					public requestLayout(): void;
					public setMinorTicksStrokePaint(param0: androidgraphicsPaint): void;
					public requestTransparentRegion(param0: androidviewView): void;
					public addView(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public isLineVisible(): boolean;
					public getTextAlignment(): number;
					public updateViewLayout(param0: androidviewView, param1: androidviewViewGroupLayoutParams): void;
					public getLocation(param0: number): number;
					public getChildVisibleRect(param0: androidviewView, param1: androidgraphicsRect, param2: androidgraphicsPoint): boolean;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback, param2: number): androidviewActionMode;
					public onNestedPreFling(param0: androidviewView, param1: number, param2: number): boolean;
					public onNestedPrePerformAccessibilityAction(param0: androidviewView, param1: number, param2: androidosBundle): boolean;
					public setMinorTicksCount(param0: number): void;
					public setMaximum(param0: number): void;
					public getStrokePaint(): androidgraphicsPaint;
					public setIndicators(param0: javautilArrayList<any>): void;
					public setMajorTicksHeight(param0: number): void;
					public setStrokeColor(param0: number): void;
					public setFillColor(param0: number): void;
					public sendAccessibilityEventUnchecked(param0: androidviewaccessibilityAccessibilityEvent): void;
					public setMinorTicksStrokeColor(param0: number): void;
					public focusSearch(param0: number): androidviewView;
					public isLayoutRequested(): boolean;
					public focusSearch(param0: androidviewView, param1: number): androidviewView;
					public getParentForAccessibility(): androidviewViewParent;
					public setLabelsCount(param0: number): void;
					public isLayoutDirectionResolved(): boolean;
					public getMinorTicksStrokeColor(): number;
					public onKeyUp(param0: number, param1: androidviewKeyEvent): boolean;
					public setTicksVisible(param0: boolean): void;
					public getOnScreenValue(param0: number): number;
					public getMajorTicksCount(): number;
					public getMajorTicksStrokePaint(): androidgraphicsPaint;
					public notifySubtreeAccessibilityStateChanged(param0: androidviewView, param1: androidviewView, param2: number): void;
					public addView(param0: androidviewView, param1: number, param2: number): void;
					public getMinorTicksCount(): number;
					public initWithXml(param0: androidcontentresTypedArray): void;
					public setMajorTicksCount(param0: number): void;
					public clearChildFocus(param0: androidviewView): void;
					public onKeyLongPress(param0: number, param1: androidviewKeyEvent): boolean;
					public requestChildFocus(param0: androidviewView, param1: androidviewView): void;
					public setMajorTicksWidth(param0: number): void;
					public getIndicators(): javautilArrayList<any>;
					public setMinorTicksHeight(param0: number): void;
					public setLabelsLayoutMode(param0: com.telerik.widget.scales.GaugeScaleLabelsLayoutMode): void;
					public scheduleDrawable(param0: androidgraphicsdrawableDrawable, param1: javalangRunnable, param2: number): void;
					public getTextDirection(): number;
					public onStopNestedScroll(param0: androidviewView): void;
					public setMinorTicksFillPaint(param0: androidgraphicsPaint): void;
					public requestFitSystemWindows(): void;
					public setStrokeWidth(param0: number): void;
					public startActionModeForChild(param0: androidviewView, param1: androidviewActionModeCallback): androidviewActionMode;
					public showContextMenuForChild(param0: androidviewView): boolean;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number);
					public getMinorTicksHeight(): number;
					public setRange(param0: number, param1: number): void;
					public setMajorTicksFillColor(param0: number): void;
					public onStartNestedScroll(param0: androidviewView, param1: androidviewView, param2: number): boolean;
					public setLabelsVisible(param0: boolean): void;
					public getParent(): androidviewViewParent;
					public canResolveTextDirection(): boolean;
					public setLabelsColor(param0: number): void;
					public addView(param0: androidviewView, param1: number): void;
					public setTicksLayoutMode(param0: com.telerik.widget.scales.GaugeScaleTicksLayoutMode): void;
					public requestDisallowInterceptTouchEvent(param0: boolean): void;
					public getMinorTicksFillPaint(): androidgraphicsPaint;
					public constructor(param0: androidcontentContext, param1: androidutilAttributeSet, param2: number, param3: number);
					public removeView(param0: androidviewView): void;
					public setMajorTicksStrokeColor(param0: number): void;
					public invalidateDrawable(param0: androidgraphicsdrawableDrawable): void;
					public setFillPaint(param0: androidgraphicsPaint): void;
					public getTicksOffset(): number;
					public canResolveLayoutDirection(): boolean;
					public getMinimum(): number;
					public setMinimum(param0: number): void;
					public setLabelsPaint(param0: androidgraphicsPaint): void;
					public removeIndicator(param0: com.telerik.widget.indicators.GaugeIndicator): void;
					public requestRender(): void;
					public init(): void;
					public getMinorTicksFillColor(): number;
					public unscheduleDrawable(param0: androidgraphicsdrawableDrawable): void;
					public getMinorTicksStrokePaint(): androidgraphicsPaint;
					public getFillPaint(): androidgraphicsPaint;
					public getMaximum(): number;
					public animateIndicators(): void;
					public requestSendAccessibilityEvent(param0: androidviewView, param1: androidviewaccessibilityAccessibilityEvent): boolean;
					public requestChildRectangleOnScreen(param0: androidviewView, param1: androidgraphicsRect, param2: boolean): boolean;
					public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
					public setMinorTicksFillColor(param0: number): void;
					public constructor(param0: androidcontentContext);
					public getLabelsLayoutMode(): com.telerik.widget.scales.GaugeScaleLabelsLayoutMode;
					public getFillColor(): number;
					public getStrokeColor(): number;
					public addView(param0: androidviewView): void;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module scales {
				export class GaugeScaleLabelsLayoutMode extends javalangEnum<any> {
					public static OUTER: com.telerik.widget.scales.GaugeScaleLabelsLayoutMode;
					public static INNER: com.telerik.widget.scales.GaugeScaleLabelsLayoutMode;
					public static values(): native.Array<com.telerik.widget.scales.GaugeScaleLabelsLayoutMode>;
					public static valueOf(param0: string): com.telerik.widget.scales.GaugeScaleLabelsLayoutMode;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Enum.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
declare module com {
	export module telerik {
		export module widget {
			export module scales {
				export class GaugeScaleTicksLayoutMode extends javalangEnum<any> {
					public static OUTER: com.telerik.widget.scales.GaugeScaleTicksLayoutMode;
					public static INNER: com.telerik.widget.scales.GaugeScaleTicksLayoutMode;
					public static valueOf(param0: string): com.telerik.widget.scales.GaugeScaleTicksLayoutMode;
					public static values(): native.Array<com.telerik.widget.scales.GaugeScaleTicksLayoutMode>;
					public static valueOf(param0: javalangClass<any>, param1: string): javalangEnum<any>;
				}
			}
		}
	}
}

