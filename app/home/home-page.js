"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var firebase = require("nativescript-plugin-firebase");
var button_1 = require("tns-core-modules/ui/button");
var label_1 = require("tns-core-modules/ui/label");
var dialogs = require("ui/dialogs");
var frame_1 = require("ui/frame");
var home_view_model_1 = require("./home-view-model");
var http = require("http");
var appSettings = require("application-settings");
/* tslint:disable:max-line-length jsdoc-format no-bitwise*/
/* ***********************************************************
* Use the "onNavigatingTo" handler to initialize the page binding context.
*************************************************************/
function onNavigatingTo(args) {
    /* ***********************************************************
    * The "onNavigatingTo" event handler lets you detect if the user navigated with a back button.
    * Skipping the re-initialization on back navigation means the user will see the
    * page in the same data state that he left it in before navigating.
    *************************************************************/
    var page = args.object;
    if (args.isBackNavigation) {
        var ind = page.getViewById("activityIndicator");
        ind.visibility = "visible";
        loadAnn(args);
        return;
    }
    page.bindingContext = new home_view_model_1.HomeViewModel();
    console.log("Navigating");
}
exports.onNavigatingTo = onNavigatingTo;
function onNavigatedTo(args) {
    console.log("Navigated");
}
exports.onNavigatedTo = onNavigatedTo;
/* tslint:disable:prefer-conditional-expression */
/* ***********************************************************
* According to guidelines, if you have a drawer on your page, you should always
* have a button that opens it. Get a reference to the RadSideDrawer view and
* use the showDrawer() function to open the app drawer section.
*************************************************************/
function onDrawerButtonTap(args) {
    var sideDrawer = frame_1.topmost().getViewById("sideDrawer");
    sideDrawer.showDrawer();
}
exports.onDrawerButtonTap = onDrawerButtonTap;
function datass(args) {
    var stack = frame_1.topmost().getViewById("slayout");
    var btn = new button_1.Button();
    btn.on(button_1.Button.tapEvent, doubledildo);
    btn.text = "ohai";
    stack.addChild(btn);
}
exports.datass = datass;
function doubledildo(args) {
    var stack = frame_1.topmost().getViewById("slayout");
    var d = new Date();
    for (var i = 0; i < 7; i++) {
        var lbl = new label_1.Label();
        lbl.className = "date";
        lbl.text = (d.getMonth() + 1) + "/" + d.getDate() + "/" + d.getFullYear();
        d.setDate(d.getDate() + 1);
        stack.addChild(lbl);
    }
}
exports.doubledildo = doubledildo;
// { "Content-Type": "application/json; charset=UTF-8", "Access-Control-Allow-Origin": "*", "Access-Control-Allow-Methods": "GET, POST, OPTIONS", "Access-Control-Allow-Headers": "Content-Type", "Access-Control-Request-Headers": "X-Requested-With, accept, content-type" }
function loadAnn(args) {
    firebase.getCurrentUser().then(function (user) {
        http.request({
            url: "https://fzwestboard.000webhostapp.com/getann.php",
            method: "POST",
            headers: { "Content-Type": "application/json" },
            content: JSON.stringify({ uid: user.uid })
        }).then(function (result) {
            var page = args.object;
            var stack = page.getViewById("slayout");
            stack.removeChildren();
            var resobj = JSON.parse(result.content);
            var activityIndicator = page.getViewById("activityIndicator");
            activityIndicator.visibility = "collapse";
            var count = resobj.title.length; // # of items in the array, not the # of characters in the title
            var btn;
            var lbl;
            var onDate;
            if (count === 0) {
                var lbl1 = new label_1.Label();
                var lbl2 = new label_1.Label();
                lbl1.text = "There are no announcements for you! Try subscribing to some clubs by going to 'browse clubs' in the sidebar!";
                lbl1.textWrap = true;
                lbl2.text = "<------";
                stack.addChild(lbl1);
                stack.addChild(lbl2);
            }
            var _loop_1 = function (i) {
                if (resobj.birth[i] !== onDate) {
                    onDate = resobj.birth[i];
                    lbl = new label_1.Label();
                    lbl.class = "date";
                    lbl.text = resobj.birth[i];
                    stack.addChild(lbl);
                }
                btn = new button_1.Button();
                btn.text = "[" + resobj.club[i] + "] " + resobj.title[i];
                if (appSettings.getBoolean("colorblind")) {
                    btn.backgroundColor = "#e9e9e9";
                }
                else {
                    btn.backgroundColor = getTintedColor(resobj.color[i], 120);
                }
                btn.on(button_1.Button.tapEvent, function () {
                    dialogs.alert({
                        title: resobj.club[i],
                        message: resobj.desc[i],
                        okButtonText: "Close"
                    });
                });
                stack.addChild(btn);
            };
            for (var i = 0; i < count; i++) {
                _loop_1(i);
            }
        }, function (error) {
            console.error(JSON.stringify(error));
        });
    }, function (error) {
        alert("FB ERROR: " + error);
    });
}
exports.loadAnn = loadAnn;
function onLoaded(args) {
    loadAnn(args);
    console.log("loading announcments");
}
exports.onLoaded = onLoaded;
// credits: richard maloney 2006, edited by Will Fleetwood 2018 for nativescript. must disable no-bitwise for tslint
function getTintedColor(color, v) {
    if (color.length > 6) {
        color = color.substring(1, color.length);
    }
    var rgb = parseInt(color, 16);
    var r = Math.abs(((rgb >> 16) & 0xFF) + v);
    if (r > 255) {
        r = r - (r - 255);
    }
    var g = Math.abs(((rgb >> 8) & 0xFF) + v);
    if (g > 255) {
        g = g - (g - 255);
    }
    var b = Math.abs((rgb & 0xFF) + v);
    if (b > 255) {
        b = b - (b - 255);
    }
    var newr = Number(r < 0 || isNaN(r)) ? 0 : ((r > 255) ? 255 : r).toString(16);
    if (newr.valueOf() <= 9) {
        newr = "0" + newr;
    }
    var newg = Number(g < 0 || isNaN(g)) ? 0 : ((g > 255) ? 255 : g).toString(16);
    if (newg.valueOf() <= 9) {
        newg = "0" + g;
    }
    var newb = Number(b < 0 || isNaN(b)) ? 0 : ((b > 255) ? 255 : b).toString(16);
    if (b.valueOf() <= 9) {
        newb = "0" + b;
    }
    return "#" + newr + newg + newb;
}
//# sourceMappingURL=data:application/json;base64,